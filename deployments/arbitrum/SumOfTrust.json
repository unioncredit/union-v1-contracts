{
  "address": "0x754AE2eC8127080C63694162941Ea2BE725a90a2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "effectiveNumber_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "effectiveNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "vouchs",
          "type": "uint256[]"
        }
      ],
      "name": "getCreditLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "staker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "vouchingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "availableStakingAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICreditLimitModel.LockedInfo[]",
          "name": "array",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isIncrease",
          "type": "bool"
        }
      ],
      "name": "getLockedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCreditLimitModel",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "setEffectNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc12b2f7e796dec41a8d4ed96bc3c4858cbdeb9b230bb6ae497a2902dac9985da",
  "receipt": {
    "to": null,
    "from": "0x497C20fEd24D61C7506EF2500065e4fd662f3779",
    "contractAddress": "0x754AE2eC8127080C63694162941Ea2BE725a90a2",
    "transactionIndex": 0,
    "gasUsed": "12220112",
    "logsBloom": "0x
    "blockHash": "0x774b5280b84157c2b31a83ae787e636e5af5d31fbd14ddc13dfc5dbfb80a86fd",
    "transactionHash": "0xc12b2f7e796dec41a8d4ed96bc3c4858cbdeb9b230bb6ae497a2902dac9985da",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6172944,
        "transactionHash": "0xc12b2f7e796dec41a8d4ed96bc3c4858cbdeb9b230bb6ae497a2902dac9985da",
        "address": "0x754AE2eC8127080C63694162941Ea2BE725a90a2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000497c20fed24d61c7506ef2500065e4fd662f3779"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x774b5280b84157c2b31a83ae787e636e5af5d31fbd14ddc13dfc5dbfb80a86fd"
      }
    ],
    "blockNumber": 6172944,
    "cumulativeGasUsed": "5504572",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "3"
  ],
  "solcInputHash": "4793ff3a0960b82e3cabf228d8731952",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"effectiveNumber_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"effectiveNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"vouchs\",\"type\":\"uint256[]\"}],\"name\":\"getCreditLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vouchingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableStakingAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ICreditLimitModel.LockedInfo[]\",\"name\":\"array\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isIncrease\",\"type\":\"bool\"}],\"name\":\"getLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCreditLimitModel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"setEffectNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getCreditLimit(uint256[])\":{\"returns\":{\"_0\":\"Member credit limit\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getCreditLimit(uint256[])\":{\"notice\":\"Calculates the member credit limit by vouchs\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/user/SumOfTrust.sol\":\"SumOfTrust\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/ICreditLimitModel.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\n/**\\n * @title CreditLimitModel Interface\\n *  @dev Calculate the user's credit line based on the trust he receives from the vouchees.\\n */\\ninterface ICreditLimitModel {\\n    struct LockedInfo {\\n        address staker;\\n        uint256 vouchingAmount;\\n        uint256 lockedAmount;\\n        uint256 availableStakingAmount;\\n    }\\n\\n    function isCreditLimitModel() external pure returns (bool);\\n\\n    function effectiveNumber() external returns (uint256);\\n\\n    /**\\n     * @notice Calculates the staker locked amount\\n     * @return Member credit limit\\n     */\\n    function getLockedAmount(\\n        LockedInfo[] calldata vouchAmountList,\\n        address staker,\\n        uint256 amount,\\n        bool isIncrease\\n    ) external pure returns (uint256);\\n\\n    /**\\n     * @notice Calculates the member credit limit by vouchs\\n     * @return Member credit limit\\n     */\\n    function getCreditLimit(uint256[] calldata vouchs) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x26275036e2041f9a8e002b339541eb2986bf16aaaf2b763103da63203fae39c9\",\"license\":\"UNLICENSED\"},\"contracts/user/SumOfTrust.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../interfaces/ICreditLimitModel.sol\\\";\\n\\ncontract SumOfTrust is Ownable, ICreditLimitModel {\\n    bool public constant override isCreditLimitModel = true;\\n    uint256 public override effectiveNumber;\\n\\n    constructor(uint256 effectiveNumber_) {\\n        effectiveNumber = effectiveNumber_;\\n    }\\n\\n    function getCreditLimit(uint256[] memory vouchs) public view override returns (uint256) {\\n        uint256 vouchLength = vouchs.length;\\n        if (vouchLength >= effectiveNumber) {\\n            uint256 limit;\\n            for (uint256 i = 0; i < vouchLength; i++) {\\n                limit += vouchs[i];\\n            }\\n\\n            return limit;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getLockedAmount(\\n        LockedInfo[] memory array,\\n        address account,\\n        uint256 amount,\\n        bool isIncrease\\n    ) public pure override returns (uint256) {\\n        uint256 arrLength = array.length;\\n        if (arrLength == 0) return 0;\\n\\n        uint256 remaining = amount;\\n        uint256 newLockedAmount;\\n        if (isIncrease) {\\n            array = _sortArray(array, true);\\n            for (uint256 i = 0; i < arrLength; i++) {\\n                uint256 remainingVouchingAmount;\\n                if (array[i].vouchingAmount > array[i].lockedAmount) {\\n                    remainingVouchingAmount = array[i].vouchingAmount - array[i].lockedAmount;\\n                } else {\\n                    remainingVouchingAmount = 0;\\n                }\\n\\n                if (remainingVouchingAmount > array[i].availableStakingAmount) {\\n                    if (array[i].availableStakingAmount > remaining) {\\n                        newLockedAmount = array[i].lockedAmount + remaining;\\n                        remaining = 0;\\n                    } else {\\n                        newLockedAmount = array[i].lockedAmount + array[i].availableStakingAmount;\\n                        remaining = remaining - array[i].availableStakingAmount;\\n                    }\\n                } else {\\n                    if (remainingVouchingAmount > remaining) {\\n                        newLockedAmount = array[i].lockedAmount + remaining;\\n                        remaining = 0;\\n                    } else {\\n                        newLockedAmount = array[i].lockedAmount + remainingVouchingAmount;\\n                        remaining -= remainingVouchingAmount;\\n                    }\\n                }\\n\\n                if (account == array[i].staker) {\\n                    return newLockedAmount;\\n                }\\n            }\\n        } else {\\n            array = _sortArray(array, false);\\n            for (uint256 i = 0; i < arrLength; i++) {\\n                if (array[i].lockedAmount > remaining) {\\n                    newLockedAmount = array[i].lockedAmount - remaining;\\n                    remaining = 0;\\n                } else {\\n                    newLockedAmount = 0;\\n                    remaining -= array[i].lockedAmount;\\n                }\\n\\n                if (account == array[i].staker) {\\n                    return newLockedAmount;\\n                }\\n            }\\n        }\\n\\n        return 0;\\n    }\\n\\n    function setEffectNumber(uint256 number) external onlyOwner {\\n        effectiveNumber = number;\\n    }\\n\\n    //use bubble\\n    function _sortArray(LockedInfo[] memory arr, bool isPositive) private pure returns (LockedInfo[] memory) {\\n        uint256 length = arr.length;\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            for (uint256 j = i + 1; j < length; j++) {\\n                if (isPositive) {\\n                    if (arr[i].vouchingAmount < arr[j].vouchingAmount) {\\n                        LockedInfo memory temp = arr[j];\\n                        arr[j] = arr[i];\\n                        arr[i] = temp;\\n                    }\\n                } else {\\n                    if (arr[i].vouchingAmount > arr[j].vouchingAmount) {\\n                        LockedInfo memory temp = arr[j];\\n                        arr[j] = arr[i];\\n                        arr[i] = temp;\\n                    }\\n                }\\n            }\\n        }\\n\\n        return arr;\\n    }\\n}\\n\",\"keccak256\":\"0xeae07b71b095d87b0004b6ee1d2663ee8b9f9eaec6298c9f842cc74ca5c203a2\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610dd9380380610dd983398101604081905261002f91610090565b61003833610040565b6001556100a8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100a1578081fd5b5051919050565b610d22806100b76000396000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c80634c9cc6731461007d57806351118cfb146100a3578063715018a6146100ac578063747bcf8f146100b65780638da5cb5b146100c9578063a0d9987b146100e4578063b0db4930146100f7578063f2fde38b1461010f575b600080fd5b61009061008b366004610b18565b610122565b6040519081526020015b60405180910390f35b61009060015481565b6100b4610195565b005b6100b46100c4366004610bab565b6101d4565b6000546040516001600160a01b03909116815260200161009a565b6100906100f2366004610a17565b610203565b6100ff600181565b604051901515815260200161009a565b6100b461011d3660046109f6565b610668565b805160015460009190811061018c576000805b828110156101845784818151811061015d57634e487b7160e01b600052603260045260246000fd5b6020026020010151826101709190610c76565b91508061017c81610ca5565b915050610135565b509392505050565b50600092915050565b6000546001600160a01b031633146101c85760405162461bcd60e51b81526004016101bf90610bc3565b60405180910390fd5b6101d26000610703565b565b6000546001600160a01b031633146101fe5760405162461bcd60e51b81526004016101bf90610bc3565b600155565b835160009080610217576000915050610660565b83600084156105295761022b886001610753565b975060005b8381101561052357600089828151811061025a57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001518a838151811061028657634e487b7160e01b600052603260045260246000fd5b6020026020010151602001511115610301578982815181106102b857634e487b7160e01b600052603260045260246000fd5b6020026020010151604001518a83815181106102e457634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516102fa9190610c8e565b9050610305565b5060005b89828151811061032557634e487b7160e01b600052603260045260246000fd5b60200260200101516060015181111561044f57838a838151811061035957634e487b7160e01b600052603260045260246000fd5b60200260200101516060015111156103ad57838a838151811061038c57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516103a29190610c76565b9250600093506104be565b8982815181106103cd57634e487b7160e01b600052603260045260246000fd5b6020026020010151606001518a83815181106103f957634e487b7160e01b600052603260045260246000fd5b60200260200101516040015161040f9190610c76565b925089828151811061043157634e487b7160e01b600052603260045260246000fd5b602002602001015160600151846104489190610c8e565b93506104be565b8381111561047857838a838151811061038c57634e487b7160e01b600052603260045260246000fd5b808a838151811061049957634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516104af9190610c76565b92506104bb8185610c8e565b93505b8982815181106104de57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b0316896001600160a01b03161415610510578295505050505050610660565b508061051b81610ca5565b915050610230565b50610658565b610534886000610753565b975060005b83811015610656578289828151811061056257634e487b7160e01b600052603260045260246000fd5b60200260200101516040015111156105b6578289828151811061059557634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516105ab9190610c8e565b9150600092506105f4565b600091508881815181106105da57634e487b7160e01b600052603260045260246000fd5b602002602001015160400151836105f19190610c8e565b92505b88818151811061061457634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b0316886001600160a01b0316141561064457509250610660915050565b8061064e81610ca5565b915050610539565b505b600093505050505b949350505050565b6000546001600160a01b031633146106925760405162461bcd60e51b81526004016101bf90610bc3565b6001600160a01b0381166106f75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101bf565b61070081610703565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b815160609060005b818110156109c1576000610770826001610c76565b90505b828110156109ae578415610891578581815181106107a157634e487b7160e01b600052603260045260246000fd5b6020026020010151602001518683815181106107cd57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151101561088c57600086828151811061080157634e487b7160e01b600052603260045260246000fd5b6020026020010151905086838151811061082b57634e487b7160e01b600052603260045260246000fd5b602002602001015187838151811061085357634e487b7160e01b600052603260045260246000fd5b60200260200101819052508087848151811061087f57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250505b61099c565b8581815181106108b157634e487b7160e01b600052603260045260246000fd5b6020026020010151602001518683815181106108dd57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151111561099c57600086828151811061091157634e487b7160e01b600052603260045260246000fd5b6020026020010151905086838151811061093b57634e487b7160e01b600052603260045260246000fd5b602002602001015187838151811061096357634e487b7160e01b600052603260045260246000fd5b60200260200101819052508087848151811061098f57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250505b806109a681610ca5565b915050610773565b50806109b981610ca5565b91505061075b565b50929392505050565b80356001600160a01b03811681146109e157600080fd5b919050565b803580151581146109e157600080fd5b600060208284031215610a07578081fd5b610a10826109ca565b9392505050565b6000806000806080808688031215610a2d578384fd5b853567ffffffffffffffff811115610a43578485fd5b8601601f81018813610a53578485fd5b80356020610a68610a6383610c52565b610c21565b8083825282820191508285018c848660071b8801011115610a8757898afd5b8995505b84861015610ae45786818e031215610aa157898afd5b610aa9610bf8565b610ab2826109ca565b815281850135858201526040808301359082015260608083013590820152835260019590950194918301918601610a8b565b509850610af490508982016109ca565b96505050505060408501359150610b0d606086016109e6565b905092959194509250565b60006020808385031215610b2a578182fd5b823567ffffffffffffffff811115610b40578283fd5b8301601f81018513610b50578283fd5b8035610b5e610a6382610c52565b80828252848201915084840188868560051b8701011115610b7d578687fd5b8694505b83851015610b9f578035835260019490940193918501918501610b81565b50979650505050505050565b600060208284031215610bbc578081fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6040516080810167ffffffffffffffff81118282101715610c1b57610c1b610cd6565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610c4a57610c4a610cd6565b604052919050565b600067ffffffffffffffff821115610c6c57610c6c610cd6565b5060051b60200190565b60008219821115610c8957610c89610cc0565b500190565b600082821015610ca057610ca0610cc0565b500390565b6000600019821415610cb957610cb9610cc0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122026d36f8ffd689488e1fb2e76db601e41e786a3d1179e991867ab3bfbd3f88b9a64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100785760003560e01c80634c9cc6731461007d57806351118cfb146100a3578063715018a6146100ac578063747bcf8f146100b65780638da5cb5b146100c9578063a0d9987b146100e4578063b0db4930146100f7578063f2fde38b1461010f575b600080fd5b61009061008b366004610b18565b610122565b6040519081526020015b60405180910390f35b61009060015481565b6100b4610195565b005b6100b46100c4366004610bab565b6101d4565b6000546040516001600160a01b03909116815260200161009a565b6100906100f2366004610a17565b610203565b6100ff600181565b604051901515815260200161009a565b6100b461011d3660046109f6565b610668565b805160015460009190811061018c576000805b828110156101845784818151811061015d57634e487b7160e01b600052603260045260246000fd5b6020026020010151826101709190610c76565b91508061017c81610ca5565b915050610135565b509392505050565b50600092915050565b6000546001600160a01b031633146101c85760405162461bcd60e51b81526004016101bf90610bc3565b60405180910390fd5b6101d26000610703565b565b6000546001600160a01b031633146101fe5760405162461bcd60e51b81526004016101bf90610bc3565b600155565b835160009080610217576000915050610660565b83600084156105295761022b886001610753565b975060005b8381101561052357600089828151811061025a57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001518a838151811061028657634e487b7160e01b600052603260045260246000fd5b6020026020010151602001511115610301578982815181106102b857634e487b7160e01b600052603260045260246000fd5b6020026020010151604001518a83815181106102e457634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516102fa9190610c8e565b9050610305565b5060005b89828151811061032557634e487b7160e01b600052603260045260246000fd5b60200260200101516060015181111561044f57838a838151811061035957634e487b7160e01b600052603260045260246000fd5b60200260200101516060015111156103ad57838a838151811061038c57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516103a29190610c76565b9250600093506104be565b8982815181106103cd57634e487b7160e01b600052603260045260246000fd5b6020026020010151606001518a83815181106103f957634e487b7160e01b600052603260045260246000fd5b60200260200101516040015161040f9190610c76565b925089828151811061043157634e487b7160e01b600052603260045260246000fd5b602002602001015160600151846104489190610c8e565b93506104be565b8381111561047857838a838151811061038c57634e487b7160e01b600052603260045260246000fd5b808a838151811061049957634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516104af9190610c76565b92506104bb8185610c8e565b93505b8982815181106104de57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b0316896001600160a01b03161415610510578295505050505050610660565b508061051b81610ca5565b915050610230565b50610658565b610534886000610753565b975060005b83811015610656578289828151811061056257634e487b7160e01b600052603260045260246000fd5b60200260200101516040015111156105b6578289828151811061059557634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516105ab9190610c8e565b9150600092506105f4565b600091508881815181106105da57634e487b7160e01b600052603260045260246000fd5b602002602001015160400151836105f19190610c8e565b92505b88818151811061061457634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b0316886001600160a01b0316141561064457509250610660915050565b8061064e81610ca5565b915050610539565b505b600093505050505b949350505050565b6000546001600160a01b031633146106925760405162461bcd60e51b81526004016101bf90610bc3565b6001600160a01b0381166106f75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101bf565b61070081610703565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b815160609060005b818110156109c1576000610770826001610c76565b90505b828110156109ae578415610891578581815181106107a157634e487b7160e01b600052603260045260246000fd5b6020026020010151602001518683815181106107cd57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151101561088c57600086828151811061080157634e487b7160e01b600052603260045260246000fd5b6020026020010151905086838151811061082b57634e487b7160e01b600052603260045260246000fd5b602002602001015187838151811061085357634e487b7160e01b600052603260045260246000fd5b60200260200101819052508087848151811061087f57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250505b61099c565b8581815181106108b157634e487b7160e01b600052603260045260246000fd5b6020026020010151602001518683815181106108dd57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151111561099c57600086828151811061091157634e487b7160e01b600052603260045260246000fd5b6020026020010151905086838151811061093b57634e487b7160e01b600052603260045260246000fd5b602002602001015187838151811061096357634e487b7160e01b600052603260045260246000fd5b60200260200101819052508087848151811061098f57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250505b806109a681610ca5565b915050610773565b50806109b981610ca5565b91505061075b565b50929392505050565b80356001600160a01b03811681146109e157600080fd5b919050565b803580151581146109e157600080fd5b600060208284031215610a07578081fd5b610a10826109ca565b9392505050565b6000806000806080808688031215610a2d578384fd5b853567ffffffffffffffff811115610a43578485fd5b8601601f81018813610a53578485fd5b80356020610a68610a6383610c52565b610c21565b8083825282820191508285018c848660071b8801011115610a8757898afd5b8995505b84861015610ae45786818e031215610aa157898afd5b610aa9610bf8565b610ab2826109ca565b815281850135858201526040808301359082015260608083013590820152835260019590950194918301918601610a8b565b509850610af490508982016109ca565b96505050505060408501359150610b0d606086016109e6565b905092959194509250565b60006020808385031215610b2a578182fd5b823567ffffffffffffffff811115610b40578283fd5b8301601f81018513610b50578283fd5b8035610b5e610a6382610c52565b80828252848201915084840188868560051b8701011115610b7d578687fd5b8694505b83851015610b9f578035835260019490940193918501918501610b81565b50979650505050505050565b600060208284031215610bbc578081fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6040516080810167ffffffffffffffff81118282101715610c1b57610c1b610cd6565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610c4a57610c4a610cd6565b604052919050565b600067ffffffffffffffff821115610c6c57610c6c610cd6565b5060051b60200190565b60008219821115610c8957610c89610cc0565b500190565b600082821015610ca057610ca0610cc0565b500390565b6000600019821415610cb957610cb9610cc0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122026d36f8ffd689488e1fb2e76db601e41e786a3d1179e991867ab3bfbd3f88b9a64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getCreditLimit(uint256[])": {
        "returns": {
          "_0": "Member credit limit"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getCreditLimit(uint256[])": {
        "notice": "Calculates the member credit limit by vouchs"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3806,
        "contract": "contracts/user/SumOfTrust.sol:SumOfTrust",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 24769,
        "contract": "contracts/user/SumOfTrust.sol:SumOfTrust",
        "label": "effectiveNumber",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}