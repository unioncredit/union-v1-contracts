{
  "language": "Solidity",
  "sources": {
    "contracts/asset/AaveAdapter.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\npragma abicoder v1;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../interfaces/IMoneyMarketAdapter.sol\";\nimport \"../Controller.sol\";\n\nabstract contract AToken is IERC20Upgradeable {\n    function scaledBalanceOf(address user) external view virtual returns (uint256);\n\n    function getScaledUserBalanceAndSupply(address user) external view virtual returns (uint256, uint256);\n\n    function scaledTotalSupply() external view virtual returns (uint256);\n\n    function isTransferAllowed(address user, uint256 amount) external view virtual returns (bool);\n}\n\nabstract contract LendingPool {\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external virtual;\n\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external virtual;\n\n    function getReserveData(address asset)\n        external\n        view\n        virtual\n        returns (\n            uint256,\n            uint128,\n            uint128,\n            uint128,\n            uint128,\n            uint128,\n            uint40,\n            address,\n            address,\n            address,\n            address,\n            uint8\n        );\n}\n\n/**\n * @title AaveAdapter\n *  @dev The implementation of Aave.Finance MoneyMarket that integrates with AssetManager.\n */\ncontract AaveAdapter is Controller, IMoneyMarketAdapter {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint256 private constant UINT256_MAX = type(uint256).max;\n    mapping(address => address) public tokenToAToken;\n    address public assetManager;\n    mapping(address => uint256) public override floorMap;\n    mapping(address => uint256) public override ceilingMap;\n    LendingPool public lendingPool;\n\n    modifier checkTokenSupported(address tokenAddress) {\n        require(_supportsToken(tokenAddress), \"AaveAdapter: Token not supported\");\n        _;\n    }\n\n    modifier onlyAssetManager() {\n        require(msg.sender == assetManager, \"AaveAdapter: only asset manager can call\");\n        _;\n    }\n\n    function __AaveAdapter_init(address _assetManager, LendingPool _lendingPool) public initializer {\n        Controller.__Controller_init(msg.sender);\n        assetManager = _assetManager;\n        lendingPool = _lendingPool;\n    }\n\n    function setAssetManager(address _assetManager) external onlyAdmin {\n        assetManager = _assetManager;\n    }\n\n    function setFloor(address tokenAddress, uint256 floor) external onlyAdmin {\n        floorMap[tokenAddress] = floor;\n    }\n\n    function setCeiling(address tokenAddress, uint256 ceiling) external onlyAdmin {\n        ceilingMap[tokenAddress] = ceiling;\n    }\n\n    function mapTokenToAToken(address tokenAddress) external onlyAdmin {\n        address aTokenAddress;\n        (, , , , , , , aTokenAddress, , , , ) = lendingPool.getReserveData(tokenAddress);\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\n        //AToken aToken = AToken(aTokenAddress);\n        token.safeApprove(address(lendingPool), 0);\n        token.safeApprove(address(lendingPool), UINT256_MAX);\n        tokenToAToken[tokenAddress] = aTokenAddress;\n    }\n\n    function getRate(address tokenAddress) external view override returns (uint256) {\n        uint128 currentLiquidityRate;\n        (, , , currentLiquidityRate, , , , , , , , ) = lendingPool.getReserveData(tokenAddress);\n        return uint256(currentLiquidityRate);\n    }\n\n    function deposit(address tokenAddress) external override checkTokenSupported(tokenAddress) {\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\n        uint256 amount = token.balanceOf(address(this));\n        lendingPool.deposit(tokenAddress, amount, address(this), 0);\n    }\n\n    function withdraw(\n        address tokenAddress,\n        address recipient,\n        uint256 tokenAmount\n    ) external override onlyAssetManager checkTokenSupported(tokenAddress) {\n        lendingPool.withdraw(tokenAddress, tokenAmount, recipient);\n    }\n\n    function withdrawAll(address tokenAddress, address recipient)\n        external\n        override\n        onlyAssetManager\n        checkTokenSupported(tokenAddress)\n    {\n        lendingPool.withdraw(tokenAddress, UINT256_MAX, recipient);\n    }\n\n    function claimTokens(address tokenAddress, address recipient) external override onlyAssetManager {\n        _claimTokens(tokenAddress, recipient);\n    }\n\n    function _getSupply(address tokenAddress) private view returns (uint256) {\n        address aTokenAddress = tokenToAToken[tokenAddress];\n        AToken aToken = AToken(aTokenAddress);\n        uint256 balance = aToken.balanceOf(address(this));\n\n        if (balance <= 10) {\n            return 0;\n        }\n\n        return balance;\n    }\n\n    function getSupply(address tokenAddress) external view override returns (uint256) {\n        return _getSupply(tokenAddress);\n    }\n\n    function getSupplyView(address tokenAddress) external view override returns (uint256) {\n        return _getSupply(tokenAddress);\n    }\n\n    function supportsToken(address tokenAddress) external view override returns (bool) {\n        return _supportsToken(tokenAddress);\n    }\n\n    function _supportsToken(address tokenAddress) internal view returns (bool) {\n        address aTokenAddress = tokenToAToken[tokenAddress];\n\n        return aTokenAddress != address(0);\n    }\n\n    function _claimTokens(address tokenAddress, address recipient) private {\n        require(recipient != address(0), \"AaveAdapter: Recipient can not be zero\");\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\n        uint256 balance = token.balanceOf(address(this));\n        token.safeTransfer(recipient, balance);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IMoneyMarketAdapter.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\n/**\n * @title MoneyMarketAdapter Interface\n *  @dev Working with AssetManager to support external money markets, like Compound etc.\n */\ninterface IMoneyMarketAdapter {\n    /**\n     * @dev Returns the interest rate per block for the given token.\n     */\n    function getRate(address tokenAddress) external view returns (uint256);\n\n    /**\n     * @dev Deposits the given amount of tokens in the underlying money market.\n     */\n    function deposit(address tokenAddress) external;\n\n    /**\n     * @dev Withdraws the given amount of tokens from the underlying money market and transfers them to `recipient`.\n     */\n    function withdraw(\n        address tokenAddress,\n        address recipient,\n        uint256 amount\n    ) external;\n\n    /**\n     * @dev Withdraws all the tokens from the underlying money market and transfers them to `recipient`.\n     */\n    function withdrawAll(address tokenAddress, address recipient) external;\n\n    function claimTokens(address tokenAddress, address recipient) external;\n\n    /**\n     * @dev Returns the supply for the given token, including accrued interest. This function can have side effects.\n     */\n    function getSupply(address tokenAddress) external returns (uint256);\n\n    /**\n     * @dev Returns the supply for the given token; it might not include accrued interest. This function *cannot* have side effects.\n     */\n    function getSupplyView(address tokenAddress) external view returns (uint256);\n\n    /**\n     * @dev Indicates if the adapter supports the token with the given address.\n     */\n    function supportsToken(address tokenAddress) external view returns (bool);\n\n    /**\n     * @dev The minimum amount that should be deposited in money market before moving to next priority market\n     * @param tokenAddress The address of token whose floor is being fetched\n     */\n    function floorMap(address tokenAddress) external view returns (uint256);\n\n    /**\n     * @dev The maximum amount that should be deposited in money market\n     * @param tokenAddress The address of token whose ceiling is being fetched\n     */\n    function ceilingMap(address tokenAddress) external view returns (uint256);\n}\n"
    },
    "contracts/Controller.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\n\n/**\n * @title Controller component\n * @dev For easy access to any core components\n */\nabstract contract Controller is Initializable, UUPSUpgradeable, AccessControlUpgradeable {\n    bytes32 public constant ROLE_ADMIN = keccak256(\"ROLE_ADMIN\");\n\n    mapping(address => address) private _admins;\n    // slither-disable-next-line uninitialized-state\n    bool private _paused;\n    // slither-disable-next-line uninitialized-state\n    address public pauseGuardian;\n\n    /**\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Controller: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Controller: not paused\");\n        _;\n    }\n\n    modifier onlyAdmin() {\n        require(hasRole(ROLE_ADMIN, msg.sender), \"Controller: not admin\");\n        _;\n    }\n\n    modifier onlyGuardian() {\n        require(pauseGuardian == msg.sender, \"Controller: caller does not have the guardian role\");\n        _;\n    }\n\n    //When using minimal deploy, do not call initialize directly during deploy, because msg.sender is the proxyFactory address, and you need to call it manually\n    function __Controller_init(address admin_) public initializer {\n        require(admin_ != address(0), \"Controller: address zero\");\n        _paused = false;\n        _admins[admin_] = admin_;\n        __UUPSUpgradeable_init();\n        _setupRole(ROLE_ADMIN, admin_);\n        pauseGuardian = admin_;\n    }\n\n    function _authorizeUpgrade(address) internal view override onlyAdmin {}\n\n    /**\n     * @dev Check if the address provided is the admin\n     * @param account Account address\n     */\n    function isAdmin(address account) public view returns (bool) {\n        return hasRole(ROLE_ADMIN, account);\n    }\n\n    /**\n     * @dev Add a new admin account\n     * @param account Account address\n     */\n    function addAdmin(address account) public onlyAdmin {\n        require(account != address(0), \"Controller: address zero\");\n        require(_admins[account] == address(0), \"Controller: admin already existed\");\n\n        _admins[account] = account;\n        _setupRole(ROLE_ADMIN, account);\n    }\n\n    /**\n     * @dev Set pauseGuardian account\n     * @param account Account address\n     */\n    function setGuardian(address account) public onlyAdmin {\n        pauseGuardian = account;\n    }\n\n    /**\n     * @dev Renouce the admin from the sender's address\n     */\n    function renounceAdmin() public {\n        renounceRole(ROLE_ADMIN, msg.sender);\n        delete _admins[msg.sender];\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Called by a pauser to pause, triggers stopped state.\n     */\n    function pause() public onlyGuardian whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev Called by a pauser to unpause, returns to normal state.\n     */\n    function unpause() public onlyGuardian whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n\n    uint256[50] private ______gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal initializer {\n        __ERC1967Upgrade_init_unchained();\n        __UUPSUpgradeable_init_unchained();\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal initializer {\n    }\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal initializer {\n        __ERC1967Upgrade_init_unchained();\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal initializer {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            _functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/user/UserManager.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport \"../Controller.sol\";\nimport \"../interfaces/IAssetManager.sol\";\nimport \"../interfaces/ICreditLimitModel.sol\";\nimport \"../interfaces/IUserManager.sol\";\nimport \"../interfaces/IComptroller.sol\";\nimport \"../interfaces/IUnionToken.sol\";\nimport \"../interfaces/IDai.sol\";\nimport \"../interfaces/IUToken.sol\";\n\n/**\n * @title UserManager Contract\n * @dev Manages the Union members credit lines, and their vouchees and borrowers info.\n */\ncontract UserManager is Controller, IUserManager, ReentrancyGuardUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    struct Member {\n        bool isMember;\n        CreditLine creditLine;\n    }\n\n    //address: member address, uint256: trustAmount\n    struct CreditLine {\n        mapping(address => uint256) borrowers;\n        address[] borrowerAddresses;\n        mapping(address => uint256) stakers;\n        address[] stakerAddresses;\n        mapping(address => uint256) lockedAmount;\n    }\n\n    struct TrustInfo {\n        address[] stakerAddresses;\n        address[] borrowerAddresses;\n        uint256 effectiveCount;\n        address staker;\n        uint256 vouchingAmount;\n        uint256 stakingAmount;\n        uint256 availableStakingAmount;\n        uint256 lockedStake;\n        uint256 totalLockedStake;\n    }\n\n    uint256 public constant MAX_TRUST_LIMIT = 100;\n    uint256 public constant MAX_STAKE_AMOUNT = 1000e18;\n    address public stakingToken;\n    address public unionToken;\n    address public assetManager;\n    IUToken public uToken;\n    ICreditLimitModel public creditLimitModel;\n    IComptroller public comptroller;\n    uint256 public newMemberFee; // New member application fee\n\n    // slither-disable-next-line constable-states\n    uint256 public override totalStaked;\n    // slither-disable-next-line constable-states\n    uint256 public override totalFrozen;\n    mapping(address => Member) private members;\n    // slither-disable-next-line uninitialized-state\n    mapping(address => uint256) public stakers; //1 user address 2 amount\n    mapping(address => uint256) public memberFrozen; //1 user address 2 frozen amount\n\n    modifier onlyMember(address account) {\n        require(checkIsMember(account), \"UserManager: caller does not have the Member role\");\n        _;\n    }\n\n    modifier onlyMarketOrAdmin() {\n        require(\n            address(uToken) == msg.sender || isAdmin(msg.sender),\n            \"UserManager: caller does not the market or admin\"\n        );\n        _;\n    }\n\n    /**\n     *  @dev Update new credit limit model event\n     *  @param newCreditLimitModel New credit limit model address\n     */\n    event LogNewCreditLimitModel(address newCreditLimitModel);\n\n    /**\n     *  @dev Add new member event\n     *  @param member New member address\n     */\n    event LogAddMember(address member);\n\n    /**\n     *  @dev Update vouch for existing member event\n     *  @param staker Trustee address\n     *  @param borrower The address gets vouched for\n     *  @param trustAmount Vouch amount\n     */\n    event LogUpdateTrust(address indexed staker, address indexed borrower, uint256 trustAmount);\n\n    /**\n     *  @dev New member application event\n     *  @param account New member's voucher address\n     *  @param borrower New member address\n     */\n    event LogRegisterMember(address indexed account, address indexed borrower);\n\n    /**\n     *  @dev Cancel vouching for other member event\n     *  @param account New member's voucher address\n     *  @param borrower The address gets vouched for\n     */\n    event LogCancelVouch(address indexed account, address indexed borrower);\n\n    /**\n     *  @dev Stake event\n     *  @param account The staker's address\n     *  @param amount The amount of tokens to stake\n     */\n    event LogStake(address indexed account, uint256 amount);\n\n    /**\n     *  @dev Unstake event\n     *  @param account The staker's address\n     *  @param amount The amount of tokens to unstake\n     */\n    event LogUnstake(address indexed account, uint256 amount);\n\n    /**\n     *  @dev DebtWriteOff event\n     *  @param staker The staker's address\n     *  @param borrower The borrower's address\n     *  @param amount The amount of write off\n     */\n    event LogDebtWriteOff(address indexed staker, address indexed borrower, uint256 amount);\n\n    function __UserManager_init(\n        address assetManager_,\n        address unionToken_,\n        address stakingToken_,\n        address creditLimitModel_,\n        address comptroller_,\n        address admin_\n    ) public initializer {\n        Controller.__Controller_init(admin_);\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\n        _setCreditLimitModel(creditLimitModel_);\n        comptroller = IComptroller(comptroller_);\n        assetManager = assetManager_;\n        unionToken = unionToken_;\n        stakingToken = stakingToken_;\n        newMemberFee = 10**18; // Set the default membership fee\n    }\n\n    function setUToken(address uToken_) public onlyAdmin {\n        uToken = IUToken(uToken_);\n    }\n\n    function setNewMemberFee(uint256 amount) public onlyAdmin {\n        newMemberFee = amount;\n    }\n\n    /**\n     *  @dev Change the credit limit model\n     *  Accept claims only from the admin\n     *  @param newCreditLimitModel New credit limit model address\n     */\n    function setCreditLimitModel(address newCreditLimitModel) public override onlyAdmin {\n        _setCreditLimitModel(newCreditLimitModel);\n    }\n\n    function _setCreditLimitModel(address newCreditLimitModel) private {\n        require(\n            ICreditLimitModel(newCreditLimitModel).isCreditLimitModel(),\n            \"MemberMnager: new model is not a creditLimitModel\"\n        );\n        creditLimitModel = ICreditLimitModel(newCreditLimitModel);\n\n        emit LogNewCreditLimitModel(newCreditLimitModel);\n    }\n\n    /**\n     *  @dev Check if the account is a valid member\n     *  @param account Member address\n     *  @return Address whether is member\n     */\n    function checkIsMember(address account) public view override returns (bool) {\n        return members[account].isMember;\n    }\n\n    /**\n     *  @dev Get member borrowerAddresses\n     *  @param account Member address\n     *  @return Address array\n     */\n    function getBorrowerAddresses(address account) public view override returns (address[] memory) {\n        return members[account].creditLine.borrowerAddresses;\n    }\n\n    /**\n     *  @dev Get member stakerAddresses\n     *  @param account Member address\n     *  @return Address array\n     */\n    function getStakerAddresses(address account) public view override returns (address[] memory) {\n        return members[account].creditLine.stakerAddresses;\n    }\n\n    /**\n     *  @dev Get member backer asset\n     *  @param account Member address\n     *  @param borrower Borrower address\n     *  @return trustAmount vouchingAmount lockedStake. Trust amount, vouch amount, and locked stake amount\n     */\n    function getBorrowerAsset(address account, address borrower)\n        public\n        view\n        override\n        returns (\n            uint256 trustAmount,\n            uint256 vouchingAmount,\n            uint256 lockedStake\n        )\n    {\n        trustAmount = members[account].creditLine.borrowers[borrower];\n        lockedStake = getLockedStake(account, borrower);\n        vouchingAmount = getVouchingAmount(account, borrower);\n    }\n\n    /**\n     *  @dev Get member stakers asset\n     *  @param account Member address\n     *  @param staker Staker address\n     *  @return trustAmount lockedStake vouchingAmount. Vouch amount and lockedStake\n     */\n    function getStakerAsset(address account, address staker)\n        public\n        view\n        override\n        returns (\n            uint256 trustAmount,\n            uint256 vouchingAmount,\n            uint256 lockedStake\n        )\n    {\n        trustAmount = members[account].creditLine.stakers[staker];\n        lockedStake = getLockedStake(staker, account);\n        vouchingAmount = getVouchingAmount(staker, account);\n    }\n\n    /**\n     *  @dev Get staker locked stake for a borrower\n     *  @param staker Staker address\n     *  @param borrower Borrower address\n     *  @return LockedStake\n     */\n    function getLockedStake(address staker, address borrower) public view returns (uint256) {\n        return members[staker].creditLine.lockedAmount[borrower];\n    }\n\n    /**\n     *  @dev Get the user's locked stake from all his backed loans\n     *  @param staker Staker address\n     *  @return LockedStake\n     */\n    function getTotalLockedStake(address staker) public view override returns (uint256) {\n        uint256 totalLockedStake = 0;\n        uint256 stakingAmount = stakers[staker];\n        address[] memory borrowerAddresses = members[staker].creditLine.borrowerAddresses;\n        address borrower;\n        for (uint256 i = 0; i < borrowerAddresses.length; i++) {\n            borrower = borrowerAddresses[i];\n            totalLockedStake += getLockedStake(staker, borrower);\n        }\n\n        if (stakingAmount >= totalLockedStake) {\n            return totalLockedStake;\n        } else {\n            return stakingAmount;\n        }\n    }\n\n    /**\n     *  @dev Get staker's defaulted / frozen staked token amount\n     *  @param staker Staker address\n     *  @return Frozen token amount\n     */\n    function getTotalFrozenAmount(address staker) public view override returns (uint256) {\n        TrustInfo memory trustInfo;\n        uint256 totalFrozenAmount = 0;\n        trustInfo.borrowerAddresses = members[staker].creditLine.borrowerAddresses;\n        trustInfo.stakingAmount = stakers[staker];\n\n        address borrower;\n        for (uint256 i = 0; i < trustInfo.borrowerAddresses.length; i++) {\n            borrower = trustInfo.borrowerAddresses[i];\n            if (uToken.checkIsOverdue(borrower)) {\n                totalFrozenAmount += getLockedStake(staker, borrower);\n            }\n        }\n\n        if (trustInfo.stakingAmount >= totalFrozenAmount) {\n            return totalFrozenAmount;\n        } else {\n            return trustInfo.stakingAmount;\n        }\n    }\n\n    /**\n     *  @dev Get the member's available credit line\n     *  @param borrower Member address\n     *  @return Credit line amount\n     */\n    function getCreditLimit(address borrower) public view override returns (int256) {\n        TrustInfo memory trustInfo;\n        trustInfo.stakerAddresses = members[borrower].creditLine.stakerAddresses;\n        // Get the number of effective vouchee, first\n        trustInfo.effectiveCount = 0;\n        uint256[] memory limits = new uint256[](trustInfo.stakerAddresses.length);\n\n        for (uint256 i = 0; i < trustInfo.stakerAddresses.length; i++) {\n            trustInfo.staker = trustInfo.stakerAddresses[i];\n\n            trustInfo.stakingAmount = stakers[trustInfo.staker];\n\n            trustInfo.vouchingAmount = getVouchingAmount(trustInfo.staker, borrower);\n\n            //A vouchingAmount value of 0 means that the amount of stake is 0 or trust is 0. In this case, this data is not used to calculate the credit limit\n            if (trustInfo.vouchingAmount > 0) {\n                //availableStakingAmount is staker‘s free stake amount\n                trustInfo.borrowerAddresses = getBorrowerAddresses(trustInfo.staker);\n\n                trustInfo.availableStakingAmount = trustInfo.stakingAmount;\n                uint256 totalLockedStake = getTotalLockedStake(trustInfo.staker);\n                if (trustInfo.stakingAmount <= totalLockedStake) {\n                    trustInfo.availableStakingAmount = 0;\n                } else {\n                    trustInfo.availableStakingAmount = trustInfo.stakingAmount - totalLockedStake;\n                }\n\n                trustInfo.lockedStake = getLockedStake(trustInfo.staker, borrower);\n\n                require(\n                    trustInfo.vouchingAmount >= trustInfo.lockedStake,\n                    \"UserManager: vouchingAmount or lockedStake data error\"\n                );\n\n                //The actual effective guarantee amount cannot exceed availableStakingAmount,\n                if (trustInfo.vouchingAmount >= trustInfo.availableStakingAmount + trustInfo.lockedStake) {\n                    limits[trustInfo.effectiveCount] = trustInfo.availableStakingAmount;\n                } else {\n                    if (trustInfo.vouchingAmount <= trustInfo.lockedStake) {\n                        limits[trustInfo.effectiveCount] = 0;\n                    } else {\n                        limits[trustInfo.effectiveCount] = trustInfo.vouchingAmount - trustInfo.lockedStake;\n                    }\n                }\n                trustInfo.effectiveCount += 1;\n            }\n        }\n\n        uint256[] memory creditlimits = new uint256[](trustInfo.effectiveCount);\n        for (uint256 j = 0; j < trustInfo.effectiveCount; j++) {\n            creditlimits[j] = limits[j];\n        }\n\n        return int256(creditLimitModel.getCreditLimit(creditlimits)) - int256(uToken.calculatingInterest(borrower));\n    }\n\n    /**\n     *  @dev Get vouching amount\n     *  @param staker Staker address\n     *  @param borrower Borrower address\n     */\n    function getVouchingAmount(address staker, address borrower) public view returns (uint256) {\n        uint256 totalStake = stakers[staker];\n        uint256 trustAmount = members[borrower].creditLine.stakers[staker];\n        if (trustAmount > totalStake) {\n            return totalStake;\n        } else {\n            return trustAmount;\n        }\n    }\n\n    /**\n     *  @dev Get the user's deposited stake amount\n     *  @param account Member address\n     *  @return Deposited stake amount\n     */\n    function getStakerBalance(address account) public view override returns (uint256) {\n        return stakers[account];\n    }\n\n    /**\n     *  @dev Add member\n     *  Accept claims only from the admin\n     *  @param account Member address\n     */\n    function addMember(address account) public override onlyAdmin {\n        require(!checkIsMember(account), \"UserManager: address is already member\");\n        members[account].isMember = true;\n        emit LogAddMember(account);\n    }\n\n    /**\n     *  @dev Update the trust amount for exisitng members.\n     *  @param borrower_ Account address\n     *  @param trustAmount Trust amount\n     */\n    function updateTrust(address borrower_, uint256 trustAmount)\n        external\n        override\n        onlyMember(msg.sender)\n        whenNotPaused\n    {\n        require(borrower_ != address(0), \"borrower cannot be zero\");\n        address borrower = borrower_;\n\n        TrustInfo memory trustInfo;\n        trustInfo.staker = msg.sender;\n        require(trustInfo.staker != borrower, \"UserManager: Can't vouch for self\");\n        require(\n            members[borrower].creditLine.stakerAddresses.length < MAX_TRUST_LIMIT &&\n                members[trustInfo.staker].creditLine.borrowerAddresses.length < MAX_TRUST_LIMIT,\n            \"UserManager: trust reach limit\"\n        );\n        trustInfo.borrowerAddresses = members[trustInfo.staker].creditLine.borrowerAddresses;\n        trustInfo.stakerAddresses = members[borrower].creditLine.stakerAddresses;\n        trustInfo.lockedStake = getLockedStake(trustInfo.staker, borrower);\n        require(\n            trustAmount >= trustInfo.lockedStake,\n            \"UserManager: trust amount cannot be less than the locked amount \"\n        );\n        uint256 borrowerCount = members[trustInfo.staker].creditLine.borrowerAddresses.length;\n        bool borrowerExist = false;\n        for (uint256 i = 0; i < borrowerCount; i++) {\n            if (trustInfo.borrowerAddresses[i] == borrower) {\n                borrowerExist = true;\n            }\n        }\n\n        uint256 stakerCount = members[borrower].creditLine.stakerAddresses.length;\n        bool stakerExist = false;\n        for (uint256 i = 0; i < stakerCount; i++) {\n            if (trustInfo.stakerAddresses[i] == trustInfo.staker) {\n                stakerExist = true;\n            }\n        }\n\n        if (!borrowerExist) {\n            members[trustInfo.staker].creditLine.borrowerAddresses.push(borrower);\n        }\n\n        if (!stakerExist) {\n            members[borrower].creditLine.stakerAddresses.push(trustInfo.staker);\n        }\n\n        members[trustInfo.staker].creditLine.borrowers[borrower] = trustAmount;\n        members[borrower].creditLine.stakers[trustInfo.staker] = trustAmount;\n        emit LogUpdateTrust(trustInfo.staker, borrower, trustAmount);\n    }\n\n    /**\n     *  @dev Stop vouch for other member.\n     *  @param staker Staker address\n     *  @param borrower borrower address\n     */\n    function cancelVouch(address staker, address borrower) external override onlyMember(msg.sender) whenNotPaused {\n        require(\n            msg.sender == staker || msg.sender == borrower,\n            \"UserManager: Accept claims only from the staker or borrower\"\n        );\n\n        require(getLockedStake(staker, borrower) == 0, \"UserManager: LockedStake is not zero\");\n\n        uint256 stakerCount = members[borrower].creditLine.stakerAddresses.length;\n        bool stakerExist = false;\n        uint256 stakerIndex = 0;\n        for (uint256 i = 0; i < stakerCount; i++) {\n            if (members[borrower].creditLine.stakerAddresses[i] == staker) {\n                stakerExist = true;\n                stakerIndex = i;\n            }\n        }\n\n        uint256 borrowerCount = members[staker].creditLine.borrowerAddresses.length;\n        bool borrowerExist = false;\n        uint256 borrowerIndex = 0;\n        for (uint256 i = 0; i < borrowerCount; i++) {\n            if (members[staker].creditLine.borrowerAddresses[i] == borrower) {\n                borrowerExist = true;\n                borrowerIndex = i;\n            }\n        }\n\n        //delete address\n        if (borrowerExist) {\n            members[staker].creditLine.borrowerAddresses[borrowerIndex] = members[staker].creditLine.borrowerAddresses[\n                borrowerCount - 1\n            ];\n            members[staker].creditLine.borrowerAddresses.pop();\n        }\n\n        if (stakerExist) {\n            members[borrower].creditLine.stakerAddresses[stakerIndex] = members[borrower].creditLine.stakerAddresses[\n                stakerCount - 1\n            ];\n            members[borrower].creditLine.stakerAddresses.pop();\n        }\n\n        delete members[staker].creditLine.borrowers[borrower];\n        delete members[borrower].creditLine.stakers[staker];\n\n        emit LogCancelVouch(staker, borrower);\n    }\n\n    function registerMemberWithPermit(\n        address newMember,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public whenNotPaused {\n        IUnionToken unionTokenContract = IUnionToken(unionToken);\n        unionTokenContract.permit(msg.sender, address(this), value, deadline, v, r, s);\n        registerMember(newMember);\n    }\n\n    /**\n     *  @dev Apply for membership, and burn UnionToken as application fees\n     *  @param newMember New member address\n     */\n    function registerMember(address newMember) public override whenNotPaused {\n        IUnionToken unionTokenContract = IUnionToken(unionToken);\n        require(!checkIsMember(newMember), \"UserManager: address is already member\");\n        require(unionTokenContract.balanceOf(msg.sender) >= newMemberFee, \"UserManager: balance not enough\");\n\n        uint256 effectiveStakerNumber = 0;\n        for (uint256 i = 0; i < members[newMember].creditLine.stakerAddresses.length; i++) {\n            address stakerAddress = members[newMember].creditLine.stakerAddresses[i];\n            if (checkIsMember(stakerAddress) && getVouchingAmount(stakerAddress, newMember) > 0)\n                effectiveStakerNumber += 1;\n        }\n\n        require(\n            effectiveStakerNumber >= creditLimitModel.effectiveNumber(),\n            \"UserManager: not enough effective stakers\"\n        );\n\n        members[newMember].isMember = true;\n\n        unionTokenContract.burnFrom(msg.sender, newMemberFee);\n\n        emit LogRegisterMember(msg.sender, newMember);\n    }\n\n    function updateLockedData(\n        address borrower,\n        uint256 amount,\n        bool isBorrow\n    ) external override onlyMarketOrAdmin {\n        TrustInfo memory trustInfo;\n        trustInfo.stakerAddresses = members[borrower].creditLine.stakerAddresses;\n\n        ICreditLimitModel.LockedInfo[] memory lockedInfoList = new ICreditLimitModel.LockedInfo[](\n            trustInfo.stakerAddresses.length\n        );\n\n        for (uint256 i = 0; i < trustInfo.stakerAddresses.length; i++) {\n            ICreditLimitModel.LockedInfo memory lockedInfo;\n\n            trustInfo.staker = trustInfo.stakerAddresses[i];\n            trustInfo.stakingAmount = stakers[trustInfo.staker];\n            trustInfo.vouchingAmount = getVouchingAmount(trustInfo.staker, borrower);\n\n            trustInfo.totalLockedStake = getTotalLockedStake(trustInfo.staker);\n            if (trustInfo.stakingAmount <= trustInfo.totalLockedStake) {\n                trustInfo.availableStakingAmount = 0;\n            } else {\n                trustInfo.availableStakingAmount = trustInfo.stakingAmount - trustInfo.totalLockedStake;\n            }\n\n            lockedInfo.staker = trustInfo.staker;\n            lockedInfo.vouchingAmount = trustInfo.vouchingAmount;\n            lockedInfo.lockedAmount = getLockedStake(trustInfo.staker, borrower);\n            lockedInfo.availableStakingAmount = trustInfo.availableStakingAmount;\n\n            lockedInfoList[i] = lockedInfo;\n        }\n\n        for (uint256 i = 0; i < lockedInfoList.length; i++) {\n            members[lockedInfoList[i].staker].creditLine.lockedAmount[borrower] = creditLimitModel.getLockedAmount(\n                lockedInfoList,\n                lockedInfoList[i].staker,\n                amount,\n                isBorrow\n            );\n        }\n    }\n\n    /**\n     *  @dev Stake\n     *  @param amount Amount\n     */\n    function stake(uint256 amount) public override whenNotPaused nonReentrant {\n        IERC20Upgradeable erc20Token = IERC20Upgradeable(stakingToken);\n\n        comptroller.withdrawRewards(msg.sender, stakingToken);\n\n        uint256 balance = stakers[msg.sender];\n\n        require(balance + amount <= MAX_STAKE_AMOUNT, \"UserManager: Stake limit hit\");\n\n        stakers[msg.sender] = balance + amount;\n        totalStaked += amount;\n\n        require(\n            erc20Token.allowance(msg.sender, address(this)) >= amount,\n            \"UserManager: not enough allowance to stake\"\n        );\n        erc20Token.safeTransferFrom(msg.sender, address(this), amount);\n        erc20Token.safeApprove(assetManager, 0);\n        erc20Token.safeApprove(assetManager, amount);\n\n        require(IAssetManager(assetManager).deposit(stakingToken, amount), \"UserManager: Deposit failed\");\n\n        emit LogStake(msg.sender, amount);\n    }\n\n    /**\n     *  @dev stakeWithPermit\n     *  @param amount Amount\n     */\n    function stakeWithPermit(\n        uint256 amount,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public whenNotPaused {\n        IDai erc20Token = IDai(stakingToken);\n        erc20Token.permit(msg.sender, address(this), nonce, expiry, true, v, r, s);\n\n        stake(amount);\n    }\n\n    /**\n     *  @dev Unstake\n     *  @param amount Amount\n     */\n    function unstake(uint256 amount) external override whenNotPaused nonReentrant {\n        IERC20Upgradeable erc20Token = IERC20Upgradeable(stakingToken);\n        uint256 stakingAmount = stakers[msg.sender];\n        require(\n            stakingAmount - getTotalLockedStake(msg.sender) >= amount,\n            \"UserManager: unstake balance is insufficient\"\n        );\n\n        comptroller.withdrawRewards(msg.sender, stakingToken);\n\n        stakers[msg.sender] = stakingAmount - amount;\n        totalStaked -= amount;\n\n        require(\n            IAssetManager(assetManager).withdraw(stakingToken, address(this), amount),\n            \"UserManager: withdraw failed\"\n        );\n\n        erc20Token.safeTransfer(msg.sender, amount);\n\n        emit LogUnstake(msg.sender, amount);\n    }\n\n    function withdrawRewards() external whenNotPaused nonReentrant {\n        uint256 rewards = comptroller.withdrawRewards(msg.sender, stakingToken);\n        require(rewards > 0, \"UserManager: not enough rewards\");\n    }\n\n    /**\n     *  @dev Repay user's loan overdue, called only from the lending market\n     *  @param account User address\n     *  @param token The asset token repaying to\n     *  @param lastRepay Last repay block number\n     */\n    function repayLoanOverdue(\n        address account,\n        address token,\n        uint256 lastRepay\n    ) external override whenNotPaused onlyMarketOrAdmin {\n        address[] memory stakerAddresses = getStakerAddresses(account);\n        for (uint256 i = 0; i < stakerAddresses.length; i++) {\n            address staker = stakerAddresses[i];\n            (, , uint256 lockedStake) = getStakerAsset(account, staker);\n\n            comptroller.addFrozenCoinAge(staker, token, lockedStake, lastRepay);\n        }\n    }\n\n    //Only supports sumOfTrust\n    function debtWriteOff(address borrower, uint256 amount) public {\n        require(amount > 0, \"UserManager: amount can not be zero\");\n        require(totalStaked >= amount, \"UserManager: amount exceeds the totalStaked\");\n        require(uToken.checkIsOverdue(borrower), \"UserManager: only call when borrower is overdue\");\n        uint256 lockedAmount = getLockedStake(msg.sender, borrower);\n        require(lockedAmount >= amount, \"UserManager: amount exceeds the locked amount\");\n\n        _updateTotalFrozen(borrower, true);\n        require(totalFrozen >= amount, \"UserManager: amount exceeds the totalFrozen\");\n        comptroller.withdrawRewards(msg.sender, stakingToken);\n\n        //The borrower is still overdue, do not call comptroller.addFrozenCoinAge\n\n        stakers[msg.sender] -= amount;\n        totalStaked -= amount;\n        totalFrozen -= amount;\n        if (memberFrozen[borrower] >= amount) {\n            memberFrozen[borrower] -= amount;\n        } else {\n            memberFrozen[borrower] = 0;\n        }\n        members[msg.sender].creditLine.lockedAmount[borrower] = lockedAmount - amount;\n        uint256 trustAmount = members[msg.sender].creditLine.borrowers[borrower];\n        uint256 newTrustAmount = trustAmount - amount;\n        members[msg.sender].creditLine.borrowers[borrower] = newTrustAmount;\n        members[borrower].creditLine.stakers[msg.sender] = newTrustAmount;\n        IAssetManager(assetManager).debtWriteOff(stakingToken, amount);\n        uToken.debtWriteOff(borrower, amount);\n        emit LogDebtWriteOff(msg.sender, borrower, amount);\n    }\n\n    /**\n     *  @dev Update total frozen\n     *  @param account borrower address\n     *  @param isOverdue account is overdue\n     */\n    function updateTotalFrozen(address account, bool isOverdue) external override onlyMarketOrAdmin whenNotPaused {\n        _updateTotalFrozen(account, isOverdue);\n    }\n\n    function _updateTotalFrozen(address account, bool isOverdue) private {\n        require(totalStaked >= totalFrozen, \"UserManager: total stake amount error\");\n        uint256 effectiveTotalStaked = totalStaked - totalFrozen;\n\n        comptroller.updateTotalStaked(stakingToken, effectiveTotalStaked);\n\n        if (isOverdue) {\n            //isOverdue = true, user overdue needs to increase totalFrozen\n\n            //The sum of the locked amount of all stakers on this borrower, which is the frozen amount that needs to be updated\n            uint256 amount;\n            for (uint256 i = 0; i < members[account].creditLine.stakerAddresses.length; i++) {\n                address staker = members[account].creditLine.stakerAddresses[i];\n                uint256 lockedStake = getLockedStake(staker, account);\n                amount += lockedStake;\n            }\n\n            if (memberFrozen[account] == 0) {\n                //I haven’t updated the frozen amount about this borrower before, just increase the amount directly\n                totalFrozen += amount;\n            } else {\n                //I have updated the frozen amount of this borrower before. After increasing the amount, subtract the previously increased value to avoid repeated additions.\n                totalFrozen = totalFrozen + amount - memberFrozen[account];\n            }\n            //Record the increased value of this borrower this time\n            memberFrozen[account] = amount;\n        } else {\n            //isOverdue = false, the user loan needs to reduce the number of frozen last time to return to normal\n            if (totalFrozen > memberFrozen[account]) {\n                //Minus the frozen amount added last time\n                totalFrozen -= memberFrozen[account];\n            } else {\n                totalFrozen = 0;\n            }\n            memberFrozen[account] = 0;\n        }\n    }\n\n    function getFrozenCoinAge(address staker, uint256 pastBlocks) public view override returns (uint256) {\n        uint256 totalFrozenCoinAge = 0;\n\n        address[] memory borrowerAddresses = getBorrowerAddresses(staker);\n\n        for (uint256 i = 0; i < borrowerAddresses.length; i++) {\n            address borrower = borrowerAddresses[i];\n            uint256 blocks = block.number - uToken.getLastRepay(borrower);\n            if (uToken.checkIsOverdue(borrower)) {\n                (, , uint256 lockedStake) = getStakerAsset(borrower, staker);\n\n                if (pastBlocks >= blocks) {\n                    totalFrozenCoinAge = totalFrozenCoinAge + (lockedStake * blocks);\n                } else {\n                    totalFrozenCoinAge = totalFrozenCoinAge + (lockedStake * pastBlocks);\n                }\n            }\n        }\n\n        return totalFrozenCoinAge;\n    }\n\n    function _getFrozenCoinAge(address staker, uint256 pastBlocks) private view returns (uint256) {\n        uint256 totalFrozenCoinAge = 0;\n\n        address[] memory borrowerAddresses = getBorrowerAddresses(staker);\n\n        for (uint256 i = 0; i < borrowerAddresses.length; i++) {\n            address borrower = borrowerAddresses[i];\n            uint256 blocks = block.number - uToken.getLastRepay(borrower);\n            if (uToken.checkIsOverdue(borrower)) {\n                (, , uint256 lockedStake) = getStakerAsset(borrower, staker);\n\n                if (pastBlocks >= blocks) {\n                    totalFrozenCoinAge += lockedStake * blocks;\n                } else {\n                    totalFrozenCoinAge += lockedStake * pastBlocks;\n                }\n            }\n        }\n\n        return totalFrozenCoinAge;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/interfaces/IAssetManager.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\n/**\n *  @title AssetManager Interface\n *  @dev Manage the token balances staked by the users and deposited by admins, and invest tokens to the integrated underlying lending protocols.\n */\ninterface IAssetManager {\n    /**\n     *  @dev Returns the balance of asset manager, plus the total amount of tokens deposited to all the underlying lending protocols.\n     *  @param tokenAddress ERC20 token address\n     *  @return Lending pool balance\n     */\n    function getPoolBalance(address tokenAddress) external view returns (uint256);\n\n    /**\n     *  @dev Returns the amount of the lending pool balance minus the amount of total staked.\n     *  @param tokenAddress ERC20 token address\n     *  @return Amount can be borrowed\n     */\n    function getLoanableAmount(address tokenAddress) external view returns (uint256);\n\n    /**\n     *  @dev Get the total amount of tokens deposited to all the integrated underlying protocols without side effects.\n     *  @param tokenAddress ERC20 token address\n     *  @return Total market balance\n     */\n    function totalSupply(address tokenAddress) external returns (uint256);\n\n    /**\n     *  @dev Get the total amount of tokens deposited to all the integrated underlying protocols, but without side effects. Safe to call anytime, but may not get the most updated number for the current block. Call totalSupply() for that purpose.\n     *  @param tokenAddress ERC20 token address\n     *  @return Total market balance\n     */\n    function totalSupplyView(address tokenAddress) external view returns (uint256);\n\n    /**\n     *  @dev Check if there is an underlying protocol available for the given ERC20 token.\n     *  @param tokenAddress ERC20 token address\n     *  @return Whether is supported\n     */\n    function isMarketSupported(address tokenAddress) external view returns (bool);\n\n    /**\n     *  @dev Deposit tokens to AssetManager, and those tokens will be passed along to adapters to deposit to integrated asset protocols if any is available.\n     *  @param token ERC20 token address\n     *  @param amount Deposit amount, in wei\n     *  @return Deposited amount\n     */\n    function deposit(address token, uint256 amount) external returns (bool);\n\n    /**\n     *  @dev Withdraw from AssetManager\n     *  @param token ERC20 token address\n     *  @param account User address\n     *  @param amount Withdraw amount, in wei\n     *  @return Withdraw amount\n     */\n    function withdraw(\n        address token,\n        address account,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     *  @dev Add a new ERC20 token to support in AssetManager\n     *  @param tokenAddress ERC20 token address\n     */\n    function addToken(address tokenAddress) external;\n\n    /**\n     *  @dev Add a new adapter for the underlying lending protocol\n     *  @param adapterAddress adapter address\n     */\n    function addAdapter(address adapterAddress) external;\n\n    /**\n     *  @dev For a give token set allowance for all integrated money markets\n     *  @param tokenAddress ERC20 token address\n     */\n    function approveAllMarketsMax(address tokenAddress) external;\n\n    /**\n     *  @dev For a give moeny market set allowance for all underlying tokens\n     *  @param adapterAddress Address of adaptor for money market\n     */\n    function approveAllTokensMax(address adapterAddress) external;\n\n    /**\n     *  @dev Set withdraw sequence\n     *  @param newSeq priority sequence of money market indices to be used while withdrawing\n     */\n    function changeWithdrawSequence(uint256[] calldata newSeq) external;\n\n    /**\n     *  @dev Rebalance the tokens between integrated lending protocols\n     *  @param tokenAddress ERC20 token address\n     *  @param percentages Proportion\n     */\n    function rebalance(address tokenAddress, uint256[] calldata percentages) external;\n\n    /**\n     *  @dev Claim the tokens left on AssetManager balance, in case there are tokens get stuck here.\n     *  @param tokenAddress ERC20 token address\n     *  @param recipient Recipient address\n     */\n    function claimTokens(address tokenAddress, address recipient) external;\n\n    /**\n     *  @dev Claim the tokens stuck in the integrated adapters\n     *  @param index MoneyMarkets array index\n     *  @param tokenAddress ERC20 token address\n     *  @param recipient Recipient address\n     */\n    function claimTokensFromAdapter(\n        uint256 index,\n        address tokenAddress,\n        address recipient\n    ) external;\n\n    /**\n     *  @dev Get the number of supported underlying protocols.\n     *  @return MoneyMarkets length\n     */\n    function moneyMarketsCount() external view returns (uint256);\n\n    /**\n     *  @dev Get the count of supported tokens\n     *  @return Number of supported tokens\n     */\n    function supportedTokensCount() external view returns (uint256);\n\n    /**\n     *  @dev Get the supported lending protocol\n     *  @param tokenAddress ERC20 token address\n     *  @param marketId MoneyMarkets array index\n     *  @return tokenSupply\n     */\n    function getMoneyMarket(address tokenAddress, uint256 marketId) external view returns (uint256, uint256);\n\n    /**\n     *  @dev debt write off\n     *  @param tokenAddress ERC20 token address\n     *  @param amount WriteOff amount\n     */\n    function debtWriteOff(address tokenAddress, uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/ICreditLimitModel.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\n/**\n * @title CreditLimitModel Interface\n *  @dev Calculate the user's credit line based on the trust he receives from the vouchees.\n */\ninterface ICreditLimitModel {\n    struct LockedInfo {\n        address staker;\n        uint256 vouchingAmount;\n        uint256 lockedAmount;\n        uint256 availableStakingAmount;\n    }\n\n    function isCreditLimitModel() external pure returns (bool);\n\n    function effectiveNumber() external returns (uint256);\n\n    /**\n     * @notice Calculates the staker locked amount\n     * @return Member credit limit\n     */\n    function getLockedAmount(\n        LockedInfo[] calldata vouchAmountList,\n        address staker,\n        uint256 amount,\n        bool isIncrease\n    ) external pure returns (uint256);\n\n    /**\n     * @notice Calculates the member credit limit by vouchs\n     * @return Member credit limit\n     */\n    function getCreditLimit(uint256[] calldata vouchs) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IUserManager.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\n/**\n * @title UserManager Interface\n * @dev Manages the Union members credit lines, and their vouchees and borrowers info.\n */\ninterface IUserManager {\n    /**\n     *  @dev Check if the account is a valid member\n     *  @param account Member address\n     *  @return Address whether is member\n     */\n    function checkIsMember(address account) external view returns (bool);\n\n    /**\n     *  @dev Get member borrowerAddresses\n     *  @param account Member address\n     *  @return Address array\n     */\n    function getBorrowerAddresses(address account) external view returns (address[] memory);\n\n    /**\n     *  @dev Get member stakerAddresses\n     *  @param account Member address\n     *  @return Address array\n     */\n    function getStakerAddresses(address account) external view returns (address[] memory);\n\n    /**\n     *  @dev Get member backer asset\n     *  @param account Member address\n     *  @param borrower Borrower address\n     *  @return Trust amount, vouch amount, and locked stake amount\n     */\n    function getBorrowerAsset(address account, address borrower)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    /**\n     *  @dev Get member stakers asset\n     *  @param account Member address\n     *  @param staker Staker address\n     *  @return Vouch amount and lockedStake\n     */\n    function getStakerAsset(address account, address staker)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    /**\n     *  @dev Get the member's available credit line\n     *  @param account Member address\n     *  @return Limit\n     */\n    function getCreditLimit(address account) external view returns (int256);\n\n    function totalStaked() external view returns (uint256);\n\n    function totalFrozen() external view returns (uint256);\n\n    function getFrozenCoinAge(address staker, uint256 pastBlocks) external view returns (uint256);\n\n    /**\n     *  @dev Add a new member\n     *  Accept claims only from the admin\n     *  @param account Member address\n     */\n    function addMember(address account) external;\n\n    /**\n     *  @dev Update the trust amount for exisitng members.\n     *  @param borrower Borrower address\n     *  @param trustAmount Trust amount\n     */\n    function updateTrust(address borrower, uint256 trustAmount) external;\n\n    /**\n     *  @dev Apply for membership, and burn UnionToken as application fees\n     *  @param newMember New member address\n     */\n    function registerMember(address newMember) external;\n\n    /**\n     *  @dev Stop vouch for other member.\n     *  @param staker Staker address\n     *  @param account Account address\n     */\n    function cancelVouch(address staker, address account) external;\n\n    /**\n     *  @dev Change the credit limit model\n     *  Accept claims only from the admin\n     *  @param newCreditLimitModel New credit limit model address\n     */\n    function setCreditLimitModel(address newCreditLimitModel) external;\n\n    /**\n     *  @dev Get the user's locked stake from all his backed loans\n     *  @param staker Staker address\n     *  @return LockedStake\n     */\n    function getTotalLockedStake(address staker) external view returns (uint256);\n\n    /**\n     *  @dev Get staker's defaulted / frozen staked token amount\n     *  @param staker Staker address\n     *  @return Frozen token amount\n     */\n    function getTotalFrozenAmount(address staker) external view returns (uint256);\n\n    /**\n     *  @dev Update userManager locked info\n     *  @param borrower Borrower address\n     *  @param amount Borrow or repay amount(Including previously accrued interest)\n     *  @param isBorrow True is borrow, false is repay\n     */\n    function updateLockedData(\n        address borrower,\n        uint256 amount,\n        bool isBorrow\n    ) external;\n\n    /**\n     *  @dev Get the user's deposited stake amount\n     *  @param account Member address\n     *  @return Deposited stake amount\n     */\n    function getStakerBalance(address account) external view returns (uint256);\n\n    /**\n     *  @dev Stake\n     *  @param amount Amount\n     */\n    function stake(uint256 amount) external;\n\n    /**\n     *  @dev Unstake\n     *  @param amount Amount\n     */\n    function unstake(uint256 amount) external;\n\n    /**\n     *  @dev Update total frozen\n     *  @param account borrower address\n     *  @param isOverdue account is overdue\n     */\n    function updateTotalFrozen(address account, bool isOverdue) external;\n\n    /**\n     *  @dev Repay user's loan overdue, called only from the lending market\n     *  @param account User address\n     *  @param lastRepay Last repay block number\n     */\n    function repayLoanOverdue(\n        address account,\n        address token,\n        uint256 lastRepay\n    ) external;\n}\n"
    },
    "contracts/interfaces/IComptroller.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\n/**\n * @title Comptroller Interface\n * @dev Work with UnionToken and UserManager to calculate the Union rewards based on the staking info from UserManager, and be ready to support multiple UserManagers for various tokens when we support multiple assets.\n */\ninterface IComptroller {\n    /**\n     *  @dev Get the reward multipier based on the account status\n     *  @param account Account address\n     *  @return Multiplier number (in wei)\n     */\n    function getRewardsMultiplier(address account, address token) external view returns (uint256);\n\n    /**\n     *  @dev Withdraw rewards\n     *  @return Amount of rewards\n     */\n    function withdrawRewards(address sender, address token) external returns (uint256);\n\n    function addFrozenCoinAge(\n        address staker,\n        address token,\n        uint256 lockedStake,\n        uint256 lastRepay\n    ) external;\n\n    function updateTotalStaked(address token, uint256 totalStaked) external returns (bool);\n\n    /**\n     *  @dev Calculate unclaimed rewards based on blocks\n     *  @param account User address\n     *  @param futureBlocks Number of blocks in the future\n     *  @return Unclaimed rewards\n     */\n    function calculateRewardsByBlocks(\n        address account,\n        address token,\n        uint256 futureBlocks\n    ) external view returns (uint256);\n\n    /**\n     *  @dev Calculate currently unclaimed rewards\n     *  @param account Account address\n     *  @return Unclaimed rewards\n     */\n    function calculateRewards(address account, address token) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IUnionToken.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\n/**\n * @title UnionToken Interface\n * @dev Mint and distribute UnionTokens.\n */\ninterface IUnionToken {\n    /**\n     *  @dev Get total supply\n     *  @return Total supply\n     */\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function mint(address account, uint256 amount) external returns (bool);\n\n    /**\n     *  @dev Determine the prior number of votes for an account as of a block number. Block number must be a finalized block or else this function will revert to prevent misinformation.\n     *  @param account The address of the account to check\n     *  @param blockNumber The block number to get the vote balance at\n     *  @return The number of votes the account had as of the given block\n     */\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256);\n\n    /**\n     *  @dev Allows to spend owner's Union tokens by the specified spender.\n     *  The function can be called by anyone, but requires having allowance parameters\n     *  signed by the owner according to EIP712.\n     *  @param owner The owner's address, cannot be zero address.\n     *  @param spender The spender's address, cannot be zero address.\n     *  @param value The allowance amount, in wei.\n     *  @param deadline The allowance expiration date (unix timestamp in UTC).\n     *  @param v A final byte of signature (ECDSA component).\n     *  @param r The first 32 bytes of signature (ECDSA component).\n     *  @param s The second 32 bytes of signature (ECDSA component).\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function burnFrom(address account, uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/IDai.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\ninterface IDai {\n    function permit(\n        address holder,\n        address spender,\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "contracts/interfaces/IUToken.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\n/**\n *  @title UToken Interface\n *  @dev Union members can borrow and repay thru this component.\n */\ninterface IUToken {\n    /**\n     *  @dev Returns the remaining amount that can be borrowed from the market.\n     *  @return Remaining total amount\n     */\n    function getRemainingLoanSize() external view returns (uint256);\n\n    /**\n     *  @dev Get the borrowed principle\n     *  @param account Member address\n     *  @return Borrowed amount\n     */\n    function getBorrowed(address account) external view returns (uint256);\n\n    /**\n     *  @dev Get the last repay block\n     *  @param account Member address\n     *  @return Block number\n     */\n    function getLastRepay(address account) external view returns (uint256);\n\n    /**\n     *  @dev Get member interest index\n     *  @param account Member address\n     *  @return Interest index\n     */\n    function getInterestIndex(address account) external view returns (uint256);\n\n    /**\n     *  @dev Check if the member's loan is overdue\n     *  @param account Member address\n     *  @return Check result\n     */\n    function checkIsOverdue(address account) external view returns (bool);\n\n    /**\n     *  @dev Get the borrowing interest rate per block\n     *  @return Borrow rate\n     */\n    function borrowRatePerBlock() external view returns (uint256);\n\n    /**\n     *  @dev Get the origination fee\n     *  @param amount Amount to be calculated\n     *  @return Handling fee\n     */\n    function calculatingFee(uint256 amount) external view returns (uint256);\n\n    /**\n     *  @dev Get member loan data\n     *  @param member Member address\n     *  @return Loan\n     */\n    function getLoan(address member)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            address,\n            uint256,\n            int256,\n            bool,\n            uint256\n        );\n\n    /**\n     *  @dev Calculating member's borrowed interest\n     *  @param account Member address\n     *  @return Interest amount\n     */\n    function calculatingInterest(address account) external view returns (uint256);\n\n    /**\n     *  @dev Get a member's current owed balance, including the principle and interest but without updating the user's states.\n     *  @param account Member address\n     *  @return Borrowed amount\n     */\n    function borrowBalanceView(address account) external view returns (uint256);\n\n    /**\n     *  @dev Change loan origination fee value\n     *  Accept claims only from the admin\n     *  @param originationFee_ Fees deducted for each loan transaction\n     */\n    function setOriginationFee(uint256 originationFee_) external;\n\n    /**\n     *  @dev Update the market debt ceiling to a fixed amount, for example, 1 billion DAI etc.\n     *  Accept claims only from the admin\n     *  @param debtCeiling_ The debt limit for the whole system\n     */\n    function setDebtCeiling(uint256 debtCeiling_) external;\n\n    /**\n     *  @dev Update the minimum loan size\n     *  Accept claims only from the admin\n     *  @param minLoan_ Minimum loan amount per user\n     */\n    function setMinLoan(uint256 minLoan_) external;\n\n    /**\n     *  @dev Change loan overdue duration, based on the number of blocks\n     *  Accept claims only from the admin\n     *  @param overdueBlocks_ Maximum late repayment block. The number of arrivals is a default\n     */\n    function setOverdueBlocks(uint256 overdueBlocks_) external;\n\n    /**\n     *  @dev Change to a different interest rate model\n     *  Accept claims only from the admin\n     *  @param newInterestRateModel New interest rate model address\n     */\n    function setInterestRateModel(address newInterestRateModel) external;\n\n    /**\n     *  @dev Borrowing from the market\n     *  Accept claims only from the member\n     *  Borrow amount must in the range of creditLimit, minLoan, debtCeiling and not overdue\n     *  @param amount Borrow amount\n     */\n    function borrow(uint256 amount) external;\n\n    /**\n     *  @dev Repay the loan\n     *  Accept claims only from the member\n     *  Updated member lastPaymentEpoch only when the repayment amount is greater than interest\n     *  @param account Borrower address\n     *  @param amount Repay amount\n     */\n    function repay(address account, uint256 amount) external;\n\n    /**\n     *  @dev Update borrower overdue info\n     *  @param account Borrower address\n     */\n    function updateOverdueInfo(address account) external;\n\n    /**\n     *  @dev debt write off\n     *  @param borrower Borrower address\n     *  @param amount WriteOff amount\n     */\n    function debtWriteOff(address borrower, uint256 amount) external;\n}\n"
    },
    "contracts/token/Comptroller.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\nimport \"../Controller.sol\";\nimport \"../WadRayMath.sol\";\nimport \"../interfaces/IComptroller.sol\";\nimport \"../interfaces/IMarketRegistry.sol\";\nimport \"../interfaces/IUserManager.sol\";\n\n//For the time being, only the reward calculation of a single token is supported, and the contract needs to be revised after determining the reward calculation scheme of multiple tokens\ncontract Comptroller is Controller, IComptroller {\n    using WadRayMath for uint256;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    struct Info {\n        uint256 frozenCoinAge;\n        uint256 updatedBlock; //last withdraw rewards block\n        uint256 inflationIndex; //last withdraw rewards inflationIndex\n        uint256 accrued; //the unionToken accrued but not yet transferred to each user\n    }\n\n    struct UserManagerData {\n        uint256 userStaked;\n        uint256 totalFrozen;\n        uint256 totalStaked;\n        uint256 userFrozen;\n        uint256 frozenCoinAge;\n        uint256 totalLocked;\n        bool isMember;\n    }\n\n    uint256 public constant INIT_INFLATION_INDEX = 10**18;\n    uint256 public constant nonMemberRatio = 75 * 10**16; // 75%;\n    uint256 public constant memberRatio = 10**18; // 100%;\n    uint256 public halfDecayPoint;\n    uint256 public gInflationIndex; // store the latest inflation index\n    uint256 public gLastUpdatedBlock; // block number when updating the inflation index\n    IERC20Upgradeable public unionToken;\n    IMarketRegistry public marketRegistry;\n    //1 address account, 2 address token\n    mapping(address => mapping(address => Info)) public users;\n\n    modifier onlyUserManager(address token) {\n        require(msg.sender == _getUserManager(token), \"UnionToken: only user manager can call\");\n        _;\n    }\n\n    /**\n     *  @dev Withdraw rewards event\n     *  @param account The staker's address\n     *  @param amount The amount of Union tokens to withdraw\n     */\n    event LogWithdrawRewards(address indexed account, uint256 amount);\n\n    function __Comptroller_init(address unionToken_, address marketRegistry_) public initializer {\n        Controller.__Controller_init(msg.sender);\n        unionToken = IERC20Upgradeable(unionToken_);\n        marketRegistry = IMarketRegistry(marketRegistry_);\n        gInflationIndex = INIT_INFLATION_INDEX;\n        gLastUpdatedBlock = block.number;\n        halfDecayPoint = 100000;\n    }\n\n    function setHalfDecayPoint(uint256 point) public onlyAdmin {\n        halfDecayPoint = point;\n    }\n\n    /**\n     *  @dev Get the reward multipier based on the account status\n     *  @param account Account address\n     *  @param token ERC20 token address\n     *  @return Multiplier number (in wei)\n     */\n    function getRewardsMultiplier(address account, address token) public view override returns (uint256) {\n        IUserManager userManagerContract = IUserManager(_getUserManager(token));\n        uint256 stakingAmount = userManagerContract.getStakerBalance(account);\n        uint256 lockedStake = userManagerContract.getTotalLockedStake(account);\n        uint256 totalFrozen = userManagerContract.getTotalFrozenAmount(account);\n        bool isMember = userManagerContract.checkIsMember(account);\n        return _getRewardsMultiplier(stakingAmount, lockedStake, totalFrozen, isMember);\n    }\n\n    /**\n     *  @dev Withdraw rewards\n     *  @param token Staking token address\n     *  @return Amount of rewards\n     */\n    function withdrawRewards(address sender, address token)\n        external\n        override\n        whenNotPaused\n        onlyUserManager(token)\n        returns (uint256)\n    {\n        uint256 amount = calculateRewardsByBlocks(sender, token, 0);\n        IUserManager userManagerContract = IUserManager(_getUserManager(token));\n        // update the global states\n        uint256 totalStaked_ = userManagerContract.totalStaked() - userManagerContract.totalFrozen();\n        gInflationIndex = _getInflationIndexNew(totalStaked_, block.number - gLastUpdatedBlock);\n        gLastUpdatedBlock = block.number;\n        users[sender][token].frozenCoinAge = 0;\n        users[sender][token].updatedBlock = block.number;\n        users[sender][token].inflationIndex = gInflationIndex;\n        if (unionToken.balanceOf(address(this)) >= amount && amount > 0) {\n            unionToken.safeTransfer(sender, amount);\n            users[sender][token].accrued = 0;\n            emit LogWithdrawRewards(sender, amount);\n\n            return amount;\n        } else {\n            users[sender][token].accrued = amount;\n            emit LogWithdrawRewards(sender, 0);\n\n            return 0;\n        }\n    }\n\n    /**\n     *  @dev Calculate unclaimed rewards based on blocks\n     *  @param account User address\n     *  @param token Staking token address\n     *  @param futureBlocks Number of blocks in the future\n     *  @return Unclaimed rewards\n     */\n    function calculateRewardsByBlocks(\n        address account,\n        address token,\n        uint256 futureBlocks\n    ) public view override returns (uint256) {\n        IUserManager userManagerContract = IUserManager(_getUserManager(token));\n        Info memory userInfo = users[account][token];\n        UserManagerData memory userManagerData;\n\n        userManagerData.totalFrozen = userManagerContract.totalFrozen();\n        userManagerData.userStaked = userManagerContract.getStakerBalance(account);\n        userManagerData.userFrozen = userManagerContract.getTotalFrozenAmount(account);\n        userManagerData.totalStaked = userManagerContract.totalStaked() - userManagerData.totalFrozen;\n\n        uint256 lastUpdatedBlock = userInfo.updatedBlock;\n        if (block.number < lastUpdatedBlock) {\n            lastUpdatedBlock = block.number;\n        }\n\n        uint256 pastBlocks = block.number - lastUpdatedBlock + futureBlocks;\n        userManagerData.frozenCoinAge =\n            userManagerContract.getFrozenCoinAge(account, pastBlocks) +\n            userInfo.frozenCoinAge;\n\n        userManagerData.totalLocked = userManagerContract.getTotalLockedStake(account);\n        userManagerData.isMember = userManagerContract.checkIsMember(account);\n\n        uint256 inflationIndex = _getRewardsMultiplier(\n            userManagerData.userStaked,\n            userManagerData.totalLocked,\n            userManagerData.userFrozen,\n            userManagerData.isMember\n        );\n\n        return\n            userInfo.accrued +\n            _calculateRewards(\n                account,\n                token,\n                userManagerData.totalStaked,\n                userManagerData.userStaked,\n                userManagerData.frozenCoinAge,\n                pastBlocks,\n                inflationIndex\n            );\n    }\n\n    /**\n     *  @dev Calculate currently unclaimed rewards\n     *  @param account Account address\n     *  @param token Staking token address\n     *  @return Unclaimed rewards\n     */\n    function calculateRewards(address account, address token) public view override returns (uint256) {\n        return calculateRewardsByBlocks(account, token, 0);\n    }\n\n    /**\n     *  @dev When total staked change update inflation index\n     *  @param totalStaked totalStaked amount\n     *  @return Whether succeeded\n     */\n    function updateTotalStaked(address token, uint256 totalStaked)\n        external\n        override\n        whenNotPaused\n        onlyUserManager(token)\n        returns (bool)\n    {\n        if (totalStaked > 0) {\n            gInflationIndex = _getInflationIndexNew(totalStaked, block.number - gLastUpdatedBlock);\n        }\n        gLastUpdatedBlock = block.number;\n\n        return true;\n    }\n\n    function addFrozenCoinAge(\n        address staker,\n        address token,\n        uint256 lockedStake,\n        uint256 lastRepay\n    ) external override onlyUserManager(token) {\n        uint256 lastBlock = users[staker][token].updatedBlock;\n        uint256 blocks;\n        if (lastBlock > lastRepay) {\n            // Frozen CoinAge here has been accounted for when the user withdraws the rewards, so here just need to calculate the delta between block.number and lastBlock\n            blocks = block.number - lastBlock;\n        } else {\n            blocks = block.number - lastRepay;\n        }\n\n        users[staker][token].frozenCoinAge += lockedStake * blocks;\n    }\n\n    /**\n     *  @dev Calculate new inflation index based on # of blocks\n     *  @param totalStaked_ Number of total staked tokens in the system\n     *  @param blockDelta Number of blocks\n     *  @return New inflation index\n     */\n    function _getInflationIndexNew(uint256 totalStaked_, uint256 blockDelta) private view returns (uint256) {\n        if (totalStaked_ == 0) {\n            return INIT_INFLATION_INDEX;\n        }\n\n        if (blockDelta == 0) {\n            return gInflationIndex;\n        }\n\n        return _getInflationIndex(totalStaked_, gInflationIndex, blockDelta);\n    }\n\n    function _calculateRewards(\n        address account,\n        address token,\n        uint256 totalStaked,\n        uint256 userStaked,\n        uint256 frozenCoinAge,\n        uint256 pastBlocks,\n        uint256 inflationIndex\n    ) private view returns (uint256) {\n        uint256 startInflationIndex = users[account][token].inflationIndex;\n        require(userStaked * pastBlocks >= frozenCoinAge, \" Comptroller: frozen coin age error\");\n\n        if (userStaked == 0 || totalStaked == 0 || startInflationIndex == 0 || pastBlocks == 0) {\n            return 0;\n        }\n\n        uint256 effectiveStakeAmount = (userStaked * pastBlocks - frozenCoinAge) / pastBlocks;\n\n        uint256 curInflationIndex = _getInflationIndexNew(totalStaked, pastBlocks);\n\n        require(curInflationIndex >= startInflationIndex, \"Comptroller: inflationIndex error\");\n\n        return (curInflationIndex - startInflationIndex).wadMul(effectiveStakeAmount).wadMul(inflationIndex);\n    }\n\n    function _getUserManager(address token) private view returns (address userManager) {\n        (, userManager) = marketRegistry.tokens(token);\n    }\n\n    /**\n     *  @dev Calculate inflation per block\n     *  @param effectiveTotalStake Effective total stake\n     *  @return Inflation amount, div totalSupply is the inflation rate\n     */\n    function inflationPerBlock(uint256 effectiveTotalStake) public view returns (uint256) {\n        uint256 index = effectiveTotalStake / halfDecayPoint;\n        return lookup(index);\n    }\n\n    function lookup(uint256 index) public pure returns (uint256) {\n        if (index <= 0.00001 * 10**18) {\n            return 1 * 10**18;\n        } else if (index <= 0.0001 * 10**18) {\n            return 0.9 * 10**18;\n        } else if (index <= 0.001 * 10**18) {\n            return 0.8 * 10**18;\n        } else if (index <= 0.01 * 10**18) {\n            return 0.7 * 10**18;\n        } else if (index <= 0.1 * 10**18) {\n            return 0.6 * 10**18;\n        } else if (index <= 1 * 10**18) {\n            return 0.5 * 10**18;\n        } else if (index <= 5 * 10**18) {\n            return 0.25 * 10**18;\n        } else if (index <= 10 * 10**18) {\n            return 0.1 * 10**18;\n        } else if (index <= 100 * 10**18) {\n            return 0.01 * 10**18;\n        } else if (index <= 1000 * 10**18) {\n            return 0.001 * 10**18;\n        } else if (index <= 10000 * 10**18) {\n            return 0.0001 * 10**18;\n        } else if (index <= 100000 * 10**18) {\n            return 0.00001 * 10**18;\n        } else {\n            return 0.000001 * 10**18;\n        }\n    }\n\n    function _getInflationIndex(\n        uint256 effectiveAmount,\n        uint256 inflationIndex,\n        uint256 blockDelta\n    ) private view returns (uint256) {\n        return blockDelta * inflationPerBlock(effectiveAmount).wadDiv(effectiveAmount) + inflationIndex;\n    }\n\n    function _getRewardsMultiplier(\n        uint256 userStaked,\n        uint256 lockedStake,\n        uint256 totalFrozen_,\n        bool isMember_\n    ) private pure returns (uint256) {\n        if (isMember_) {\n            if (userStaked == 0 || totalFrozen_ >= lockedStake || totalFrozen_ >= userStaked) {\n                return memberRatio;\n            }\n\n            uint256 effectiveLockedAmount = lockedStake - totalFrozen_;\n            uint256 effectiveStakeAmount = userStaked - totalFrozen_;\n\n            uint256 lendingRatio = effectiveLockedAmount.wadDiv(effectiveStakeAmount);\n\n            return lendingRatio + memberRatio;\n        } else {\n            return nonMemberRatio;\n        }\n    }\n}\n"
    },
    "contracts/WadRayMath.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\n/**\n * @title WadRayMath library\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\n */\n\nlibrary WadRayMath {\n    uint256 internal constant WAD = 1e18;\n    uint256 internal constant halfWAD = WAD / 2;\n\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return (halfWAD + a * b) / WAD;\n    }\n\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 halfB = b / 2;\n\n        return (halfB + a * WAD) / b;\n    }\n}\n"
    },
    "contracts/interfaces/IMarketRegistry.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\n/**\n * @title MarketRegistry Interface\n * @dev Registering and managing all the lending markets.\n */\ninterface IMarketRegistry {\n    function getUTokens() external view returns (address[] memory);\n\n    function getUserManagers() external view returns (address[] memory);\n\n    /**\n     *  @dev Returns the market address of the token\n     *  @return The market address\n     */\n    function tokens(address token) external view returns (address, address);\n\n    function createUToken(\n        address token,\n        address assetManager,\n        uint256 originationFee,\n        uint256 globalMaxLoan,\n        uint256 maxBorrow,\n        uint256 minLoan,\n        uint256 maxLateBlock,\n        address interestRateModel\n    ) external returns (address);\n\n    function createUserManager(\n        address assetManager,\n        address unionToken,\n        address stakingToken,\n        address creditLimitModel,\n        address inflationIndexModel,\n        address comptroller\n    ) external returns (address);\n}\n"
    },
    "contracts/tests/UTokenMock.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\n\nimport \"../interfaces/IUserManager.sol\";\n\n/**\n *  @title UToken Contract\n *  @dev Union accountBorrows can borrow and repay thru this component.\n */\ncontract UTokenMock is ERC20Upgradeable {\n    bool public constant IS_UTOKEN = true;\n    uint256 public constant WAD = 1e18;\n    uint256 internal constant BORROW_RATE_MAX_MANTISSA = 0.0005e16; //Maximum borrow rate that can ever be applied (.0005% / block)\n    uint256 internal constant RESERVE_FACTORY_MAX_MANTISSA = 1e18; //Maximum fraction of interest that can be set aside for reserves\n\n    bytes32 public constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    bool public isOverdue;\n\n    function __UToken_init() public initializer {\n        ERC20Upgradeable.__ERC20_init(\"uToken\", \"uToken\");\n    }\n\n    function updateOverdueInfo(\n        address userManager,\n        address account,\n        bool _isOverdue\n    ) external {\n        IUserManager(userManager).updateTotalFrozen(account, _isOverdue);\n    }\n\n    function updateLockedData(\n        address userManager,\n        address account,\n        uint256 amount\n    ) external {\n        IUserManager(userManager).updateLockedData(account, amount, true);\n    }\n\n    function setIsOverdue(bool _isOverdue) public returns (bool) {\n        return isOverdue = _isOverdue;\n    }\n\n    function checkIsOverdue(address) public view returns (bool) {\n        return isOverdue;\n    }\n\n    function getRemainingLoanSize() public pure returns (uint256) {\n        return 0;\n    }\n\n    function getLastRepay(address) public pure returns (uint256 lastRepay) {\n        lastRepay = 0;\n    }\n\n    function getInterestIndex(address) public pure returns (uint256 interestIndex) {\n        interestIndex = 0;\n    }\n\n    function calculatingFee(uint256) public pure returns (uint256) {\n        return 0;\n    }\n\n    function getLoan(address)\n        public\n        view\n        returns (\n            uint256 principal,\n            uint256 totalBorrowed,\n            address asset,\n            uint256 apr,\n            int256 limit,\n            bool _isOverdue,\n            uint256 lastRepay\n        )\n    {}\n\n    function getBorrowed(address) public view returns (uint256) {}\n\n    function borrowBalanceView(address) public pure returns (uint256) {\n        return 0;\n    }\n\n    function borrowRatePerBlock() public view returns (uint256) {}\n\n    function supplyRatePerBlock() public pure returns (uint256) {\n        return 0;\n    }\n\n    function exchangeRateCurrent() public view returns (uint256) {\n        return exchangeRateStored();\n    }\n\n    function exchangeRateStored() public view returns (uint256) {}\n\n    function calculatingInterest(address) public pure returns (uint256) {\n        return 0;\n    }\n\n    function repayBorrowWithPermit(\n        address,\n        uint256,\n        uint256,\n        uint256,\n        uint8,\n        bytes32,\n        bytes32\n    ) public {}\n\n    function accrueInterest() public pure returns (bool) {\n        return true;\n    }\n\n    function balanceOfUnderlying(address owner) external view returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    function mint(uint256 mintAmount) external {\n        _mint(msg.sender, mintAmount);\n    }\n\n    function redeem(uint256) external {}\n\n    function redeemUnderlying(uint256) external {}\n\n    function addReserves(uint256) external {}\n\n    function removeReserves(address, uint256) external {}\n\n    function debtWriteOff(address, uint256) external {}\n\n    function getBlockNumber() internal view returns (uint256) {\n        return block.number;\n    }\n\n    function batchUpdateOverdueInfos(address[] calldata accounts) external {}\n\n    function getChainId() internal view returns (uint256) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        return chainId;\n    }\n\n    function permit(\n        address,\n        address,\n        uint256,\n        uint256,\n        uint8,\n        bytes32,\n        bytes32\n    ) external {}\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/tests/FaucetERC20.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\n\ncontract FaucetERC20 is Initializable, ERC20Upgradeable {\n    string public constant version = \"1\";\n\n    // --- EIP712 niceties ---\n    bytes32 public DOMAIN_SEPARATOR;\n    bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\n\n    mapping(address => uint256) public nonces;\n\n    function __FaucetERC20_init(string memory name, string memory symbol) public initializer {\n        ERC20Upgradeable.__ERC20_init(name, symbol);\n\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name)),\n                keccak256(bytes(version)),\n                getChainId(),\n                address(this)\n            )\n        );\n    }\n\n    receive() external payable {\n        mint(msg.sender, 1 ether);\n    }\n\n    function mint(address to, uint256 value) public returns (bool) {\n        // require(value <= 10000000 ether, \"dont be greedy\");\n        _mint(to, value);\n        return true;\n    }\n\n    function burn(address to, uint256 value) public returns (bool) {\n        // require(value <= 10000000 ether, \"dont be greedy\");\n        _burn(to, value);\n        return true;\n    }\n\n    function permit(\n        address holder,\n        address spender,\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, holder, spender, nonce, expiry, allowed))\n            )\n        );\n\n        require(holder != address(0), \"invalid-address-0\");\n        require(holder == ecrecover(digest, v, r, s), \"invalid-permit\");\n        require(expiry == 0 || block.timestamp <= expiry, \"permit-expired\");\n        require(nonce == nonces[holder]++, \"invalid-nonce\");\n        uint256 wad = allowed ? type(uint256).max : 0;\n        _approve(holder, spender, wad);\n    }\n\n    function getChainId() internal view returns (uint256) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        return chainId;\n    }\n}\n"
    },
    "contracts/tests/MarketRegistryMock.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract MarketRegistryMock is Initializable {\n    struct Market {\n        address uToken;\n        address userManager;\n    }\n\n    address[] public uTokenList;\n    address[] public userManagerList;\n    mapping(address => Market) public tokens;\n\n    function __MarketRegistryMock_init() public initializer {}\n\n    function addUToken(address token, address uToken) public {\n        uTokenList.push(uToken);\n        tokens[token].uToken = uToken;\n    }\n\n    function addUserManager(address token, address userManager) public {\n        userManagerList.push(userManager);\n        tokens[token].userManager = userManager;\n    }\n\n    function deleteMarket(address token) public {\n        address oldUToken = tokens[token].uToken;\n        bool uTokenExist = false;\n        uint256 uTokenIndex = 0;\n\n        for (uint256 i = 0; i < uTokenList.length; i++) {\n            if (oldUToken == uTokenList[i]) {\n                uTokenExist = true;\n                uTokenIndex = i;\n            }\n        }\n\n        if (uTokenExist) {\n            uTokenList[uTokenIndex] = uTokenList[uTokenList.length - 1];\n            uTokenList.pop();\n        }\n\n        tokens[token].uToken = address(0);\n\n        address oldUserManager = tokens[token].userManager;\n        bool userManagerExist = false;\n        uint256 userManagerIndex = 0;\n\n        for (uint256 i = 0; i < userManagerList.length; i++) {\n            if (oldUserManager == userManagerList[i]) {\n                userManagerExist = true;\n                userManagerIndex = i;\n            }\n        }\n\n        if (userManagerExist) {\n            userManagerList[userManagerIndex] = userManagerList[userManagerList.length - 1];\n            userManagerList.pop();\n        }\n\n        tokens[token].userManager = address(0);\n    }\n}\n"
    },
    "contracts/tests/CompoundMock.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\ncontract CompoundMock is Initializable, ERC20Upgradeable {\n    uint256 public rate;\n    uint256 public constant EXCHANGE_RATE = 1e18;\n    IERC20Upgradeable public underlyingToken;\n\n    function __CompoundMock_init(uint256 _rate, address _underlyingToken) public initializer {\n        rate = _rate;\n        underlyingToken = IERC20Upgradeable(_underlyingToken);\n    }\n\n    function supplyRatePerBlock() external view returns (uint256) {\n        return rate;\n    }\n\n    function mint(uint256 mintAmount) external returns (uint256) {\n        underlyingToken.transferFrom(msg.sender, address(this), mintAmount);\n        _mint(msg.sender, (mintAmount * EXCHANGE_RATE) / 10**18);\n        return 0;\n    }\n\n    function mintOther(address account, uint256 mintAmount) external returns (uint256) {\n        underlyingToken.transferFrom(msg.sender, address(this), mintAmount);\n        _mint(account, (mintAmount * EXCHANGE_RATE) / 10**18);\n        return 0;\n    }\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256) {\n        underlyingToken.transfer(msg.sender, redeemAmount);\n        _burn(msg.sender, (redeemAmount * EXCHANGE_RATE) / 10**18);\n        return 0;\n    }\n\n    function balanceOfUnderlying(address owner) external view returns (uint256) {\n        return (balanceOf(owner) * EXCHANGE_RATE) / 10**18;\n    }\n\n    function exchangeRateStored() external pure returns (uint256) {\n        return EXCHANGE_RATE;\n    }\n}\n"
    },
    "contracts/tests/ComptrollerMock.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\ncontract ComptrollerMock {\n    address public unionToken;\n    uint256 public rewardAmount;\n\n    function __ComptrollerMock_init() public {}\n\n    function getRewardsMultiplier(address account, address token) public view returns (uint256) {}\n\n    function setRewardsInfo(address _unionToken, uint256 _rewardAmount) external {\n        unionToken = _unionToken;\n        rewardAmount = _rewardAmount;\n    }\n\n    function withdrawRewards(address sender, address) external returns (uint256) {\n        IERC20Upgradeable(unionToken).transfer(sender, rewardAmount);\n        return rewardAmount;\n    }\n\n    function calculateRewardsByBlocks(\n        address account,\n        address token,\n        uint256 futureBlocks\n    ) public view returns (uint256) {}\n\n    function calculateRewards(address account, address token) public view returns (uint256) {\n        return calculateRewardsByBlocks(account, token, 0);\n    }\n\n    function inflationPerBlock(uint256) public view returns (uint256) {}\n\n    function updateTotalStaked(address, uint256) external pure returns (bool) {\n        return true;\n    }\n}\n"
    },
    "contracts/tests/CompoundAdapterMock.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\ncontract CompoundAdapterMock is Initializable {\n    bool public isSupport;\n    mapping(address => uint256) public floorMap;\n    mapping(address => uint256) public ceilingMap;\n\n    function __CompoundAdapterMock_init() public initializer {}\n\n    function setSupport() external {\n        isSupport = !isSupport;\n    }\n\n    function setFloor(address tokenAddress, uint256 floor) external {\n        floorMap[tokenAddress] = floor;\n    }\n\n    function setCeiling(address tokenAddress, uint256 ceiling) external {\n        ceilingMap[tokenAddress] = ceiling;\n    }\n\n    function claimTokens(address tokenAddress, address recipient) external {\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(recipient, balance);\n    }\n\n    function supportsToken(address) external view returns (bool) {\n        return isSupport;\n    }\n\n    function getSupplyView(address tokenAddress) external view returns (uint256) {\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\n        return token.balanceOf(address(this));\n    }\n\n    function getSupply(address tokenAddress) external view returns (uint256) {\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\n        return token.balanceOf(address(this));\n    }\n\n    function deposit(address) external {}\n\n    function withdraw(\n        address tokenAddress,\n        address recipient,\n        uint256 tokenAmount\n    ) external {\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\n        token.transfer(recipient, tokenAmount);\n    }\n\n    function withdrawAll(address tokenAddress, address recipient) external {\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\n        token.transfer(recipient, token.balanceOf(address(this)));\n    }\n}\n"
    },
    "contracts/tests/AssetManagerMock.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\npragma abicoder v1;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"../Controller.sol\";\nimport \"../interfaces/IMarketRegistry.sol\";\nimport \"../interfaces/IMoneyMarketAdapter.sol\";\nimport \"../interfaces/IAssetManager.sol\";\n\n/**\n *  @title AssetManager\n *  @dev Manage the token assets deposited by components and admins, and invest tokens to the integrated underlying lending protocols.\n */\ncontract AssetManagerMock is Controller {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using AddressUpgradeable for address;\n\n    IMoneyMarketAdapter[] public moneyMarkets;\n    mapping(address => Market) public supportedMarkets;\n    address[] public supportedTokensList;\n    //record admin or userManager balance\n    mapping(address => mapping(address => uint256)) public balances; //1 user 2 token\n    mapping(address => uint256) public totalPrincipal; //total stake amount\n    address public marketRegistry;\n    uint256[] public withdrawSeq; // Priority sequence of money market indices for processing withdraws\n\n    struct Market {\n        bool isSupported;\n    }\n\n    function __AssetManager_init() public initializer {}\n\n    function getPoolBalance(address tokenAddress) public view returns (uint256) {\n        IERC20Upgradeable poolToken = IERC20Upgradeable(tokenAddress);\n        uint256 balance = poolToken.balanceOf(address(this));\n        if (isMarketSupported(tokenAddress)) {\n            return totalSupplyView(tokenAddress) + balance;\n        } else {\n            return balance;\n        }\n    }\n\n    function getLoanableAmount(address tokenAddress) public view returns (uint256) {\n        uint256 poolBalance = getPoolBalance(tokenAddress);\n        if (poolBalance > totalPrincipal[tokenAddress]) return poolBalance - totalPrincipal[tokenAddress];\n        return 0;\n    }\n\n    function totalSupply(address) public pure returns (uint256) {\n        return 0;\n    }\n\n    function totalSupplyView(address) public pure returns (uint256) {\n        return 0;\n    }\n\n    function isMarketSupported(address) public pure returns (bool) {\n        return false;\n    }\n\n    function deposit(address token, uint256 amount) external returns (bool) {\n        IERC20Upgradeable poolToken = IERC20Upgradeable(token);\n        require(amount > 0, \"AssetManager: amount can not be zero\");\n\n        if (!_isUToken(msg.sender, token)) {\n            balances[msg.sender][token] += amount;\n            totalPrincipal[token] += amount;\n        }\n\n        poolToken.safeTransferFrom(msg.sender, address(this), amount);\n\n        return true;\n    }\n\n    function withdraw(\n        address token,\n        address account,\n        uint256 amount\n    ) external returns (bool) {\n        uint256 remaining = amount;\n\n        // If there are tokens in Asset Manager then transfer them on priority\n        uint256 selfBalance = IERC20Upgradeable(token).balanceOf(address(this));\n        if (selfBalance > 0) {\n            uint256 withdrawAmount = selfBalance < remaining ? selfBalance : remaining;\n            remaining -= withdrawAmount;\n            IERC20Upgradeable(token).safeTransfer(account, withdrawAmount);\n        }\n\n        if (!_isUToken(msg.sender, token)) {\n            balances[msg.sender][token] = balances[msg.sender][token] - amount + remaining;\n            totalPrincipal[token] = totalPrincipal[token] - amount + remaining;\n        }\n\n        return true;\n    }\n\n    function debtWriteOff(address token, uint256 amount) external {}\n\n    function addToken(address tokenAddress) external {\n        supportedTokensList.push(tokenAddress);\n        supportedMarkets[tokenAddress].isSupported = true;\n    }\n\n    /**\n     *  @dev Claim the tokens left on AssetManager balance, in case there are tokens get stuck here.\n     *  @param tokenAddress ERC20 token address\n     *  @param recipient Recipient address\n     */\n    function claimTokens(address tokenAddress, address recipient) external {\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\n        uint256 balance = token.balanceOf(address(this));\n        token.safeTransfer(recipient, balance);\n    }\n\n    function _checkSenderBalance(\n        address sender,\n        address tokenAddress,\n        uint256 amount\n    ) private view returns (bool) {\n        if (_isUToken(sender, tokenAddress)) {\n            // For all the lending markets, which have no deposits, return the tokens from the pool\n            return getLoanableAmount(tokenAddress) >= amount;\n        } else {\n            return balances[sender][tokenAddress] >= amount;\n        }\n    }\n\n    function _isUToken(address, address) private pure returns (bool) {\n        return true;\n    }\n\n    function _isUserManager(address, address) private pure returns (bool) {\n        return true;\n    }\n}\n"
    },
    "contracts/market/UToken.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\npragma abicoder v1;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport \"../Controller.sol\";\nimport \"../interfaces/IUserManager.sol\";\nimport \"../interfaces/IAssetManager.sol\";\nimport \"../interfaces/IUErc20.sol\";\nimport \"../interfaces/IInterestRateModel.sol\";\n\n/**\n *  @title UToken Contract\n *  @dev Union accountBorrows can borrow and repay thru this component.\n */\ncontract UToken is Controller, ReentrancyGuardUpgradeable {\n    using SafeERC20Upgradeable for IUErc20;\n\n    bool public constant IS_UTOKEN = true;\n    uint256 public constant WAD = 1e18;\n    uint256 internal constant BORROW_RATE_MAX_MANTISSA = 0.0005e16; //Maximum borrow rate that can ever be applied (.0005% / block)\n    uint256 internal constant RESERVE_FACTORY_MAX_MANTISSA = 1e18; //Maximum fraction of interest that can be set aside for reserves\n\n    address public underlying;\n    IInterestRateModel public interestRateModel;\n    uint256 internal initialExchangeRateMantissa; //Initial exchange rate used when minting the first UTokens (used when totalSupply = 0)\n    uint256 public reserveFactorMantissa; //Fraction of interest currently set aside for reserves\n    uint256 public accrualBlockNumber; //Block number that interest was last accrued at\n    uint256 public borrowIndex; //Accumulator of the total earned interest rate since the opening of the market\n    uint256 public totalBorrows; //Total amount of outstanding borrows of the underlying in this market\n    uint256 public totalReserves; //Total amount of reserves of the underlying held in this marke\n    uint256 public totalRedeemable; //Calculates the exchange rate from the underlying to the uToken\n    uint256 public overdueBlocks; //overdue duration, based on the number of blocks\n    uint256 public originationFee;\n    uint256 public debtCeiling; //The debt limit for the whole system\n    uint256 public maxBorrow;\n    uint256 public minBorrow;\n    address public assetManager;\n    address public userManager;\n    IUErc20 public uErc20;\n\n    struct BorrowSnapshot {\n        uint256 principal;\n        uint256 interest;\n        uint256 interestIndex;\n        uint256 lastRepay; //Calculate if it is overdue\n    }\n\n    /**\n     * @notice Mapping of account addresses to outstanding borrow balances\n     */\n    mapping(address => BorrowSnapshot) internal accountBorrows;\n\n    /**\n     *  @dev Change of the interest rate model\n     *  @param oldInterestRateModel Old interest rate model address\n     *  @param newInterestRateModel New interest rate model address\n     */\n    event LogNewMarketInterestRateModel(address oldInterestRateModel, address newInterestRateModel);\n\n    event LogMint(address minter, uint256 underlyingAmount, uint256 uTokenAmount);\n\n    event LogRedeem(address redeemer, uint256 redeemTokensIn, uint256 redeemAmountIn, uint256 redeemAmount);\n\n    event LogReservesAdded(address reserver, uint256 actualAddAmount, uint256 totalReservesNew);\n\n    event LogReservesReduced(address receiver, uint256 reduceAmount, uint256 totalReservesNew);\n\n    /**\n     *  @dev Event borrow\n     *  @param account Member address\n     *  @param amount Borrow amount\n     *  @param fee Origination fee\n     */\n    event LogBorrow(address indexed account, uint256 amount, uint256 fee);\n\n    /**\n     *  @dev Event repay\n     *  @param account Member address\n     *  @param amount Repay amount\n     */\n    event LogRepay(address indexed account, uint256 amount);\n\n    /**\n     *  @dev modifier limit member\n     */\n    modifier onlyMember(address account) {\n        require(IUserManager(userManager).checkIsMember(account), \"UToken: caller is not a member\");\n        _;\n    }\n\n    modifier onlyAssetManager() {\n        require(msg.sender == assetManager, \"UToken: caller is not assetManager\");\n        _;\n    }\n\n    modifier onlyUserManager() {\n        require(msg.sender == userManager, \"UToken: caller is not userManager\");\n        _;\n    }\n\n    function __UToken_init(\n        IUErc20 uErc20_,\n        address underlying_,\n        uint256 initialExchangeRateMantissa_,\n        uint256 reserveFactorMantissa_,\n        uint256 originationFee_,\n        uint256 debtCeiling_,\n        uint256 maxBorrow_,\n        uint256 minBorrow_,\n        uint256 overdueBlocks_,\n        address admin_\n    ) public initializer {\n        require(initialExchangeRateMantissa_ > 0, \"initial exchange rate must be greater than zero.\");\n        require(address(underlying_) != address(0), \"underlying token is zero\");\n        require(\n            reserveFactorMantissa_ >= 0 && reserveFactorMantissa_ <= RESERVE_FACTORY_MAX_MANTISSA,\n            \"reserveFactorMantissa error\"\n        );\n        uErc20 = uErc20_;\n        Controller.__Controller_init(admin_);\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\n        underlying = underlying_;\n        originationFee = originationFee_;\n        debtCeiling = debtCeiling_;\n        maxBorrow = maxBorrow_;\n        minBorrow = minBorrow_;\n        overdueBlocks = overdueBlocks_;\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\n        reserveFactorMantissa = reserveFactorMantissa_;\n        accrualBlockNumber = getBlockNumber();\n        borrowIndex = WAD;\n    }\n\n    function setAssetManager(address assetManager_) external onlyAdmin {\n        assetManager = assetManager_;\n    }\n\n    function setUserManager(address userManager_) external onlyAdmin {\n        userManager = userManager_;\n    }\n\n    /**\n     *  @dev Change loan origination fee value\n     *  Accept claims only from the admin\n     *  @param originationFee_ Fees deducted for each loan transaction\n     */\n    function setOriginationFee(uint256 originationFee_) external onlyAdmin {\n        originationFee = originationFee_;\n    }\n\n    /**\n     *  @dev Update the market debt ceiling to a fixed amount, for example, 1 billion DAI etc.\n     *  Accept claims only from the admin\n     *  @param debtCeiling_ The debt limit for the whole system\n     */\n    function setDebtCeiling(uint256 debtCeiling_) external onlyAdmin {\n        debtCeiling = debtCeiling_;\n    }\n\n    /**\n     *  @dev Update the minimum loan size\n     *  Accept claims only from the admin\n     *  @param minBorrow_ Minimum loan amount per user\n     */\n    function setMinBorrow(uint256 minBorrow_) external onlyAdmin {\n        minBorrow = minBorrow_;\n    }\n\n    /**\n     *  @dev Update the max loan size\n     *  Accept claims only from the admin\n     *  @param maxBorrow_ Max loan amount per user\n     */\n    function setMaxBorrow(uint256 maxBorrow_) external onlyAdmin {\n        maxBorrow = maxBorrow_;\n    }\n\n    /**\n     *  @dev Change loan overdue duration, based on the number of blocks\n     *  Accept claims only from the admin\n     *  @param overdueBlocks_ Maximum late repayment block. The number of arrivals is a default\n     */\n    function setOverdueBlocks(uint256 overdueBlocks_) external onlyAdmin {\n        overdueBlocks = overdueBlocks_;\n    }\n\n    /**\n     *  @dev Change to a different interest rate model\n     *  Accept claims only from the admin\n     *  @param newInterestRateModel New interest rate model address\n     */\n    function setInterestRateModel(address newInterestRateModel) external onlyAdmin {\n        _setInterestRateModelFresh(newInterestRateModel);\n    }\n\n    function setReserveFactor(uint256 reserveFactorMantissa_) external onlyAdmin {\n        require(\n            reserveFactorMantissa_ >= 0 && reserveFactorMantissa_ <= RESERVE_FACTORY_MAX_MANTISSA,\n            \"reserveFactorMantissa error\"\n        );\n        reserveFactorMantissa = reserveFactorMantissa_;\n    }\n\n    /**\n     *  @dev Returns the remaining amount that can be borrowed from the market.\n     *  @return Remaining total amount\n     */\n    function getRemainingLoanSize() public view returns (uint256) {\n        if (debtCeiling >= totalBorrows) {\n            return debtCeiling - totalBorrows;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     *  @dev Get the last repay block\n     *  @param account Member address\n     *  @return lastRepay\n     */\n    function getLastRepay(address account) public view returns (uint256 lastRepay) {\n        lastRepay = accountBorrows[account].lastRepay;\n    }\n\n    /**\n     *  @dev Get member interest index\n     *  @param account Member address\n     *  @return interestIndex\n     */\n    function getInterestIndex(address account) public view returns (uint256 interestIndex) {\n        interestIndex = accountBorrows[account].interestIndex;\n    }\n\n    /**\n     *  @dev Check if the member's loan is overdue\n     *  @param account Member address\n     *  @return isOverdue\n     */\n    function checkIsOverdue(address account) public view returns (bool isOverdue) {\n        if (getBorrowed(account) == 0) {\n            isOverdue = false;\n        } else {\n            uint256 lastRepay = getLastRepay(account);\n            uint256 diff = getBlockNumber() - lastRepay;\n            isOverdue = (overdueBlocks < diff);\n        }\n    }\n\n    /**\n     *  @dev Get the origination fee\n     *  @param amount Amount to be calculated\n     *  @return Handling fee\n     */\n    function calculatingFee(uint256 amount) public view returns (uint256) {\n        return (originationFee * amount) / WAD;\n    }\n\n    /**\n     *  @dev Get member loan data\n     *  @param member Member address\n     *  @return principal totalBorrowed asset apr limit isOverdue lastRepay\n     */\n    function getLoan(address member)\n        public\n        view\n        returns (\n            uint256 principal,\n            uint256 totalBorrowed,\n            address asset,\n            uint256 apr,\n            int256 limit,\n            bool isOverdue,\n            uint256 lastRepay\n        )\n    {\n        principal = accountBorrows[msg.sender].principal;\n        totalBorrowed = borrowBalanceStoredInternal(member);\n        asset = underlying;\n        apr = borrowRatePerBlock();\n        lastRepay = getLastRepay(member);\n        limit = _getCreditLimit(member);\n        isOverdue = checkIsOverdue(member);\n    }\n\n    /**\n     *  @dev Get the borrowed principle\n     *  @param account Member address\n     *  @return borrowed\n     */\n    function getBorrowed(address account) public view returns (uint256 borrowed) {\n        borrowed = accountBorrows[account].principal;\n    }\n\n    /**\n     *  @dev Get a member's current owed balance, including the principle and interest but without updating the user's states.\n     *  @param account Member address\n     *  @return Borrowed amount\n     */\n    function borrowBalanceView(address account) public view returns (uint256) {\n        return accountBorrows[account].principal + calculatingInterest(account);\n    }\n\n    /**\n     *  @dev Get a member's total owed, including the principle and the interest calculated based on the interest index.\n     *  @param account Member address\n     *  @return Borrowed amount\n     */\n    function borrowBalanceStoredInternal(address account) internal view returns (uint256) {\n        BorrowSnapshot memory loan = accountBorrows[account];\n\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\n         */\n        if (loan.principal == 0) {\n            return 0;\n        }\n\n        uint256 principalTimesIndex = (loan.principal + loan.interest) * borrowIndex;\n        return principalTimesIndex / loan.interestIndex;\n    }\n\n    /**\n     *  @dev Get the borrowing interest rate per block\n     *  @return Borrow rate\n     */\n    function borrowRatePerBlock() public view returns (uint256) {\n        uint256 borrowRateMantissa = interestRateModel.getBorrowRate();\n        require(borrowRateMantissa <= BORROW_RATE_MAX_MANTISSA, \"borrow rate is absurdly high\");\n        return borrowRateMantissa;\n    }\n\n    /**\n     * @notice Returns the current per-block supply interest rate for this UToken\n     * @return The supply interest rate per block, scaled by 1e18\n     */\n    function supplyRatePerBlock() public view returns (uint256) {\n        return interestRateModel.getSupplyRate(reserveFactorMantissa);\n    }\n\n    /**\n     * @notice Accrue interest then return the up-to-date exchange rate\n     * @return Calculated exchange rate scaled by 1e18\n     */\n    function exchangeRateCurrent() public nonReentrant returns (uint256) {\n        require(accrueInterest(), \"UToken: accrue interest failed\");\n        return exchangeRateStored();\n    }\n\n    /**\n     * @notice Calculates the exchange rate from the underlying to the UToken\n     * @dev This function does not accrue interest before calculating the exchange rate\n     * @return Calculated exchange rate scaled by 1e18\n     */\n    function exchangeRateStored() public view returns (uint256) {\n        uint256 totalSupply_ = uErc20.totalSupply();\n        if (totalSupply_ == 0) {\n            return initialExchangeRateMantissa;\n        } else {\n            return (totalRedeemable * WAD) / totalSupply_;\n        }\n    }\n\n    /**\n     *  @dev Calculating member's borrowed interest\n     *  @param account Member address\n     *  @return Interest amount\n     */\n    function calculatingInterest(address account) public view returns (uint256) {\n        BorrowSnapshot memory loan = accountBorrows[account];\n\n        if (loan.principal == 0) {\n            return 0;\n        }\n\n        uint256 borrowRate = borrowRatePerBlock();\n        uint256 currentBlockNumber = getBlockNumber();\n        uint256 blockDelta = currentBlockNumber - accrualBlockNumber;\n        uint256 simpleInterestFactor = borrowRate * blockDelta;\n        uint256 borrowIndexNew = (simpleInterestFactor * borrowIndex) / WAD + borrowIndex;\n\n        uint256 principalTimesIndex = (loan.principal + loan.interest) * borrowIndexNew;\n        uint256 balance = principalTimesIndex / loan.interestIndex;\n\n        return balance - accountBorrows[account].principal;\n    }\n\n    /**\n     *  @dev Borrowing from the market\n     *  Accept claims only from the member\n     *  Borrow amount must in the range of creditLimit, minBorrow, maxBorrow, debtCeiling and not overdue\n     *  @param amount Borrow amount\n     */\n    function borrow(uint256 amount) external onlyMember(msg.sender) whenNotPaused nonReentrant {\n        IAssetManager assetManagerContract = IAssetManager(assetManager);\n        require(amount >= minBorrow, \"UToken: amount less than loan size min\");\n\n        require(amount <= getRemainingLoanSize(), \"UToken: amount more than loan global size max\");\n\n        uint256 fee = calculatingFee(amount);\n        require(borrowBalanceView(msg.sender) + amount + fee <= maxBorrow, \"UToken: amount large than borrow size max\");\n\n        require(!checkIsOverdue(msg.sender), \"UToken: Member has loans overdue\");\n\n        require(amount <= assetManagerContract.getLoanableAmount(underlying), \"UToken: Not enough to lend out\");\n        require(\n            uint256(_getCreditLimit(msg.sender)) >= amount + fee,\n            \"UToken: The loan amount plus fee is greater than credit limit\"\n        );\n\n        require(accrueInterest(), \"UToken: accrue interest failed\");\n\n        uint256 borrowedAmount = borrowBalanceStoredInternal(msg.sender);\n\n        //Set lastRepay init data\n        if (accountBorrows[msg.sender].lastRepay == 0) {\n            accountBorrows[msg.sender].lastRepay = getBlockNumber();\n        }\n\n        uint256 accountBorrowsNew = borrowedAmount + amount + fee;\n        uint256 totalBorrowsNew = totalBorrows + amount + fee;\n        uint256 oldPrincipal = accountBorrows[msg.sender].principal;\n\n        accountBorrows[msg.sender].principal += amount + fee;\n        uint256 newPrincipal = accountBorrows[msg.sender].principal;\n        IUserManager(userManager).updateLockedData(msg.sender, newPrincipal - oldPrincipal, true);\n        accountBorrows[msg.sender].interest = accountBorrowsNew - accountBorrows[msg.sender].principal;\n        accountBorrows[msg.sender].interestIndex = borrowIndex;\n        totalBorrows = totalBorrowsNew;\n        // The origination fees contribute to the reserve\n        totalReserves += fee;\n\n        require(assetManagerContract.withdraw(underlying, msg.sender, amount), \"UToken: Failed to withdraw\");\n\n        emit LogBorrow(msg.sender, amount, fee);\n    }\n\n    function repayBorrow(uint256 repayAmount) external whenNotPaused nonReentrant {\n        _repayBorrowFresh(msg.sender, msg.sender, repayAmount);\n    }\n\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external whenNotPaused nonReentrant {\n        _repayBorrowFresh(msg.sender, borrower, repayAmount);\n    }\n\n    /**\n     *  @dev Repay the loan\n     *  Accept claims only from the member\n     *  Updated member lastPaymentEpoch only when the repayment amount is greater than interest\n     *  @param payer Payer address\n     *  @param borrower Borrower address\n     *  @param amount Repay amount\n     */\n    function _repayBorrowFresh(\n        address payer,\n        address borrower,\n        uint256 amount\n    ) private {\n        IUErc20 assetToken = IUErc20(underlying);\n        //In order to prevent the state from being changed, put the value at the top\n        bool isOverdue = checkIsOverdue(borrower);\n        uint256 oldPrincipal = accountBorrows[borrower].principal;\n        require(accrueInterest(), \"UToken: accrue interest failed\");\n        require(accrualBlockNumber == getBlockNumber(), \"UToken: market not fresh\");\n\n        uint256 interest = calculatingInterest(borrower);\n        uint256 borrowedAmount = borrowBalanceStoredInternal(borrower);\n\n        uint256 repayAmount;\n        if (amount > borrowedAmount) {\n            repayAmount = borrowedAmount;\n        } else {\n            repayAmount = amount;\n        }\n\n        require(repayAmount > 0, \"UToken: repay amount or owed amount is zero\");\n\n        require(assetToken.allowance(payer, address(this)) >= repayAmount, \"UToken: Not enough allowance to repay\");\n\n        uint256 toReserveAmount;\n        uint256 toRedeemableAmount;\n        if (repayAmount >= interest) {\n            toReserveAmount = (interest * reserveFactorMantissa) / WAD;\n            toRedeemableAmount = interest - toReserveAmount;\n\n            if (isOverdue) {\n                IUserManager(userManager).updateTotalFrozen(borrower, false);\n                IUserManager(userManager).repayLoanOverdue(borrower, underlying, accountBorrows[borrower].lastRepay);\n            }\n            accountBorrows[borrower].principal = borrowedAmount - repayAmount;\n            accountBorrows[borrower].interest = 0;\n\n            if (accountBorrows[borrower].principal == 0) {\n                //LastRepay is cleared when the arrears are paid off, and reinitialized the next time the loan is borrowed\n                accountBorrows[borrower].lastRepay = 0;\n            } else {\n                accountBorrows[borrower].lastRepay = getBlockNumber();\n            }\n        } else {\n            toReserveAmount = (repayAmount * reserveFactorMantissa) / WAD;\n            toRedeemableAmount = repayAmount - toReserveAmount;\n            accountBorrows[borrower].interest = interest - repayAmount;\n        }\n\n        totalReserves += toReserveAmount;\n        totalRedeemable += toRedeemableAmount;\n\n        uint256 newPrincipal = accountBorrows[borrower].principal;\n        accountBorrows[borrower].interestIndex = borrowIndex;\n        totalBorrows -= repayAmount;\n\n        IUserManager(userManager).updateLockedData(borrower, oldPrincipal - newPrincipal, false);\n\n        assetToken.safeTransferFrom(payer, address(this), repayAmount);\n\n        assetToken.safeApprove(assetManager, 0);\n        assetToken.safeApprove(assetManager, repayAmount);\n\n        require(IAssetManager(assetManager).deposit(underlying, repayAmount), \"UToken: Deposit failed\");\n\n        emit LogRepay(borrower, repayAmount);\n    }\n\n    function repayBorrowWithPermit(\n        address borrower,\n        uint256 amount,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public whenNotPaused {\n        IUErc20 erc20Token = IUErc20(underlying);\n        erc20Token.permit(msg.sender, address(this), nonce, expiry, true, v, r, s);\n\n        _repayBorrowFresh(msg.sender, borrower, amount);\n    }\n\n    /**\n     *  @dev Accrue interest\n     *  @return Accrue interest finished\n     */\n    function accrueInterest() public returns (bool) {\n        uint256 borrowRate = borrowRatePerBlock();\n        uint256 currentBlockNumber = getBlockNumber();\n        uint256 blockDelta = currentBlockNumber - accrualBlockNumber;\n\n        uint256 simpleInterestFactor = borrowRate * blockDelta;\n        uint256 interestAccumulated = (simpleInterestFactor * totalBorrows) / WAD;\n        uint256 totalBorrowsNew = interestAccumulated + totalBorrows;\n        uint256 borrowIndexNew = (simpleInterestFactor * borrowIndex) / WAD + borrowIndex;\n\n        accrualBlockNumber = currentBlockNumber;\n        borrowIndex = borrowIndexNew;\n        totalBorrows = totalBorrowsNew;\n\n        return true;\n    }\n\n    /**\n     * @notice Get the underlying balance of the `owner`\n     * @dev This also accrues interest in a transaction\n     * @param owner The address of the account to query\n     * @return The amount of underlying owned by `owner`\n     */\n    function balanceOfUnderlying(address owner) external returns (uint256) {\n        return exchangeRateCurrent() * uErc20.balanceOf(owner);\n    }\n\n    function mint(uint256 mintAmount) external whenNotPaused nonReentrant {\n        require(accrueInterest(), \"UToken: accrue interest failed\");\n        uint256 exchangeRate = exchangeRateStored();\n        IUErc20 assetToken = IUErc20(underlying);\n        uint256 balanceBefore = assetToken.balanceOf(address(this));\n        require(assetToken.allowance(msg.sender, address(this)) >= mintAmount, \"UToken: Not enough allowance\");\n        assetToken.safeTransferFrom(msg.sender, address(this), mintAmount);\n        uint256 balanceAfter = assetToken.balanceOf(address(this));\n        uint256 actualMintAmount = balanceAfter - balanceBefore;\n        totalRedeemable += actualMintAmount;\n        uint256 mintTokens = (actualMintAmount * WAD) / exchangeRate;\n        uErc20.mint(msg.sender, mintTokens);\n\n        assetToken.safeApprove(assetManager, 0);\n        assetToken.safeApprove(assetManager, actualMintAmount);\n\n        require(IAssetManager(assetManager).deposit(underlying, actualMintAmount), \"UToken: Deposit failed\");\n\n        emit LogMint(msg.sender, actualMintAmount, mintTokens);\n    }\n\n    /**\n     * @notice Sender redeems uTokens in exchange for the underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemTokens The number of uTokens to redeem into underlying\n     */\n    function redeem(uint256 redeemTokens) external whenNotPaused nonReentrant {\n        require(accrueInterest(), \"UToken: accrue interest failed\");\n        _redeemFresh(payable(msg.sender), redeemTokens, 0);\n    }\n\n    /**\n     * @notice Sender redeems uTokens in exchange for a specified amount of underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemAmount The amount of underlying to receive from redeeming uTokens\n     */\n    function redeemUnderlying(uint256 redeemAmount) external whenNotPaused nonReentrant {\n        require(accrueInterest(), \"UToken: accrue interest failed\");\n        _redeemFresh(payable(msg.sender), 0, redeemAmount);\n    }\n\n    /**\n     * @notice User redeems uTokens in exchange for the underlying asset\n     * @dev Assumes interest has already been accrued up to the current block\n     * @param redeemer The address of the account which is redeeming the tokens\n     * @param redeemTokensIn The number of uTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming uTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\n     */\n    function _redeemFresh(\n        address payable redeemer,\n        uint256 redeemTokensIn,\n        uint256 redeemAmountIn\n    ) internal {\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \"one of redeemTokensIn or redeemAmountIn must be zero\");\n\n        IAssetManager assetManagerContract = IAssetManager(assetManager);\n\n        uint256 exchangeRate = exchangeRateStored();\n\n        uint256 redeemTokens;\n        uint256 redeemAmount;\n\n        if (redeemTokensIn > 0) {\n            /*\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\n             *  redeemTokens = redeemTokensIn\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\n             */\n            redeemTokens = redeemTokensIn;\n            redeemAmount = (redeemTokensIn * exchangeRate) / WAD;\n        } else {\n            /*\n             * We get the current exchange rate and calculate the amount to be redeemed:\n             *  redeemTokens = redeemAmountIn / exchangeRate\n             *  redeemAmount = redeemAmountIn\n             */\n            redeemTokens = (redeemAmountIn * WAD) / exchangeRate;\n            redeemAmount = redeemAmountIn;\n        }\n\n        require(totalRedeemable >= redeemAmount, \"redeem amount error\");\n        totalRedeemable -= redeemAmount;\n        uErc20.burn(redeemer, redeemTokens);\n\n        require(assetManagerContract.withdraw(underlying, redeemer, redeemAmount), \"UToken: Failed to withdraw\");\n\n        emit LogRedeem(redeemer, redeemTokensIn, redeemAmountIn, redeemAmount);\n    }\n\n    function addReserves(uint256 addAmount) external whenNotPaused nonReentrant {\n        require(accrueInterest(), \"UToken: accrue interest failed\");\n        IUErc20 assetToken = IUErc20(underlying);\n        uint256 balanceBefore = assetToken.balanceOf(address(this));\n        require(assetToken.allowance(msg.sender, address(this)) >= addAmount, \"UToken: Not enough allowance\");\n        assetToken.safeTransferFrom(msg.sender, address(this), addAmount);\n        uint256 balanceAfter = assetToken.balanceOf(address(this));\n        uint256 actualAddAmount = balanceAfter - balanceBefore;\n\n        uint256 totalReservesNew = totalReserves + actualAddAmount;\n        /* Revert on overflow */\n        require(totalReservesNew >= totalReserves, \"add reserves unexpected overflow\");\n        totalReserves = totalReservesNew;\n\n        assetToken.safeApprove(assetManager, 0);\n        assetToken.safeApprove(assetManager, balanceAfter);\n\n        require(IAssetManager(assetManager).deposit(underlying, balanceAfter), \"UToken: Deposit failed\");\n\n        emit LogReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\n    }\n\n    function removeReserves(address receiver, uint256 reduceAmount) external whenNotPaused nonReentrant onlyAdmin {\n        require(accrueInterest(), \"UToken: accrue interest failed\");\n        require(reduceAmount <= totalReserves, \"amount is large than totalReserves\");\n\n        IAssetManager assetManagerContract = IAssetManager(assetManager);\n\n        uint256 totalReservesNew = totalReserves - reduceAmount;\n        // We checked reduceAmount <= totalReserves above, so this should never revert.\n        require(totalReservesNew <= totalReserves, \"reduce reserves unexpected underflow\");\n\n        totalReserves = totalReservesNew;\n\n        require(assetManagerContract.withdraw(underlying, receiver, reduceAmount), \"UToken: Failed to withdraw\");\n\n        emit LogReservesReduced(receiver, reduceAmount, totalReservesNew);\n    }\n\n    function debtWriteOff(address borrower, uint256 amount) external whenNotPaused onlyUserManager {\n        uint256 oldPrincipal = accountBorrows[borrower].principal;\n        uint256 repayAmount;\n        if (amount > oldPrincipal) {\n            repayAmount = oldPrincipal;\n        } else {\n            repayAmount = amount;\n        }\n\n        accountBorrows[borrower].principal = oldPrincipal - repayAmount;\n        totalBorrows -= repayAmount;\n    }\n\n    /**\n     * @dev Function to simply retrieve block number\n     *  This exists mainly for inheriting test contracts to stub this result.\n     */\n    function getBlockNumber() internal view returns (uint256) {\n        return block.number;\n    }\n\n    function _setInterestRateModelFresh(address newInterestRateModel_) private {\n        address oldInterestRateModel = address(interestRateModel);\n        address newInterestRateModel = newInterestRateModel_;\n        require(\n            IInterestRateModel(newInterestRateModel).isInterestRateModel(),\n            \"UToken: new model is not a interestRateModel\"\n        );\n        interestRateModel = IInterestRateModel(newInterestRateModel);\n\n        emit LogNewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\n    }\n\n    /**\n     *  @dev Update borrower overdue info\n     *  @param account Borrower address\n     */\n    function updateOverdueInfo(address account) external whenNotPaused {\n        if (checkIsOverdue(account)) {\n            IUserManager(userManager).updateTotalFrozen(account, true);\n        }\n    }\n\n    /**\n     *  @dev Batch update borrower overdue info\n     *  @param accounts Borrowers address\n     */\n    function batchUpdateOverdueInfos(address[] calldata accounts) external whenNotPaused {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            if (checkIsOverdue(accounts[i])) {\n                IUserManager(userManager).updateTotalFrozen(accounts[i], true);\n            }\n        }\n    }\n\n    /**\n     *  @dev Get a member's available credit limit\n     *  @param account Member address\n     *  @return Member credit limit\n     */\n    function _getCreditLimit(address account) private view returns (int256) {\n        return IUserManager(userManager).getCreditLimit(account);\n    }\n}\n"
    },
    "contracts/interfaces/IUErc20.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\n\ninterface IUErc20 is IERC20MetadataUpgradeable {\n    function mint(address account, uint256 amount) external;\n\n    function burn(address account, uint256 amount) external;\n\n    function permit(\n        address holder,\n        address spender,\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "contracts/interfaces/IInterestRateModel.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\n/**\n * @title InterestRateModel Interface\n *  @dev Calculate the borrowers' interest rate.\n */\ninterface IInterestRateModel {\n    /**\n     * @dev Check to see if it is a valid interest rate model\n     * @return Return true for a valid interest rate model\n     */\n    function isInterestRateModel() external pure returns (bool);\n\n    /**\n     * @dev Calculates the current borrow interest rate per block\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\n     */\n    function getBorrowRate() external view returns (uint256);\n\n    /**\n     * @dev Calculates the current suppier interest rate per block\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\n     */\n    function getSupplyRate(uint256 reserveFactorMantissa) external view returns (uint256);\n\n    /**\n     * @dev Set the borrow interest rate per block\n     */\n    function setInterestRate(uint256 interestRatePerBlock_) external;\n}\n"
    },
    "contracts/market/FixedInterestRateModel.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\npragma abicoder v1;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../interfaces/IInterestRateModel.sol\";\n\ncontract FixedInterestRateModel is Ownable, IInterestRateModel {\n    bool public constant override isInterestRateModel = true;\n    uint256 public interestRatePerBlock;\n\n    /**\n     *  @dev Update interest parameters event\n     *  @param interestRate New interest rate, 1e18 = 100%\n     */\n    event LogNewInterestParams(uint256 interestRate);\n\n    constructor(uint256 interestRatePerBlock_) {\n        interestRatePerBlock = interestRatePerBlock_;\n\n        emit LogNewInterestParams(interestRatePerBlock_);\n    }\n\n    function getBorrowRate() public view override returns (uint256) {\n        return interestRatePerBlock;\n    }\n\n    function getSupplyRate(uint256 reserveFactorMantissa) public view override returns (uint256) {\n        require(reserveFactorMantissa <= 1e18, \"reserveFactorMantissa error\");\n        uint256 ratio = uint256(1e18) - reserveFactorMantissa;\n        return (interestRatePerBlock * ratio) / 1e18;\n    }\n\n    function setInterestRate(uint256 interestRatePerBlock_) external override onlyOwner {\n        interestRatePerBlock = interestRatePerBlock_;\n        emit LogNewInterestParams(interestRatePerBlock_);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/user/SumOfTrust.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../interfaces/ICreditLimitModel.sol\";\n\ncontract SumOfTrust is Ownable, ICreditLimitModel {\n    using Math for uint256;\n\n    bool public constant override isCreditLimitModel = true;\n    uint256 public override effectiveNumber;\n\n    constructor(uint256 effectiveNumber_) {\n        effectiveNumber = effectiveNumber_;\n    }\n\n    function getCreditLimit(uint256[] memory vouchs) public view override returns (uint256) {\n        if (vouchs.length >= effectiveNumber) {\n            uint256 limit;\n            for (uint256 i = 0; i < vouchs.length; i++) {\n                limit += vouchs[i];\n            }\n\n            return limit;\n        } else {\n            return 0;\n        }\n    }\n\n    function getLockedAmount(\n        LockedInfo[] memory array,\n        address account,\n        uint256 amount,\n        bool isIncrease\n    ) public pure override returns (uint256) {\n        if (array.length == 0) return 0;\n\n        uint256 remaining = amount;\n        uint256 newLockedAmount;\n        if (isIncrease) {\n            array = _sortArray(array, true);\n            for (uint256 i = 0; i < array.length; i++) {\n                uint256 remainingVouchingAmount;\n                if (array[i].vouchingAmount > array[i].lockedAmount) {\n                    remainingVouchingAmount = array[i].vouchingAmount - array[i].lockedAmount;\n                } else {\n                    remainingVouchingAmount = 0;\n                }\n\n                if (remainingVouchingAmount > array[i].availableStakingAmount) {\n                    if (array[i].availableStakingAmount > remaining) {\n                        newLockedAmount = array[i].lockedAmount + remaining;\n                        remaining = 0;\n                    } else {\n                        newLockedAmount = array[i].lockedAmount + array[i].availableStakingAmount;\n                        remaining = remaining - array[i].availableStakingAmount;\n                    }\n                } else {\n                    if (remainingVouchingAmount > remaining) {\n                        newLockedAmount = array[i].lockedAmount + remaining;\n                        remaining = 0;\n                    } else {\n                        newLockedAmount = array[i].lockedAmount + remainingVouchingAmount;\n                        remaining -= remainingVouchingAmount;\n                    }\n                }\n\n                if (account == array[i].staker) {\n                    return newLockedAmount;\n                }\n            }\n        } else {\n            array = _sortArray(array, false);\n            for (uint256 i = 0; i < array.length; i++) {\n                if (array[i].lockedAmount > remaining) {\n                    newLockedAmount = array[i].lockedAmount - remaining;\n                    remaining = 0;\n                } else {\n                    newLockedAmount = 0;\n                    remaining -= array[i].lockedAmount;\n                }\n\n                if (account == array[i].staker) {\n                    return newLockedAmount;\n                }\n            }\n        }\n\n        return 0;\n    }\n\n    function setEffectNumber(uint256 number) external onlyOwner {\n        effectiveNumber = number;\n    }\n\n    function _sortArray(LockedInfo[] memory arr, bool isPositive) private pure returns (LockedInfo[] memory) {\n        uint256 length = arr.length;\n\n        for (uint256 i = 0; i < length; i++) {\n            for (uint256 j = i + 1; j < length; j++) {\n                if (isPositive) {\n                    if (arr[i].vouchingAmount < arr[j].vouchingAmount) {\n                        LockedInfo memory temp = arr[j];\n                        arr[j] = arr[i];\n                        arr[i] = temp;\n                    }\n                } else {\n                    if (arr[i].vouchingAmount > arr[j].vouchingAmount) {\n                        LockedInfo memory temp = arr[j];\n                        arr[j] = arr[i];\n                        arr[i] = temp;\n                    }\n                }\n            }\n        }\n\n        return arr;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "contracts/user/CreditLimitByMedian.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../interfaces/ICreditLimitModel.sol\";\n\ncontract CreditLimitByMedian is Ownable, ICreditLimitModel {\n    using Math for uint256;\n\n    bool public constant override isCreditLimitModel = true;\n    uint256 public override effectiveNumber;\n\n    constructor(uint256 effectiveNumber_) {\n        effectiveNumber = effectiveNumber_;\n    }\n\n    function getCreditLimit(uint256[] memory vouchs) public view override returns (uint256) {\n        if (vouchs.length >= effectiveNumber) {\n            return _findMedian(vouchs);\n        } else {\n            return 0;\n        }\n    }\n\n    function getLockedAmount(\n        LockedInfo[] memory array,\n        address account,\n        uint256 amount,\n        bool isIncrease\n    ) public pure override returns (uint256) {\n        if (array.length == 0) return 0;\n\n        uint256 newLockedAmount;\n        if (isIncrease) {\n            for (uint256 i = 0; i < array.length; i++) {\n                uint256 remainingVouchingAmount;\n                if (array[i].vouchingAmount > array[i].lockedAmount) {\n                    remainingVouchingAmount = array[i].vouchingAmount - array[i].lockedAmount;\n                } else {\n                    remainingVouchingAmount = 0;\n                }\n\n                if (remainingVouchingAmount > array[i].availableStakingAmount) {\n                    if (array[i].availableStakingAmount > amount) {\n                        newLockedAmount = array[i].lockedAmount + amount;\n                    } else {\n                        newLockedAmount = array[i].lockedAmount + array[i].availableStakingAmount;\n                    }\n                } else {\n                    if (remainingVouchingAmount > amount) {\n                        newLockedAmount = array[i].lockedAmount + amount;\n                    } else {\n                        newLockedAmount = array[i].lockedAmount + remainingVouchingAmount;\n                    }\n                }\n\n                if (account == array[i].staker) {\n                    return newLockedAmount;\n                }\n            }\n        } else {\n            for (uint256 i = 0; i < array.length; i++) {\n                if (array[i].lockedAmount > amount) {\n                    newLockedAmount = array[i].lockedAmount - 1;\n                } else {\n                    newLockedAmount = 0;\n                }\n\n                if (account == array[i].staker) {\n                    return newLockedAmount;\n                }\n            }\n        }\n\n        return 0;\n    }\n\n    function setEffectNumber(uint256 number) external onlyOwner {\n        effectiveNumber = number;\n    }\n\n    /**\n     *  @dev Find median from uint array\n     *  @param array array\n     *  @return uint256\n     */\n    function _findMedian(uint256[] memory array) private pure returns (uint256) {\n        uint256[] memory arr = _sortArray(array);\n        if (arr.length == 0) return 0;\n\n        if (arr.length % 2 == 0) {\n            uint256 num1 = arr[arr.length >> 1];\n            uint256 num2 = arr[(arr.length >> 1) - 1];\n            return num1.average(num2);\n        } else {\n            return arr[arr.length >> 1];\n        }\n    }\n\n    /**\n     *  @dev Sort uint array\n     *  @param arr array\n     *  @return uint256 array\n     */\n    function _sortArray(uint256[] memory arr) private pure returns (uint256[] memory) {\n        uint256 length = arr.length;\n\n        for (uint256 i = 0; i < length; i++) {\n            for (uint256 j = i + 1; j < length; j++) {\n                if (arr[i] < arr[j]) {\n                    uint256 temp = arr[j];\n                    arr[j] = arr[i];\n                    arr[i] = temp;\n                }\n            }\n        }\n\n        return arr;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./draft-ERC20Permit.sol\";\nimport \"../../../utils/math/Math.sol\";\nimport \"../../../utils/math/SafeCast.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\n\n/**\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\n *\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\n *\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\n *\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\n * Enabling self-delegation can easily be done by overriding the {delegates} function. Keep in mind however that this\n * will significantly increase the base gas cost of transfers.\n *\n * _Available since v4.2._\n */\nabstract contract ERC20Votes is ERC20Permit {\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint224 votes;\n    }\n\n    bytes32 private constant _DELEGATION_TYPEHASH =\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    mapping(address => address) private _delegates;\n    mapping(address => Checkpoint[]) private _checkpoints;\n    Checkpoint[] private _totalSupplyCheckpoints;\n\n    /**\n     * @dev Emitted when an account changes their delegate.\n     */\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /**\n     * @dev Emitted when a token transfer or delegate change results in changes to an account's voting power.\n     */\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    /**\n     * @dev Get the `pos`-th checkpoint for `account`.\n     */\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\n        return _checkpoints[account][pos];\n    }\n\n    /**\n     * @dev Get number of checkpoints for `account`.\n     */\n    function numCheckpoints(address account) public view virtual returns (uint32) {\n        return SafeCast.toUint32(_checkpoints[account].length);\n    }\n\n    /**\n     * @dev Get the address `account` is currently delegating to.\n     */\n    function delegates(address account) public view virtual returns (address) {\n        return _delegates[account];\n    }\n\n    /**\n     * @dev Gets the current votes balance for `account`\n     */\n    function getVotes(address account) public view returns (uint256) {\n        uint256 pos = _checkpoints[account].length;\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\n    }\n\n    /**\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\n     *\n     * Requirements:\n     *\n     * - `blockNumber` must have been already mined\n     */\n    function getPastVotes(address account, uint256 blockNumber) public view returns (uint256) {\n        require(blockNumber < block.number, \"ERC20Votes: block not yet mined\");\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\n    }\n\n    /**\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\n     * It is but NOT the sum of all the delegated votes!\n     *\n     * Requirements:\n     *\n     * - `blockNumber` must have been already mined\n     */\n    function getPastTotalSupply(uint256 blockNumber) public view returns (uint256) {\n        require(blockNumber < block.number, \"ERC20Votes: block not yet mined\");\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\n    }\n\n    /**\n     * @dev Lookup a value in a list of (sorted) checkpoints.\n     */\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\n        //\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\n        // the same.\n        uint256 high = ckpts.length;\n        uint256 low = 0;\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (ckpts[mid].fromBlock > blockNumber) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        return high == 0 ? 0 : ckpts[high - 1].votes;\n    }\n\n    /**\n     * @dev Delegate votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) public virtual {\n        return _delegate(_msgSender(), delegatee);\n    }\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(block.timestamp <= expiry, \"ERC20Votes: signature expired\");\n        address signer = ECDSA.recover(\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\n            v,\n            r,\n            s\n        );\n        require(nonce == _useNonce(signer), \"ERC20Votes: invalid nonce\");\n        return _delegate(signer, delegatee);\n    }\n\n    /**\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\n     */\n    function _maxSupply() internal view virtual returns (uint224) {\n        return type(uint224).max;\n    }\n\n    /**\n     * @dev Snapshots the totalSupply after it has been increased.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        super._mint(account, amount);\n        require(totalSupply() <= _maxSupply(), \"ERC20Votes: total supply risks overflowing votes\");\n\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\n    }\n\n    /**\n     * @dev Snapshots the totalSupply after it has been decreased.\n     */\n    function _burn(address account, uint256 amount) internal virtual override {\n        super._burn(account, amount);\n\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\n    }\n\n    /**\n     * @dev Move voting power when tokens are transferred.\n     *\n     * Emits a {DelegateVotesChanged} event.\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._afterTokenTransfer(from, to, amount);\n\n        _moveVotingPower(delegates(from), delegates(to), amount);\n    }\n\n    /**\n     * @dev Change delegation for `delegator` to `delegatee`.\n     *\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\n     */\n    function _delegate(address delegator, address delegatee) internal virtual {\n        address currentDelegate = delegates(delegator);\n        uint256 delegatorBalance = balanceOf(delegator);\n        _delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _moveVotingPower(\n        address src,\n        address dst,\n        uint256 amount\n    ) private {\n        if (src != dst && amount > 0) {\n            if (src != address(0)) {\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\n            }\n\n            if (dst != address(0)) {\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        Checkpoint[] storage ckpts,\n        function(uint256, uint256) view returns (uint256) op,\n        uint256 delta\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\n        uint256 pos = ckpts.length;\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\n        newWeight = op(oldWeight, delta);\n\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\n            ckpts[pos - 1].votes = SafeCast.toUint224(newWeight);\n        } else {\n            ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(block.number), votes: SafeCast.toUint224(newWeight)}));\n        }\n    }\n\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\n        return a + b;\n    }\n\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\n        return a - b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/market/UErc20.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\npragma abicoder v1;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract UErc20 is ERC20Permit, Ownable {\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) ERC20Permit(name) {} // solhint-disable-line no-empty-blocks\n\n    function mint(address account, uint256 amount) external onlyOwner {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) external onlyOwner {\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/compatibility/GovernorCompatibilityBravo.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/Counters.sol\";\nimport \"../../utils/math/SafeCast.sol\";\nimport \"../extensions/IGovernorTimelock.sol\";\nimport \"../extensions/GovernorProposalThreshold.sol\";\nimport \"../Governor.sol\";\nimport \"./IGovernorCompatibilityBravo.sol\";\n\n/**\n * @dev Compatibility layer that implements GovernorBravo compatibility on to of {Governor}.\n *\n * This compatibility layer includes a voting system and requires a {IGovernorTimelock} compatible module to be added\n * through inheritance. It does not include token bindings, not does it include any variable upgrade patterns.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorCompatibilityBravo is\n    IGovernorTimelock,\n    IGovernorCompatibilityBravo,\n    Governor,\n    GovernorProposalThreshold\n{\n    using Counters for Counters.Counter;\n    using Timers for Timers.BlockNumber;\n\n    enum VoteType {\n        Against,\n        For,\n        Abstain\n    }\n\n    struct ProposalDetails {\n        address proposer;\n        address[] targets;\n        uint256[] values;\n        string[] signatures;\n        bytes[] calldatas;\n        uint256 forVotes;\n        uint256 againstVotes;\n        uint256 abstainVotes;\n        mapping(address => Receipt) receipts;\n        bytes32 descriptionHash;\n    }\n\n    mapping(uint256 => ProposalDetails) private _proposalDetails;\n\n    // solhint-disable-next-line func-name-mixedcase\n    function COUNTING_MODE() public pure virtual override returns (string memory) {\n        return \"support=bravo&quorum=bravo\";\n    }\n\n    // ============================================== Proposal lifecycle ==============================================\n    /**\n     * @dev See {IGovernor-propose}.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual override(IGovernor, Governor, GovernorProposalThreshold) returns (uint256) {\n        _storeProposal(_msgSender(), targets, values, new string[](calldatas.length), calldatas, description);\n        return super.propose(targets, values, calldatas, description);\n    }\n\n    /**\n     * @dev See {IGovernorCompatibilityBravo-propose}.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        string[] memory signatures,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual override returns (uint256) {\n        _storeProposal(_msgSender(), targets, values, signatures, calldatas, description);\n        return propose(targets, values, _encodeCalldata(signatures, calldatas), description);\n    }\n\n    /**\n     * @dev See {IGovernorCompatibilityBravo-queue}.\n     */\n    function queue(uint256 proposalId) public virtual override {\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        queue(\n            details.targets,\n            details.values,\n            _encodeCalldata(details.signatures, details.calldatas),\n            details.descriptionHash\n        );\n    }\n\n    /**\n     * @dev See {IGovernorCompatibilityBravo-execute}.\n     */\n    function execute(uint256 proposalId) public payable virtual override {\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        execute(\n            details.targets,\n            details.values,\n            _encodeCalldata(details.signatures, details.calldatas),\n            details.descriptionHash\n        );\n    }\n\n    function cancel(uint256 proposalId) public virtual override {\n        ProposalDetails storage details = _proposalDetails[proposalId];\n\n        require(\n            _msgSender() == details.proposer || getVotes(details.proposer, block.number - 1) < proposalThreshold(),\n            \"GovernorBravo: proposer above threshold\"\n        );\n\n        _cancel(\n            details.targets,\n            details.values,\n            _encodeCalldata(details.signatures, details.calldatas),\n            details.descriptionHash\n        );\n    }\n\n    /**\n     * @dev Encodes calldatas with optional function signature.\n     */\n    function _encodeCalldata(string[] memory signatures, bytes[] memory calldatas)\n        private\n        pure\n        returns (bytes[] memory)\n    {\n        bytes[] memory fullcalldatas = new bytes[](calldatas.length);\n\n        for (uint256 i = 0; i < signatures.length; ++i) {\n            fullcalldatas[i] = bytes(signatures[i]).length == 0\n                ? calldatas[i]\n                : abi.encodeWithSignature(signatures[i], calldatas[i]);\n        }\n\n        return fullcalldatas;\n    }\n\n    /**\n     * @dev Store proposal metadata for later lookup\n     */\n    function _storeProposal(\n        address proposer,\n        address[] memory targets,\n        uint256[] memory values,\n        string[] memory signatures,\n        bytes[] memory calldatas,\n        string memory description\n    ) private {\n        bytes32 descriptionHash = keccak256(bytes(description));\n        uint256 proposalId = hashProposal(targets, values, _encodeCalldata(signatures, calldatas), descriptionHash);\n\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        if (details.descriptionHash == bytes32(0)) {\n            details.proposer = proposer;\n            details.targets = targets;\n            details.values = values;\n            details.signatures = signatures;\n            details.calldatas = calldatas;\n            details.descriptionHash = descriptionHash;\n        }\n    }\n\n    // ==================================================== Views =====================================================\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_.\n     */\n    function proposalThreshold()\n        public\n        view\n        virtual\n        override(IGovernorCompatibilityBravo, GovernorProposalThreshold)\n        returns (uint256);\n\n    /**\n     * @dev See {IGovernorCompatibilityBravo-proposals}.\n     */\n    function proposals(uint256 proposalId)\n        public\n        view\n        virtual\n        override\n        returns (\n            uint256 id,\n            address proposer,\n            uint256 eta,\n            uint256 startBlock,\n            uint256 endBlock,\n            uint256 forVotes,\n            uint256 againstVotes,\n            uint256 abstainVotes,\n            bool canceled,\n            bool executed\n        )\n    {\n        id = proposalId;\n        eta = proposalEta(proposalId);\n        startBlock = proposalSnapshot(proposalId);\n        endBlock = proposalDeadline(proposalId);\n\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        proposer = details.proposer;\n        forVotes = details.forVotes;\n        againstVotes = details.againstVotes;\n        abstainVotes = details.abstainVotes;\n\n        ProposalState status = state(proposalId);\n        canceled = status == ProposalState.Canceled;\n        executed = status == ProposalState.Executed;\n    }\n\n    /**\n     * @dev See {IGovernorCompatibilityBravo-getActions}.\n     */\n    function getActions(uint256 proposalId)\n        public\n        view\n        virtual\n        override\n        returns (\n            address[] memory targets,\n            uint256[] memory values,\n            string[] memory signatures,\n            bytes[] memory calldatas\n        )\n    {\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        return (details.targets, details.values, details.signatures, details.calldatas);\n    }\n\n    /**\n     * @dev See {IGovernorCompatibilityBravo-getReceipt}.\n     */\n    function getReceipt(uint256 proposalId, address voter) public view virtual override returns (Receipt memory) {\n        return _proposalDetails[proposalId].receipts[voter];\n    }\n\n    /**\n     * @dev See {IGovernorCompatibilityBravo-quorumVotes}.\n     */\n    function quorumVotes() public view virtual override returns (uint256) {\n        return quorum(block.number - 1);\n    }\n\n    // ==================================================== Voting ====================================================\n    /**\n     * @dev See {IGovernor-hasVoted}.\n     */\n    function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\n        return _proposalDetails[proposalId].receipts[account].hasVoted;\n    }\n\n    /**\n     * @dev See {Governor-_quorumReached}. In this module, only forVotes count toward the quorum.\n     */\n    function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        return quorum(proposalSnapshot(proposalId)) < details.forVotes;\n    }\n\n    /**\n     * @dev See {Governor-_voteSucceeded}. In this module, the forVotes must be scritly over the againstVotes.\n     */\n    function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        return details.forVotes > details.againstVotes;\n    }\n\n    /**\n     * @dev See {Governor-_countVote}. In this module, the support follows Governor Bravo.\n     */\n    function _countVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        uint256 weight\n    ) internal virtual override {\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        Receipt storage receipt = details.receipts[account];\n\n        require(!receipt.hasVoted, \"GovernorCompatibilityBravo: vote already cast\");\n        receipt.hasVoted = true;\n        receipt.support = support;\n        receipt.votes = SafeCast.toUint96(weight);\n\n        if (support == uint8(VoteType.Against)) {\n            details.againstVotes += weight;\n        } else if (support == uint8(VoteType.For)) {\n            details.forVotes += weight;\n        } else if (support == uint8(VoteType.Abstain)) {\n            details.abstainVotes += weight;\n        } else {\n            revert(\"GovernorCompatibilityBravo: invalid vote type\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IGovernor.sol\";\n\n/**\n * @dev Extension of the {IGovernor} for timelock supporting modules.\n *\n * _Available since v4.3._\n */\nabstract contract IGovernorTimelock is IGovernor {\n    event ProposalQueued(uint256 proposalId, uint256 eta);\n\n    function timelock() public view virtual returns (address);\n\n    function proposalEta(uint256 proposalId) public view virtual returns (uint256);\n\n    function queue(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public virtual returns (uint256 proposalId);\n}\n"
    },
    "@openzeppelin/contracts/governance/extensions/GovernorProposalThreshold.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../Governor.sol\";\n\n/**\n * @dev Extension of {Governor} for proposal restriction to token holders with a minimum balance.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorProposalThreshold is Governor {\n    /**\n     * @dev See {IGovernor-propose}.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual override returns (uint256) {\n        require(\n            getVotes(msg.sender, block.number - 1) >= proposalThreshold(),\n            \"GovernorCompatibilityBravo: proposer votes below proposal threshold\"\n        );\n\n        return super.propose(targets, values, calldatas, description);\n    }\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_.\n     */\n    function proposalThreshold() public view virtual returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/governance/Governor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/cryptography/ECDSA.sol\";\nimport \"../utils/cryptography/draft-EIP712.sol\";\nimport \"../utils/introspection/ERC165.sol\";\nimport \"../utils/math/SafeCast.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Timers.sol\";\nimport \"./IGovernor.sol\";\n\n/**\n * @dev Core of the governance system, designed to be extended though various modules.\n *\n * This contract is abstract and requires several function to be implemented in various modules:\n *\n * - A counting module must implement {quorum}, {_quorumReached}, {_voteSucceeded} and {_countVote}\n * - A voting module must implement {getVotes}\n * - Additionanly, the {votingPeriod} must also be implemented\n *\n * _Available since v4.3._\n */\nabstract contract Governor is Context, ERC165, EIP712, IGovernor {\n    using SafeCast for uint256;\n    using Timers for Timers.BlockNumber;\n\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\"Ballot(uint256 proposalId,uint8 support)\");\n\n    struct ProposalCore {\n        Timers.BlockNumber voteStart;\n        Timers.BlockNumber voteEnd;\n        bool executed;\n        bool canceled;\n    }\n\n    string private _name;\n\n    mapping(uint256 => ProposalCore) private _proposals;\n\n    /**\n     * @dev Restrict access to governor executing address. Some module might override the _executor function to make\n     * sure this modifier is consistant with the execution model.\n     */\n    modifier onlyGovernance() {\n        require(_msgSender() == _executor(), \"Governor: onlyGovernance\");\n        _;\n    }\n\n    /**\n     * @dev Sets the value for {name} and {version}\n     */\n    constructor(string memory name_) EIP712(name_, version()) {\n        _name = name_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IGovernor).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IGovernor-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IGovernor-version}.\n     */\n    function version() public view virtual override returns (string memory) {\n        return \"1\";\n    }\n\n    /**\n     * @dev See {IGovernor-hashProposal}.\n     *\n     * The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array\n     * and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id\n     * can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in\n     * advance, before the proposal is submitted.\n     *\n     * Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the\n     * same proposal (with same operation and same description) will have the same id if submitted on multiple governors\n     * accross multiple networks. This also means that in order to execute the same operation twice (on the same\n     * governor) the proposer will have to change the description in order to avoid proposal id conflicts.\n     */\n    function hashProposal(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public pure virtual override returns (uint256) {\n        return uint256(keccak256(abi.encode(targets, values, calldatas, descriptionHash)));\n    }\n\n    /**\n     * @dev See {IGovernor-state}.\n     */\n    function state(uint256 proposalId) public view virtual override returns (ProposalState) {\n        ProposalCore memory proposal = _proposals[proposalId];\n\n        if (proposal.executed) {\n            return ProposalState.Executed;\n        } else if (proposal.canceled) {\n            return ProposalState.Canceled;\n        } else if (proposal.voteStart.isPending()) {\n            return ProposalState.Pending;\n        } else if (proposal.voteEnd.isPending()) {\n            return ProposalState.Active;\n        } else if (proposal.voteEnd.isExpired()) {\n            return\n                _quorumReached(proposalId) && _voteSucceeded(proposalId)\n                    ? ProposalState.Succeeded\n                    : ProposalState.Defeated;\n        } else {\n            revert(\"Governor: unknown proposal id\");\n        }\n    }\n\n    /**\n     * @dev See {IGovernor-proposalSnapshot}.\n     */\n    function proposalSnapshot(uint256 proposalId) public view virtual override returns (uint256) {\n        return _proposals[proposalId].voteStart.getDeadline();\n    }\n\n    /**\n     * @dev See {IGovernor-proposalDeadline}.\n     */\n    function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {\n        return _proposals[proposalId].voteEnd.getDeadline();\n    }\n\n    /**\n     * @dev Amount of votes already cast passes the threshold limit.\n     */\n    function _quorumReached(uint256 proposalId) internal view virtual returns (bool);\n\n    /**\n     * @dev Is the proposal successful or not.\n     */\n    function _voteSucceeded(uint256 proposalId) internal view virtual returns (bool);\n\n    /**\n     * @dev Register a vote with a given support and voting weight.\n     *\n     * Note: Support is generic and can represent various things depending on the voting system used.\n     */\n    function _countVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        uint256 weight\n    ) internal virtual;\n\n    /**\n     * @dev See {IGovernor-propose}.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual override returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));\n\n        require(targets.length == values.length, \"Governor: invalid proposal length\");\n        require(targets.length == calldatas.length, \"Governor: invalid proposal length\");\n        require(targets.length > 0, \"Governor: empty proposal\");\n\n        ProposalCore storage proposal = _proposals[proposalId];\n        require(proposal.voteStart.isUnset(), \"Governor: proposal already exists\");\n\n        uint64 snapshot = block.number.toUint64() + votingDelay().toUint64();\n        uint64 deadline = snapshot + votingPeriod().toUint64();\n\n        proposal.voteStart.setDeadline(snapshot);\n        proposal.voteEnd.setDeadline(deadline);\n\n        emit ProposalCreated(\n            proposalId,\n            _msgSender(),\n            targets,\n            values,\n            new string[](targets.length),\n            calldatas,\n            snapshot,\n            deadline,\n            description\n        );\n\n        return proposalId;\n    }\n\n    /**\n     * @dev See {IGovernor-execute}.\n     */\n    function execute(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public payable virtual override returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n\n        ProposalState status = state(proposalId);\n        require(\n            status == ProposalState.Succeeded || status == ProposalState.Queued,\n            \"Governor: proposal not successful\"\n        );\n        _proposals[proposalId].executed = true;\n\n        emit ProposalExecuted(proposalId);\n\n        _execute(proposalId, targets, values, calldatas, descriptionHash);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Internal execution mechanism. Can be overriden to implement different execution mechanism\n     */\n    function _execute(\n        uint256, /* proposalId */\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 /*descriptionHash*/\n    ) internal virtual {\n        string memory errorMessage = \"Governor: call reverted without message\";\n        for (uint256 i = 0; i < targets.length; ++i) {\n            (bool success, bytes memory returndata) = targets[i].call{value: values[i]}(calldatas[i]);\n            Address.verifyCallResult(success, returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Internal cancel mechanism: locks up the proposal timer, preventing it from being re-submitted. Marks it as\n     * canceled to allow distinguishing it from executed proposals.\n     *\n     * Emits a {IGovernor-ProposalCanceled} event.\n     */\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n        ProposalState status = state(proposalId);\n\n        require(\n            status != ProposalState.Canceled && status != ProposalState.Expired && status != ProposalState.Executed,\n            \"Governor: proposal not active\"\n        );\n        _proposals[proposalId].canceled = true;\n\n        emit ProposalCanceled(proposalId);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev See {IGovernor-castVote}.\n     */\n    function castVote(uint256 proposalId, uint8 support) public virtual override returns (uint256) {\n        address voter = _msgSender();\n        return _castVote(proposalId, voter, support, \"\");\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteWithReason}.\n     */\n    function castVoteWithReason(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason\n    ) public virtual override returns (uint256) {\n        address voter = _msgSender();\n        return _castVote(proposalId, voter, support, reason);\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteBySig}.\n     */\n    function castVoteBySig(\n        uint256 proposalId,\n        uint8 support,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override returns (uint256) {\n        address voter = ECDSA.recover(\n            _hashTypedDataV4(keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support))),\n            v,\n            r,\n            s\n        );\n        return _castVote(proposalId, voter, support, \"\");\n    }\n\n    /**\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function.\n     *\n     * Emits a {IGovernor-VoteCast} event.\n     */\n    function _castVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        string memory reason\n    ) internal virtual returns (uint256) {\n        ProposalCore storage proposal = _proposals[proposalId];\n        require(state(proposalId) == ProposalState.Active, \"Governor: vote not currently active\");\n\n        uint256 weight = getVotes(account, proposal.voteStart.getDeadline());\n        _countVote(proposalId, account, support, weight);\n\n        emit VoteCast(account, proposalId, support, weight, reason);\n\n        return weight;\n    }\n\n    /**\n     * @dev Address through which the governor executes action. Will be overloaded by module that execute actions\n     * through another contract such as a timelock.\n     */\n    function _executor() internal view virtual returns (address) {\n        return address(this);\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/compatibility/IGovernorCompatibilityBravo.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IGovernor.sol\";\n\n/**\n * @dev Interface extension that adds missing functions to the {Governor} core to provide `GovernorBravo` compatibility.\n *\n * _Available since v4.3._\n */\nabstract contract IGovernorCompatibilityBravo is IGovernor {\n    /**\n     * @dev Proposal structure from Compound Governor Bravo. Not actually used by the compatibility layer, as\n     * {{proposal}} returns a very different structure.\n     */\n    struct Proposal {\n        uint256 id;\n        address proposer;\n        uint256 eta;\n        address[] targets;\n        uint256[] values;\n        string[] signatures;\n        bytes[] calldatas;\n        uint256 startBlock;\n        uint256 endBlock;\n        uint256 forVotes;\n        uint256 againstVotes;\n        uint256 abstainVotes;\n        bool canceled;\n        bool executed;\n        mapping(address => Receipt) receipts;\n    }\n\n    /**\n     * @dev Receipt structure from Compound Governor Bravo\n     */\n    struct Receipt {\n        bool hasVoted;\n        uint8 support;\n        uint96 votes;\n    }\n\n    /**\n     * @dev Part of the Governor Bravo's interface.\n     */\n    function quorumVotes() public view virtual returns (uint256);\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"The official record of all proposals ever proposed\"_.\n     */\n    function proposals(uint256)\n        public\n        view\n        virtual\n        returns (\n            uint256 id,\n            address proposer,\n            uint256 eta,\n            uint256 startBlock,\n            uint256 endBlock,\n            uint256 forVotes,\n            uint256 againstVotes,\n            uint256 abstainVotes,\n            bool canceled,\n            bool executed\n        );\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"Function used to propose a new proposal\"_.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        string[] memory signatures,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual returns (uint256);\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"Queues a proposal of state succeeded\"_.\n     */\n    function queue(uint256 proposalId) public virtual;\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"Executes a queued proposal if eta has passed\"_.\n     */\n    function execute(uint256 proposalId) public payable virtual;\n\n    /**\n     * @dev Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold.\n     */\n    function cancel(uint256 proposalId) public virtual;\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"Gets actions of a proposal\"_.\n     */\n    function getActions(uint256 proposalId)\n        public\n        view\n        virtual\n        returns (\n            address[] memory targets,\n            uint256[] memory values,\n            string[] memory signatures,\n            bytes[] memory calldatas\n        );\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"Gets the receipt for a voter on a given proposal\"_.\n     */\n    function getReceipt(uint256 proposalId, address voter) public view virtual returns (Receipt memory);\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_.\n     */\n    function proposalThreshold() public view virtual returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/governance/IGovernor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Interface of the {Governor} core.\n *\n * _Available since v4.3._\n */\nabstract contract IGovernor is IERC165 {\n    enum ProposalState {\n        Pending,\n        Active,\n        Canceled,\n        Defeated,\n        Succeeded,\n        Queued,\n        Expired,\n        Executed\n    }\n\n    /**\n     * @dev Emitted when a proposal is created.\n     */\n    event ProposalCreated(\n        uint256 proposalId,\n        address proposer,\n        address[] targets,\n        uint256[] values,\n        string[] signatures,\n        bytes[] calldatas,\n        uint256 startBlock,\n        uint256 endBlock,\n        string description\n    );\n\n    /**\n     * @dev Emitted when a proposal is canceled.\n     */\n    event ProposalCanceled(uint256 proposalId);\n\n    /**\n     * @dev Emitted when a proposal is executed.\n     */\n    event ProposalExecuted(uint256 proposalId);\n\n    /**\n     * @dev Emitted when a vote is cast.\n     *\n     * Note: `support` values should be seen as buckets. There interpretation depends on the voting module used.\n     */\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\n\n    /**\n     * @notice module:core\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\n     */\n    function name() public view virtual returns (string memory);\n\n    /**\n     * @notice module:core\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \"1\"\n     */\n    function version() public view virtual returns (string memory);\n\n    /**\n     * @notice module:voting\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\n     *\n     * There are 2 standard keys: `support` and `quorum`.\n     *\n     * - `support=bravo` refers to the vote options 0 = For, 1 = Against, 2 = Abstain, as in `GovernorBravo`.\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\n     *\n     * NOTE: The string can be decoded by the standard\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\n     * JavaScript class.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function COUNTING_MODE() public pure virtual returns (string memory);\n\n    /**\n     * @notice module:core\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\n     */\n    function hashProposal(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata calldatas,\n        bytes32 descriptionHash\n    ) public pure virtual returns (uint256);\n\n    /**\n     * @notice module:core\n     * @dev Current state of a proposal, following Compound's convention\n     */\n    function state(uint256 proposalId) public view virtual returns (ProposalState);\n\n    /**\n     * @notice module:core\n     * @dev block number used to retrieve user's votes and quorum.\n     */\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);\n\n    /**\n     * @notice module:core\n     * @dev timestamp at which votes close.\n     */\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);\n\n    /**\n     * @notice module:user-config\n     * @dev delay, in number of block, between the proposal is created and the vote starts. This can be increassed to\n     * leave time for users to buy voting power, of delegate it, before the voting of a proposal starts.\n     */\n    function votingDelay() public view virtual returns (uint256);\n\n    /**\n     * @notice module:user-config\n     * @dev delay, in number of blocks, between the vote start and vote ends.\n     *\n     * Note: the {votingDelay} can delay the start of the vote. This must be considered when setting the voting\n     * duration compared to the voting delay.\n     */\n    function votingPeriod() public view virtual returns (uint256);\n\n    /**\n     * @notice module:user-config\n     * @dev Minimum number of cast voted required for a proposal to be successful.\n     *\n     * Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the\n     * quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).\n     */\n    function quorum(uint256 blockNumber) public view virtual returns (uint256);\n\n    /**\n     * @notice module:reputation\n     * @dev Voting power of an `account` at a specific `blockNumber`.\n     *\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\n     * multiple), {ERC20Votes} tokens.\n     */\n    function getVotes(address account, uint256 blockNumber) public view virtual returns (uint256);\n\n    /**\n     * @notice module:voting\n     * @dev Returns weither `account` has cast a vote on `proposalId`.\n     */\n    function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);\n\n    /**\n     * @dev Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends\n     * {IGovernor-votingPeriod} blocks after the voting starts.\n     *\n     * Emits a {ProposalCreated} event.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual returns (uint256 proposalId);\n\n    /**\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\n     * deadline to be reached.\n     *\n     * Emits a {ProposalExecuted} event.\n     *\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\n     */\n    function execute(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public payable virtual returns (uint256 proposalId);\n\n    /**\n     * @dev Cast a vote\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);\n\n    /**\n     * @dev Cast a with a reason\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVoteWithReason(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason\n    ) public virtual returns (uint256 balance);\n\n    /**\n     * @dev Cast a vote using the user cryptographic signature.\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVoteBySig(\n        uint256 proposalId,\n        uint8 support,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual returns (uint256 balance);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Timers.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Tooling for timepoints, timers and delays\n */\nlibrary Timers {\n    struct Timestamp {\n        uint64 _deadline;\n    }\n\n    function getDeadline(Timestamp memory timer) internal pure returns (uint64) {\n        return timer._deadline;\n    }\n\n    function setDeadline(Timestamp storage timer, uint64 timestamp) internal {\n        timer._deadline = timestamp;\n    }\n\n    function reset(Timestamp storage timer) internal {\n        timer._deadline = 0;\n    }\n\n    function isUnset(Timestamp memory timer) internal pure returns (bool) {\n        return timer._deadline == 0;\n    }\n\n    function isStarted(Timestamp memory timer) internal pure returns (bool) {\n        return timer._deadline > 0;\n    }\n\n    function isPending(Timestamp memory timer) internal view returns (bool) {\n        return timer._deadline > block.timestamp;\n    }\n\n    function isExpired(Timestamp memory timer) internal view returns (bool) {\n        return isStarted(timer) && timer._deadline <= block.timestamp;\n    }\n\n    struct BlockNumber {\n        uint64 _deadline;\n    }\n\n    function getDeadline(BlockNumber memory timer) internal pure returns (uint64) {\n        return timer._deadline;\n    }\n\n    function setDeadline(BlockNumber storage timer, uint64 timestamp) internal {\n        timer._deadline = timestamp;\n    }\n\n    function reset(BlockNumber storage timer) internal {\n        timer._deadline = 0;\n    }\n\n    function isUnset(BlockNumber memory timer) internal pure returns (bool) {\n        return timer._deadline == 0;\n    }\n\n    function isStarted(BlockNumber memory timer) internal pure returns (bool) {\n        return timer._deadline > 0;\n    }\n\n    function isPending(BlockNumber memory timer) internal view returns (bool) {\n        return timer._deadline > block.number;\n    }\n\n    function isExpired(BlockNumber memory timer) internal view returns (bool) {\n        return isStarted(timer) && timer._deadline <= block.number;\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IGovernorTimelock.sol\";\nimport \"../Governor.sol\";\nimport \"../TimelockController.sol\";\n\n/**\n * @dev Extension of {Governor} that binds the execution process to an instance of {TimelockController}. This adds a\n * delay, enforced by the {TimelockController} to all successful proposal (in addition to the voting duration). The\n * {Governor} needs the proposer (an ideally the executor) roles for the {Governor} to work properly.\n *\n * Using this model means the proposal will be operated by the {TimelockController} and not by the {Governor}. Thus,\n * the assets and permissions must be attached to the {TimelockController}. Any asset sent to the {Governor} will be\n * inaccessible.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorTimelockControl is IGovernorTimelock, Governor {\n    TimelockController private _timelock;\n    mapping(uint256 => bytes32) private _timelockIds;\n\n    /**\n     * @dev Emitted when the timelock controller used for proposal execution is modified.\n     */\n    event TimelockChange(address oldTimelock, address newTimelock);\n\n    /**\n     * @dev Set the timelock.\n     */\n    constructor(TimelockController timelockAddress) {\n        _updateTimelock(timelockAddress);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Governor) returns (bool) {\n        return interfaceId == type(IGovernorTimelock).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Overriden version of the {Governor-state} function with added support for the `Queued` status.\n     */\n    function state(uint256 proposalId) public view virtual override(IGovernor, Governor) returns (ProposalState) {\n        ProposalState status = super.state(proposalId);\n\n        if (status != ProposalState.Succeeded) {\n            return status;\n        }\n\n        // core tracks execution, so we just have to check if successful proposal have been queued.\n        bytes32 queueid = _timelockIds[proposalId];\n        if (queueid == bytes32(0)) {\n            return status;\n        } else if (_timelock.isOperationDone(queueid)) {\n            return ProposalState.Executed;\n        } else {\n            return ProposalState.Queued;\n        }\n    }\n\n    /**\n     * @dev Public accessor to check the address of the timelock\n     */\n    function timelock() public view virtual override returns (address) {\n        return address(_timelock);\n    }\n\n    /**\n     * @dev Public accessor to check the eta of a queued proposal\n     */\n    function proposalEta(uint256 proposalId) public view virtual override returns (uint256) {\n        uint256 eta = _timelock.getTimestamp(_timelockIds[proposalId]);\n        return eta == 1 ? 0 : eta; // _DONE_TIMESTAMP (1) should be replaced with a 0 value\n    }\n\n    /**\n     * @dev Function to queue a proposal to the timelock.\n     */\n    function queue(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public virtual override returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n\n        require(state(proposalId) == ProposalState.Succeeded, \"Governor: proposal not successful\");\n\n        uint256 delay = _timelock.getMinDelay();\n        _timelockIds[proposalId] = _timelock.hashOperationBatch(targets, values, calldatas, 0, descriptionHash);\n        _timelock.scheduleBatch(targets, values, calldatas, 0, descriptionHash, delay);\n\n        emit ProposalQueued(proposalId, block.timestamp + delay);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Overriden execute function that run the already queued proposal through the timelock.\n     */\n    function _execute(\n        uint256, /* proposalId */\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override {\n        _timelock.executeBatch{value: msg.value}(targets, values, calldatas, 0, descriptionHash);\n    }\n\n    /**\n     * @dev Overriden version of the {Governor-_cancel} function to cancel the timelocked proposal if it as already\n     * been queued.\n     */\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override returns (uint256) {\n        uint256 proposalId = super._cancel(targets, values, calldatas, descriptionHash);\n\n        if (_timelockIds[proposalId] != 0) {\n            _timelock.cancel(_timelockIds[proposalId]);\n            delete _timelockIds[proposalId];\n        }\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Address through which the governor executes action. In this case, the timelock.\n     */\n    function _executor() internal view virtual override returns (address) {\n        return address(_timelock);\n    }\n\n    /**\n     * @dev Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates\n     * must be proposed, scheduled and executed using the {Governor} workflow.\n     */\n    function updateTimelock(TimelockController newTimelock) external virtual onlyGovernance {\n        _updateTimelock(newTimelock);\n    }\n\n    function _updateTimelock(TimelockController newTimelock) private {\n        emit TimelockChange(address(_timelock), address(newTimelock));\n        _timelock = newTimelock;\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/TimelockController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../access/AccessControl.sol\";\n\n/**\n * @dev Contract module which acts as a timelocked controller. When set as the\n * owner of an `Ownable` smart contract, it enforces a timelock on all\n * `onlyOwner` maintenance operations. This gives time for users of the\n * controlled contract to exit before a potentially dangerous maintenance\n * operation is applied.\n *\n * By default, this contract is self administered, meaning administration tasks\n * have to go through the timelock process. The proposer (resp executor) role\n * is in charge of proposing (resp executing) operations. A common use case is\n * to position this {TimelockController} as the owner of a smart contract, with\n * a multisig or a DAO as the sole proposer.\n *\n * _Available since v3.3._\n */\ncontract TimelockController is AccessControl {\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\"TIMELOCK_ADMIN_ROLE\");\n    bytes32 public constant PROPOSER_ROLE = keccak256(\"PROPOSER_ROLE\");\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR_ROLE\");\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\n\n    mapping(bytes32 => uint256) private _timestamps;\n    uint256 private _minDelay;\n\n    /**\n     * @dev Emitted when a call is scheduled as part of operation `id`.\n     */\n    event CallScheduled(\n        bytes32 indexed id,\n        uint256 indexed index,\n        address target,\n        uint256 value,\n        bytes data,\n        bytes32 predecessor,\n        uint256 delay\n    );\n\n    /**\n     * @dev Emitted when a call is performed as part of operation `id`.\n     */\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\n\n    /**\n     * @dev Emitted when operation `id` is cancelled.\n     */\n    event Cancelled(bytes32 indexed id);\n\n    /**\n     * @dev Emitted when the minimum delay for future operations is modified.\n     */\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\n\n    /**\n     * @dev Initializes the contract with a given `minDelay`.\n     */\n    constructor(\n        uint256 minDelay,\n        address[] memory proposers,\n        address[] memory executors\n    ) {\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\n\n        // deployer + self administration\n        _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\n\n        // register proposers\n        for (uint256 i = 0; i < proposers.length; ++i) {\n            _setupRole(PROPOSER_ROLE, proposers[i]);\n        }\n\n        // register executors\n        for (uint256 i = 0; i < executors.length; ++i) {\n            _setupRole(EXECUTOR_ROLE, executors[i]);\n        }\n\n        _minDelay = minDelay;\n        emit MinDelayChange(0, minDelay);\n    }\n\n    /**\n     * @dev Modifier to make a function callable only by a certain role. In\n     * addition to checking the sender's role, `address(0)` 's role is also\n     * considered. Granting a role to `address(0)` is equivalent to enabling\n     * this role for everyone.\n     */\n    modifier onlyRoleOrOpenRole(bytes32 role) {\n        if (!hasRole(role, address(0))) {\n            _checkRole(role, _msgSender());\n        }\n        _;\n    }\n\n    /**\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\n     */\n    receive() external payable {}\n\n    /**\n     * @dev Returns whether an id correspond to a registered operation. This\n     * includes both Pending, Ready and Done operations.\n     */\n    function isOperation(bytes32 id) public view virtual returns (bool pending) {\n        return getTimestamp(id) > 0;\n    }\n\n    /**\n     * @dev Returns whether an operation is pending or not.\n     */\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\n        return getTimestamp(id) > _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns whether an operation is ready or not.\n     */\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\n        uint256 timestamp = getTimestamp(id);\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\n    }\n\n    /**\n     * @dev Returns whether an operation is done or not.\n     */\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\n        return getTimestamp(id) == _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\n     * unset operations, 1 for done operations).\n     */\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\n        return _timestamps[id];\n    }\n\n    /**\n     * @dev Returns the minimum delay for an operation to become valid.\n     *\n     * This value can be changed by executing an operation that calls `updateDelay`.\n     */\n    function getMinDelay() public view virtual returns (uint256 duration) {\n        return _minDelay;\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a single\n     * transaction.\n     */\n    function hashOperation(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32 hash) {\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a batch of\n     * transactions.\n     */\n    function hashOperationBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata datas,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32 hash) {\n        return keccak256(abi.encode(targets, values, datas, predecessor, salt));\n    }\n\n    /**\n     * @dev Schedule an operation containing a single transaction.\n     *\n     * Emits a {CallScheduled} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function schedule(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _schedule(id, delay);\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\n    }\n\n    /**\n     * @dev Schedule an operation containing a batch of transactions.\n     *\n     * Emits one {CallScheduled} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function scheduleBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata datas,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == datas.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\n        _schedule(id, delay);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            emit CallScheduled(id, i, targets[i], values[i], datas[i], predecessor, delay);\n        }\n    }\n\n    /**\n     * @dev Schedule an operation that is to becomes valid after a given delay.\n     */\n    function _schedule(bytes32 id, uint256 delay) private {\n        require(!isOperation(id), \"TimelockController: operation already scheduled\");\n        require(delay >= getMinDelay(), \"TimelockController: insufficient delay\");\n        _timestamps[id] = block.timestamp + delay;\n    }\n\n    /**\n     * @dev Cancel an operation.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function cancel(bytes32 id) public virtual onlyRole(PROPOSER_ROLE) {\n        require(isOperationPending(id), \"TimelockController: operation cannot be cancelled\");\n        delete _timestamps[id];\n\n        emit Cancelled(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a single transaction.\n     *\n     * Emits a {CallExecuted} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    function execute(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _beforeCall(id, predecessor);\n        _call(id, 0, target, value, data);\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a batch of transactions.\n     *\n     * Emits one {CallExecuted} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    function executeBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata datas,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == datas.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\n        _beforeCall(id, predecessor);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            _call(id, i, targets[i], values[i], datas[i]);\n        }\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Checks before execution of an operation's calls.\n     */\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \"TimelockController: missing dependency\");\n    }\n\n    /**\n     * @dev Checks after execution of an operation's calls.\n     */\n    function _afterCall(bytes32 id) private {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        _timestamps[id] = _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Execute an operation's call.\n     *\n     * Emits a {CallExecuted} event.\n     */\n    function _call(\n        bytes32 id,\n        uint256 index,\n        address target,\n        uint256 value,\n        bytes calldata data\n    ) private {\n        (bool success, ) = target.call{value: value}(data);\n        require(success, \"TimelockController: underlying transaction reverted\");\n\n        emit CallExecuted(id, index, target, value, data);\n    }\n\n    /**\n     * @dev Changes the minimum timelock duration for future operations.\n     *\n     * Emits a {MinDelayChange} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\n     */\n    function updateDelay(uint256 newDelay) external virtual {\n        require(msg.sender == address(this), \"TimelockController: caller must be timelock\");\n        emit MinDelayChange(_minDelay, newDelay);\n        _minDelay = newDelay;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/extensions/GovernorVotesComp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../Governor.sol\";\nimport \"../../token/ERC20/extensions/ERC20VotesComp.sol\";\n\n/**\n * @dev Extension of {Governor} for voting weight extraction from a Comp token.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorVotesComp is Governor {\n    ERC20VotesComp public immutable token;\n\n    constructor(ERC20VotesComp token_) {\n        token = token_;\n    }\n\n    /**\n     * Read the voting weight from the token's built in snapshot mechanism (see {IGovernor-getVotes}).\n     */\n    function getVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\n        return token.getPriorVotes(account, blockNumber);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20VotesComp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC20Votes.sol\";\n\n/**\n * @dev Extension of ERC20 to support Compound's voting and delegation. This version exactly matches Compound's\n * interface, with the drawback of only supporting supply up to (2^96^ - 1).\n *\n * NOTE: You should use this contract if you need exact compatibility with COMP (for example in order to use your token\n * with Governor Alpha or Bravo) and if you are sure the supply cap of 2^96^ is enough for you. Otherwise, use the\n * {ERC20Votes} variant of this module.\n *\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\n * power can be queried through the public accessors {getCurrentVotes} and {getPriorVotes}.\n *\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\n * Enabling self-delegation can easily be done by overriding the {delegates} function. Keep in mind however that this\n * will significantly increase the base gas cost of transfers.\n *\n * _Available since v4.2._\n */\nabstract contract ERC20VotesComp is ERC20Votes {\n    /**\n     * @dev Comp version of the {getVotes} accessor, with `uint96` return type.\n     */\n    function getCurrentVotes(address account) external view returns (uint96) {\n        return SafeCast.toUint96(getVotes(account));\n    }\n\n    /**\n     * @dev Comp version of the {getPastVotes} accessor, with `uint96` return type.\n     */\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint96) {\n        return SafeCast.toUint96(getPastVotes(account, blockNumber));\n    }\n\n    /**\n     * @dev Maximum token supply. Reduced to `type(uint96).max` (2^96^ - 1) to fit COMP interface.\n     */\n    function _maxSupply() internal view virtual override returns (uint224) {\n        return type(uint96).max;\n    }\n}\n"
    },
    "contracts/token/UnionToken.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20VotesComp.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\nimport \"./Whitelistable.sol\";\n\n/**\n * @title UnionToken Contract\n * @dev Mint and distribute UnionTokens.\n */\ncontract UnionToken is ERC20VotesComp, ERC20Burnable, Whitelistable {\n    //The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH =\n        keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    //The EIP-712 typehash for the delegation struct used by the contract\n    bytes32 public constant DELEGATION_TYPEHASH =\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    bytes32 public constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /// @notice Minimum time between mints\n    uint256 public constant minimumTimeBetweenMints = 1 days * 365;\n\n    /// @notice The timestamp after which minting may occur\n    uint256 public mintingAllowedAfter;\n\n    uint256 public constant INIT_CIRCULATING = 100000000 * 10**18;\n\n    /// @notice Cap on the percentage of totalSupply that can be minted at each mint\n    uint256 public constant mintCap = 4;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 mintingAllowedAfter_\n    ) ERC20(name, symbol) ERC20Permit(name) {\n        require(mintingAllowedAfter_ >= block.timestamp, \"minting can only begin after deployment\");\n\n        //If the balance is not 0, the data has been migrated and it is not a newly deployed contract. At this time, INIT_CIRCULATING tokens are not pre-mined\n        if (balanceOf(msg.sender) == 0) {\n            _mint(msg.sender, INIT_CIRCULATING);\n        }\n\n        mintingAllowedAfter = mintingAllowedAfter_;\n        whitelistEnabled = false;\n        whitelist(msg.sender);\n    }\n\n    function mint(address dst, uint256 amount) external onlyOwner returns (bool) {\n        require(amount <= (totalSupply() * mintCap) / 100, \"exceeded mint cap\");\n\n        _mint(dst, amount);\n\n        return true;\n    }\n\n    function _mint(address account, uint256 amount) internal override(ERC20, ERC20Votes) {\n        super._mint(account, amount);\n        require(block.timestamp >= mintingAllowedAfter, \"minting not allowed yet\");\n\n        // record the mint\n        mintingAllowedAfter = minimumTimeBetweenMints + block.timestamp;\n    }\n\n    function _burn(address account, uint256 amount) internal override(ERC20, ERC20Votes) {\n        super._burn(account, amount);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        if (whitelistEnabled) {\n            require(isWhitelisted(msg.sender) || to == address(0), \"Whitelistable: address not whitelisted\");\n        }\n    }\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override(ERC20, ERC20Votes) {\n        super._afterTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/token/Whitelistable.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\npragma abicoder v1;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nabstract contract Whitelistable is Ownable {\n    // allow all transfers when set as false\n    bool public whitelistEnabled;\n\n    // allow transfers when `whitelistEnabled` is set as true\n    mapping(address => bool) internal _whitelisted;\n\n    event Whitelisted(address indexed _account);\n    event Unwhitelisted(address indexed _account);\n    event WhitelistEnabled();\n    event WhitelistDisabled();\n\n    modifier checkWhitelist() {\n        if (whitelistEnabled) {\n            require(_whitelisted[msg.sender], \"Whitelistable: address not whitelisted\");\n        }\n        _;\n    }\n\n    /**\n     * @notice enable whitelist and only allow transfers from whitelisted addresses\n     */\n    function enableWhitelist() external onlyOwner {\n        whitelistEnabled = true;\n        emit WhitelistEnabled();\n    }\n\n    /**\n     * @notice disable whitelist and allow transfers for everyone\n     */\n    function disableWhitelist() external onlyOwner {\n        whitelistEnabled = false;\n        emit WhitelistDisabled();\n    }\n\n    /**\n     * @dev Checks if account is whitelisted\n     * @param _account The address to check\n     */\n    function isWhitelisted(address _account) public view returns (bool) {\n        return _whitelisted[_account];\n    }\n\n    /**\n     * @dev Adds account to whitelist\n     * @param _account The address to whitelist\n     */\n    function whitelist(address _account) public onlyOwner {\n        _whitelisted[_account] = true;\n        emit Whitelisted(_account);\n    }\n\n    /**\n     * @dev Removes account from whitelist\n     * @param _account The address to remove from the whitelist\n     */\n    function unwhitelist(address _account) external onlyOwner {\n        _whitelisted[_account] = false;\n        emit Unwhitelisted(_account);\n    }\n}\n"
    },
    "contracts/treasury/TreasuryVester.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\npragma abicoder v1;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract TreasuryVester {\n    using SafeERC20 for IERC20;\n\n    address public unionToken;\n    address public recipient;\n    uint256 public vestingAmount;\n    uint256 public vestingBegin;\n    uint256 public vestingCliff;\n    uint256 public vestingEnd;\n    uint256 public lastUpdate;\n\n    constructor(\n        address unionToken_,\n        address recipient_,\n        uint256 vestingAmount_,\n        uint256 vestingBegin_,\n        uint256 vestingCliff_,\n        uint256 vestingEnd_\n    ) {\n        require(vestingBegin_ >= block.timestamp, \"vesting begin too early\");\n        require(vestingCliff_ >= vestingBegin_, \"cliff is too early\");\n        require(vestingEnd_ > vestingCliff_, \"end is too early\");\n\n        unionToken = unionToken_;\n        recipient = recipient_;\n        vestingAmount = vestingAmount_;\n        vestingBegin = vestingBegin_;\n        vestingCliff = vestingCliff_;\n        vestingEnd = vestingEnd_;\n        lastUpdate = vestingBegin;\n    }\n\n    function claim() public {\n        require(block.timestamp >= vestingCliff, \"not time yet\");\n        uint256 amount;\n        if (block.timestamp >= vestingEnd) {\n            amount = IERC20(unionToken).balanceOf(address(this));\n        } else {\n            amount = (vestingAmount * (block.timestamp - lastUpdate)) / (vestingEnd - vestingBegin);\n            lastUpdate = block.timestamp;\n        }\n        IERC20(unionToken).safeTransfer(recipient, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "contracts/UUPSProxy.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\n// Kept for backwards compatibility with older versions of Hardhat and Truffle plugins.\ncontract UUPSProxy is ERC1967Proxy {\n    constructor(\n        address _logic,\n        address, // This is completely unused by the uups proxy, required to remain compatible with hardhat deploy: https://github.com/wighawag/hardhat-deploy/issues/146\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {}\n}\n"
    },
    "contracts/treasury/Treasury.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\npragma abicoder v1;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract Treasury {\n    using SafeERC20 for IERC20;\n\n    /// @notice Reference to token to drip (immutable)\n    IERC20 public immutable token;\n    address public admin;\n\n    struct Schedule {\n        uint256 dripStart; //The block number when the Treasury started (immutable)\n        uint256 amount; //Total amount to drip (immutable)\n        uint256 dripRate; //Tokens per block that to drip to target (immutable)\n        address target; //Target to receive dripped tokens (immutable)\n        uint256 dripped; //Amount that has already been dripped\n    }\n\n    mapping(address => Schedule) public tokenSchedules; //0: target address, 1: Schedule\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"Treasury: not admin\");\n        _;\n    }\n\n    constructor(IERC20 token_) {\n        admin = msg.sender;\n        token = token_;\n    }\n\n    function setAdmin(address admin_) public onlyAdmin {\n        admin = admin_;\n    }\n\n    /**\n     * @notice Drips the maximum amount of tokens to match the drip rate since inception\n     * @dev Note: this will only drip up to the amount of tokens available.\n     * @return The amount of tokens dripped in this call\n     */\n    function drip(address target) public returns (uint256) {\n        require(tokenSchedules[target].target != address(0), \"Target schedule doesn't exist\");\n        // First, read storage into memory\n        IERC20 token_ = token;\n        uint256 dripRate_ = tokenSchedules[target].dripRate;\n        uint256 dripStart_ = tokenSchedules[target].dripStart;\n        uint256 dripped_ = tokenSchedules[target].dripped;\n        address target_ = tokenSchedules[target].target;\n        uint256 totalAmount_ = tokenSchedules[target].amount;\n        uint256 blockNumber_ = block.number;\n\n        require(blockNumber_ >= dripStart_, \"not yet started\");\n        uint256 treasuryBalance_ = token_.balanceOf(address(this)); // TODO: Verify this is a static call\n\n        // Next, calculate intermediate values\n        uint256 dripTotal_ = _min((blockNumber_ - dripStart_) * dripRate_, totalAmount_);\n        uint256 deltaDrip_;\n        if (dripTotal_ > dripped_) {\n            deltaDrip_ = dripTotal_ - dripped_;\n        } else {\n            deltaDrip_ = 0;\n        }\n        uint256 toDrip_ = _min(treasuryBalance_, deltaDrip_);\n        uint256 drippedNext_ = dripped_ + toDrip_;\n\n        // Finally, write new `dripped` value and transfer tokens to target\n        tokenSchedules[target_].dripped = drippedNext_;\n        token_.safeTransfer(target_, toDrip_);\n\n        return toDrip_;\n    }\n\n    function addSchedule(\n        uint256 dripStart_,\n        uint256 dripRate_,\n        address target_,\n        uint256 amount_\n    ) public onlyAdmin {\n        require(tokenSchedules[target_].target == address(0), \"Target schedule already exists\");\n        Schedule memory schedule;\n        schedule.dripStart = dripStart_;\n        schedule.dripRate = dripRate_;\n        schedule.target = target_;\n        schedule.amount = amount_;\n        schedule.dripped = 0;\n        tokenSchedules[target_] = schedule;\n    }\n\n    function editSchedule(\n        uint256 dripStart_,\n        uint256 dripRate_,\n        address target_,\n        uint256 amount_\n    ) public onlyAdmin {\n        require(tokenSchedules[target_].target != address(0), \"Target schedule doesn't exist\");\n        tokenSchedules[target_].dripStart = dripStart_;\n        tokenSchedules[target_].dripRate = dripRate_;\n        tokenSchedules[target_].amount = amount_;\n    }\n\n    function grantToken(address account, uint256 amount) public onlyAdmin {\n        IERC20 token_ = token;\n        uint256 treasuryBalance_ = token_.balanceOf(address(this));\n        require(amount <= treasuryBalance_, \"amount larger than balance\");\n        token_.safeTransfer(account, amount);\n    }\n\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a <= b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n"
    },
    "contracts/tests/UnionTokenMock.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20VotesComp.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\n/**\n * @title UnionToken Contract\n * @dev Mint and distribute UnionTokens.\n */\ncontract UnionTokenMock is ERC20VotesComp, ERC20Burnable {\n    //The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH =\n        keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    //The EIP-712 typehash for the delegation struct used by the contract\n    bytes32 public constant DELEGATION_TYPEHASH =\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    bytes32 public constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /// @notice Minimum time between mints\n    uint256 public constant minimumTimeBetweenMints = 1 days * 365;\n\n    /// @notice The timestamp after which minting may occur\n    uint256 public mintingAllowedAfter;\n\n    uint256 public constant INIT_CIRCULATING = 100000000 * 10**18;\n\n    /// @notice Cap on the percentage of totalSupply that can be minted at each mint\n    uint256 public constant mintCap = 4;\n\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) ERC20Permit(name) {\n        if (balanceOf(msg.sender) == 0) {\n            _mint(msg.sender, INIT_CIRCULATING);\n        }\n    }\n\n    function mint(address dst, uint256 amount) external returns (bool) {\n        require(amount <= (totalSupply() * mintCap) / 100, \"exceeded mint cap\");\n\n        _mint(dst, amount);\n\n        return true;\n    }\n\n    function _mint(address account, uint256 amount) internal override(ERC20, ERC20Votes) {\n        super._mint(account, amount);\n        require(block.timestamp >= mintingAllowedAfter, \"minting not allowed yet\");\n\n        // record the mint\n        mintingAllowedAfter = minimumTimeBetweenMints + block.timestamp;\n    }\n\n    function _burn(address account, uint256 amount) internal override(ERC20, ERC20Votes) {\n        super._burn(account, amount);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override(ERC20, ERC20Votes) {\n        super._afterTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "contracts/governance/UnionGovernor.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/governance/Governor.sol\";\nimport \"@openzeppelin/contracts/governance/compatibility/GovernorCompatibilityBravo.sol\";\nimport \"@openzeppelin/contracts/governance/extensions/GovernorVotesComp.sol\";\nimport \"@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol\";\n\ncontract UnionGovernor is GovernorCompatibilityBravo, GovernorVotesComp, GovernorTimelockControl {\n    uint256 public proposalCount;\n    mapping(address => uint256) public latestProposalIds;\n\n    constructor(ERC20VotesComp _token, TimelockController _timelock)\n        Governor(\"Union Governor\")\n        GovernorVotesComp(_token)\n        GovernorTimelockControl(_timelock)\n    // solhint-disable-next-line no-empty-blocks\n    {\n\n    }\n\n    function votingDelay() public pure virtual override returns (uint256) {\n        return 6575; // 1 day\n    }\n\n    function votingPeriod() public pure virtual override returns (uint256) {\n        return 46027; // 1 week\n    }\n\n    function proposalThreshold() public pure virtual override returns (uint256) {\n        return 50000e18;\n    }\n\n    function quorum(uint256 blockNumber) public view override returns (uint256) {\n        return (token.getPastTotalSupply(blockNumber) * 4e16) / 1e18; //4%\n    }\n\n    function getVotes(address account, uint256 blockNumber)\n        public\n        view\n        override(IGovernor, GovernorVotesComp)\n        returns (uint256)\n    {\n        return super.getVotes(account, blockNumber);\n    }\n\n    function state(uint256 proposalId)\n        public\n        view\n        override(Governor, IGovernor, GovernorTimelockControl)\n        returns (ProposalState)\n    {\n        return super.state(proposalId);\n    }\n\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public override(IGovernor, Governor, GovernorCompatibilityBravo) returns (uint256) {\n        _checkUserLatestProposal();\n        proposalCount++;\n        uint256 proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));\n        latestProposalIds[_msgSender()] = proposalId;\n        return super.propose(targets, values, calldatas, description);\n    }\n\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        string[] memory signatures,\n        bytes[] memory calldatas,\n        string memory description\n    ) public override(GovernorCompatibilityBravo) returns (uint256) {\n        //Will execute propose(address[] memory targets,uint256[] memory values,bytes[] memory calldatas,string memory description).No additional processing logic is required\n        return super.propose(targets, values, signatures, calldatas, description);\n    }\n\n    function _countVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        uint256 weight\n    ) internal override(Governor, GovernorCompatibilityBravo) {\n        return super._countVote(proposalId, account, support, weight);\n    }\n\n    function _quorumReached(uint256 proposalId)\n        internal\n        view\n        override(Governor, GovernorCompatibilityBravo)\n        returns (bool)\n    {\n        return super._quorumReached(proposalId);\n    }\n\n    function _voteSucceeded(uint256 proposalId)\n        internal\n        view\n        override(Governor, GovernorCompatibilityBravo)\n        returns (bool)\n    {\n        return super._voteSucceeded(proposalId);\n    }\n\n    function _execute(\n        uint256 proposalId,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal override(Governor, GovernorTimelockControl) {\n        super._execute(proposalId, targets, values, calldatas, descriptionHash);\n    }\n\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal override(Governor, GovernorTimelockControl) returns (uint256) {\n        return super._cancel(targets, values, calldatas, descriptionHash);\n    }\n\n    function _executor() internal view override(Governor, GovernorTimelockControl) returns (address) {\n        return super._executor();\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(Governor, IERC165, GovernorTimelockControl)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function _checkUserLatestProposal() private view {\n        uint256 latestProposalId = latestProposalIds[_msgSender()];\n        if (latestProposalId != 0) {\n            ProposalState proposersLatestProposalState = state(latestProposalId);\n            require(proposersLatestProposalState != ProposalState.Active, \"Governor: found an already active proposal\");\n            require(\n                proposersLatestProposalState != ProposalState.Pending,\n                \"Governor: found an already pending proposal\"\n            );\n        }\n    }\n}\n"
    },
    "contracts/tests/UnionGovernorMock.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"../governance/UnionGovernor.sol\";\n\ncontract UnionGovernorMock is UnionGovernor {\n    constructor(ERC20VotesComp _token, TimelockController _timelock) UnionGovernor(_token, _timelock) {}\n\n    function votingDelay() public pure override returns (uint256) {\n        return 2;\n    }\n\n    function votingPeriod() public pure override returns (uint256) {\n        return 5760;\n    }\n\n    function proposalThreshold() public pure override returns (uint256) {\n        return 50000e18;\n    }\n}\n"
    },
    "contracts/asset/AssetManager.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\npragma abicoder v1;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"../Controller.sol\";\nimport \"../interfaces/IMarketRegistry.sol\";\nimport \"../interfaces/IMoneyMarketAdapter.sol\";\nimport \"../interfaces/IAssetManager.sol\";\n\n/**\n *  @title AssetManager\n *  @dev Manage the token assets deposited by components and admins, and invest tokens to the integrated underlying lending protocols.\n */\ncontract AssetManager is Controller, ReentrancyGuardUpgradeable, IAssetManager {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using AddressUpgradeable for address;\n\n    IMoneyMarketAdapter[] public moneyMarkets;\n    mapping(address => Market) public supportedMarkets;\n    address[] public supportedTokensList;\n    //record admin or userManager balance\n    mapping(address => mapping(address => uint256)) public balances; //1 user 2 token\n    mapping(address => uint256) public totalPrincipal; //total stake amount\n    address public marketRegistry;\n    // slither-disable-next-line uninitialized-state\n    uint256[] public withdrawSeq; // Priority sequence of money market indices for processing withdraws\n\n    struct Market {\n        bool isSupported;\n    }\n\n    modifier checkMarketSupported(address token) {\n        require(isMarketSupported(token), \"AssetManager: token not support\");\n        _;\n    }\n\n    modifier onlyAuth(address token) {\n        require(\n            _isUToken(msg.sender, token) || _isUserManager(msg.sender, token),\n            \"AssetManager: sender must uToken or userManager\"\n        );\n        _;\n    }\n\n    /**\n     *  @dev Emit when making a deposit\n     *  @param token Depositing token address\n     *  @param account Account address\n     *  @param amount Deposit amount, in wei\n     */\n    event LogDeposit(address indexed token, address indexed account, uint256 amount);\n    /**\n     *  @dev Emit when withdrawing from AssetManager\n     *  @param token Depositing token address\n     *  @param account Account address\n     *  @param amount Withdraw amount, in wei\n     *  @param remaining The amount cannot be withdrawn\n     */\n    event LogWithdraw(address indexed token, address indexed account, uint256 amount, uint256 remaining);\n    /**\n     *  @dev Emit when rebalancing among the integrated money markets\n     *  @param tokenAddress The address of the token to be rebalanced\n     *  @param percentages Array of the percentages of the tokens to deposit to the money markets\n     */\n    event LogRebalance(address tokenAddress, uint256[] percentages);\n\n    function __AssetManager_init(address _marketRegistry) public initializer {\n        Controller.__Controller_init(msg.sender);\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\n        marketRegistry = _marketRegistry;\n    }\n\n    function setMarketRegistry(address _marketRegistry) external onlyAdmin {\n        marketRegistry = _marketRegistry;\n    }\n\n    /**\n     *  @dev Get the balance of asset manager, plus the total amount of tokens deposited to all the underlying lending protocols\n     *  @param tokenAddress ERC20 token address\n     *  @return Pool balance\n     */\n    function getPoolBalance(address tokenAddress) public view override returns (uint256) {\n        IERC20Upgradeable poolToken = IERC20Upgradeable(tokenAddress);\n        uint256 balance = poolToken.balanceOf(address(this));\n        if (isMarketSupported(tokenAddress)) {\n            return totalSupplyView(tokenAddress) + balance;\n        } else {\n            return balance;\n        }\n    }\n\n    /**\n     *  @dev Returns the amount of the lending pool balance minus the amount of total staked.\n     *  @param tokenAddress ERC20 token address\n     *  @return Amount can be borrowed\n     */\n    function getLoanableAmount(address tokenAddress) public view override returns (uint256) {\n        uint256 poolBalance = getPoolBalance(tokenAddress);\n        if (poolBalance > totalPrincipal[tokenAddress]) return poolBalance - totalPrincipal[tokenAddress];\n        return 0;\n    }\n\n    /**\n     *  @dev Get the total amount of tokens deposited to all the integrated underlying protocols without side effects.\n     *  @param tokenAddress ERC20 token address\n     *  @return Total market balance\n     */\n    function totalSupply(address tokenAddress) public override returns (uint256) {\n        if (isMarketSupported(tokenAddress)) {\n            uint256 tokenSupply = 0;\n            for (uint256 i = 0; i < moneyMarkets.length; i++) {\n                if (!moneyMarkets[i].supportsToken(tokenAddress)) {\n                    continue;\n                }\n                tokenSupply += moneyMarkets[i].getSupply(tokenAddress);\n            }\n\n            return tokenSupply;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     *  @dev Get the total amount of tokens deposited to all the integrated underlying protocols, but without side effects. Safe to call anytime, but may not get the most updated number for the current block. Call totalSupply() for that purpose.\n     *  @param tokenAddress ERC20 token address\n     *  @return Total market balance\n     */\n    function totalSupplyView(address tokenAddress) public view override returns (uint256) {\n        if (isMarketSupported(tokenAddress)) {\n            uint256 tokenSupply = 0;\n            for (uint256 i = 0; i < moneyMarkets.length; i++) {\n                if (!moneyMarkets[i].supportsToken(tokenAddress)) {\n                    continue;\n                }\n                tokenSupply += moneyMarkets[i].getSupplyView(tokenAddress);\n            }\n\n            return tokenSupply;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     *  @dev Check if there is an underlying protocol available for the given ERC20 token.\n     *  @param tokenAddress ERC20 token address\n     *  @return Whether is supported\n     */\n    function isMarketSupported(address tokenAddress) public view override returns (bool) {\n        return supportedMarkets[tokenAddress].isSupported;\n    }\n\n    /**\n     *  @dev Deposit tokens to AssetManager, and those tokens will be passed along to adapters to deposit to integrated asset protocols if any is available.\n     *  @param token ERC20 token address\n     *  @param amount ERC20 token address\n     *  @return Deposited amount\n     */\n    function deposit(address token, uint256 amount)\n        external\n        override\n        whenNotPaused\n        onlyAuth(token)\n        nonReentrant\n        returns (bool)\n    {\n        IERC20Upgradeable poolToken = IERC20Upgradeable(token);\n        require(amount > 0, \"AssetManager: amount can not be zero\");\n\n        if (!_isUToken(msg.sender, token)) {\n            balances[msg.sender][token] += amount;\n            totalPrincipal[token] += amount;\n        }\n\n        bool remaining = true;\n        if (isMarketSupported(token)) {\n            // assumption: markets are arranged in order of decreasing liquidity\n            // iterate markets till floors are filled\n            // floors define minimum amount to maintain confidence in liquidity\n            for (uint256 i = 0; i < moneyMarkets.length && remaining; i++) {\n                IMoneyMarketAdapter moneyMarket = moneyMarkets[i];\n\n                if (!moneyMarket.supportsToken(token)) continue;\n                if (moneyMarket.floorMap(token) <= moneyMarket.getSupply(token)) continue;\n\n                poolToken.safeTransferFrom(msg.sender, address(moneyMarket), amount);\n                moneyMarket.deposit(token);\n                remaining = false;\n            }\n\n            // assumption: less liquid markets provide more yield\n            // iterate markets in reverse to optimize for yield\n            // do this only if floors are filled i.e. min liquidity satisfied\n            // dposit in the market where ceiling is not being exceeded\n            for (uint256 j = moneyMarkets.length; j > 0 && remaining; j--) {\n                IMoneyMarketAdapter moneyMarket = moneyMarkets[j - 1];\n                if (!moneyMarket.supportsToken(token)) continue;\n\n                uint256 supply = moneyMarket.getSupply(token);\n                uint256 ceiling = moneyMarket.ceilingMap(token);\n                if (ceiling <= supply) continue;\n                if (supply + amount > ceiling) continue;\n\n                poolToken.safeTransferFrom(msg.sender, address(moneyMarket), amount);\n                moneyMarket.deposit(token);\n                remaining = false;\n            }\n        }\n\n        if (remaining) {\n            poolToken.safeTransferFrom(msg.sender, address(this), amount);\n        }\n\n        emit LogDeposit(token, msg.sender, amount);\n\n        return true;\n    }\n\n    /**\n     *  @dev Withdraw from AssetManager\n     *  @param token ERC20 token address\n     *  @param account User address\n     *  @param amount ERC20 token address\n     *  @return Withdraw amount\n     */\n    function withdraw(\n        address token,\n        address account,\n        uint256 amount\n    ) external override whenNotPaused nonReentrant onlyAuth(token) returns (bool) {\n        require(_checkSenderBalance(msg.sender, token, amount), \"AssetManager: balance not enough to withdraw\");\n\n        uint256 remaining = amount;\n\n        // If there are tokens in Asset Manager then transfer them on priority\n        uint256 selfBalance = IERC20Upgradeable(token).balanceOf(address(this));\n        if (selfBalance > 0) {\n            uint256 withdrawAmount = selfBalance < remaining ? selfBalance : remaining;\n            remaining -= withdrawAmount;\n            IERC20Upgradeable(token).safeTransfer(account, withdrawAmount);\n        }\n\n        if (isMarketSupported(token)) {\n            // iterate markets according to defined sequence and withdraw\n            for (uint256 i = 0; i < withdrawSeq.length && remaining > 0; i++) {\n                IMoneyMarketAdapter moneyMarket = moneyMarkets[withdrawSeq[i]];\n                if (!moneyMarket.supportsToken(token)) continue;\n\n                uint256 supply = moneyMarket.getSupply(token);\n                if (supply == 0) continue;\n\n                uint256 withdrawAmount = supply < remaining ? supply : remaining;\n                remaining -= withdrawAmount;\n                moneyMarket.withdraw(token, account, withdrawAmount);\n            }\n        }\n\n        if (!_isUToken(msg.sender, token)) {\n            balances[msg.sender][token] = balances[msg.sender][token] - amount + remaining;\n            totalPrincipal[token] = totalPrincipal[token] - amount + remaining;\n        }\n\n        emit LogWithdraw(token, account, amount, remaining);\n\n        return true;\n    }\n\n    function debtWriteOff(address token, uint256 amount) external override {\n        require(balances[msg.sender][token] >= amount, \"AssetManager: balance not enough\");\n        balances[msg.sender][token] -= amount;\n        totalPrincipal[token] -= amount;\n    }\n\n    /**\n     *  @dev Add a new ERC20 token to support in AssetManager\n     *  @param tokenAddress ERC20 token address\n     */\n    function addToken(address tokenAddress) external override onlyAdmin {\n        require(!supportedMarkets[tokenAddress].isSupported, \"AssetManager: token is exist\");\n        supportedTokensList.push(tokenAddress);\n        supportedMarkets[tokenAddress].isSupported = true;\n\n        approveAllMarketsMax(tokenAddress);\n    }\n\n    /**\n     *  @dev For a give token set allowance for all integrated money markets\n     *  @param tokenAddress ERC20 token address\n     */\n    function approveAllMarketsMax(address tokenAddress) public override onlyAdmin {\n        IERC20Upgradeable poolToken = IERC20Upgradeable(tokenAddress);\n        for (uint256 i = 0; i < moneyMarkets.length; i++) {\n            poolToken.safeApprove(address(moneyMarkets[i]), 0);\n            poolToken.safeApprove(address(moneyMarkets[i]), type(uint256).max);\n        }\n    }\n\n    /**\n     *  @dev Add a new adapter for the underlying lending protocol\n     *  @param adapterAddress adapter address\n     */\n    function addAdapter(address adapterAddress) external override onlyAdmin {\n        bool isExist = false;\n        for (uint256 i = 0; i < moneyMarkets.length; i++) {\n            if (adapterAddress == address(moneyMarkets[i])) isExist = true;\n        }\n\n        if (!isExist) moneyMarkets.push(IMoneyMarketAdapter(adapterAddress));\n\n        approveAllTokensMax(adapterAddress);\n    }\n\n    function overwriteAdapters(address[] calldata adapters) external onlyAdmin {\n        moneyMarkets = new IMoneyMarketAdapter[](adapters.length);\n        for (uint256 i = 0; i < adapters.length; i++) {\n            moneyMarkets[i] = IMoneyMarketAdapter(adapters[i]);\n        }\n    }\n\n    /**\n     *  @dev For a give moeny market set allowance for all underlying tokens\n     *  @param adapterAddress Address of adaptor for money market\n     */\n    function approveAllTokensMax(address adapterAddress) public override onlyAdmin {\n        for (uint256 i = 0; i < supportedTokensList.length; i++) {\n            IERC20Upgradeable poolToken = IERC20Upgradeable(supportedTokensList[i]);\n            poolToken.safeApprove(adapterAddress, 0);\n            poolToken.safeApprove(adapterAddress, type(uint256).max);\n        }\n    }\n\n    /**\n     *  @dev Set withdraw sequence\n     *  @param newSeq priority sequence of money market indices to be used while withdrawing\n     */\n    function changeWithdrawSequence(uint256[] calldata newSeq) external override onlyAdmin {\n        withdrawSeq = newSeq;\n    }\n\n    /**\n     * @dev Take all the supply of `tokenAddress` and redistribute it according to `percentages`.\n     *\n     * Rejects if the token is not supported.\n     *\n     * @param tokenAddress Address of the token that is going to be rebalanced\n     * @param percentages A list of percentages, expressed as units in 10000, indicating how to deposit the tokens in\n     * each underlying money market. The length of this array is one less than the amount of money markets: the last\n     * money market will receive the remaining tokens. For example, if there are 3 money markets, and you want to\n     * rebalance so that the first one has 10.5% of the tokens, the second one 55%, and the third one 34.5%, this param\n     * will be [1050, 5500].\n     */\n    function rebalance(address tokenAddress, uint256[] calldata percentages)\n        external\n        override\n        checkMarketSupported(tokenAddress)\n        onlyAdmin\n    {\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\n        require(percentages.length + 1 == moneyMarkets.length, \"AssetManager: percentages error\");\n\n        for (uint256 i = 0; i < moneyMarkets.length; i++) {\n            if (!moneyMarkets[i].supportsToken(tokenAddress)) {\n                continue;\n            }\n            moneyMarkets[i].withdrawAll(tokenAddress, address(this));\n        }\n\n        uint256 tokenSupply = token.balanceOf(address(this));\n\n        for (uint256 i = 0; i < percentages.length; i++) {\n            if (!moneyMarkets[i].supportsToken(tokenAddress)) {\n                continue;\n            }\n            uint256 amountToDeposit = (tokenSupply * percentages[i]) / 10000;\n            if (amountToDeposit == 0) {\n                continue;\n            }\n            token.safeTransfer(address(moneyMarkets[i]), amountToDeposit);\n            moneyMarkets[i].deposit(tokenAddress);\n        }\n\n        uint256 remainingTokens = token.balanceOf(address(this));\n        if (moneyMarkets[moneyMarkets.length - 1].supportsToken(tokenAddress) && remainingTokens > 0) {\n            token.safeTransfer(address(moneyMarkets[moneyMarkets.length - 1]), remainingTokens);\n            moneyMarkets[moneyMarkets.length - 1].deposit(tokenAddress);\n        }\n\n        require(token.balanceOf(address(this)) == 0, \"AssetManager: there are remaining funds in the fund pool\");\n\n        emit LogRebalance(tokenAddress, percentages);\n    }\n\n    /**\n     *  @dev Claim the tokens left on AssetManager balance, in case there are tokens get stuck here.\n     *  @param tokenAddress ERC20 token address\n     *  @param recipient Recipient address\n     */\n    function claimTokens(address tokenAddress, address recipient) external override onlyAdmin {\n        require(recipient != address(0), \"AsstManager: recipient can not be zero\");\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\n        uint256 balance = token.balanceOf(address(this));\n        token.safeTransfer(recipient, balance);\n    }\n\n    /**\n     *  @dev Claim the tokens stuck in the integrated adapters\n     *  @param index MoneyMarkets array index\n     *  @param tokenAddress ERC20 token address\n     *  @param recipient Recipient address\n     */\n    function claimTokensFromAdapter(\n        uint256 index,\n        address tokenAddress,\n        address recipient\n    ) external override onlyAdmin {\n        IMoneyMarketAdapter moneyMarket = moneyMarkets[index];\n        moneyMarket.claimTokens(tokenAddress, recipient);\n    }\n\n    /**\n     *  @dev Get the number of supported underlying protocols.\n     *  @return MoneyMarkets length\n     */\n    function moneyMarketsCount() external view override returns (uint256) {\n        return moneyMarkets.length;\n    }\n\n    /**\n     *  @dev Get the count of supported tokens\n     *  @return Number of supported tokens\n     */\n    function supportedTokensCount() external view override returns (uint256) {\n        return supportedTokensList.length;\n    }\n\n    /**\n     *  @dev Get the supported lending protocol\n     *  @param tokenAddress ERC20 token address\n     *  @param marketId MoneyMarkets array index\n     *  @return rate tokenSupply, rate(compound is supplyRatePerBlock 1e18, aave is supplyRatePerYear 1e27)\n     */\n    function getMoneyMarket(address tokenAddress, uint256 marketId)\n        external\n        view\n        override\n        returns (uint256 rate, uint256 tokenSupply)\n    {\n        rate = moneyMarkets[marketId].getRate(tokenAddress);\n        tokenSupply += moneyMarkets[marketId].getSupplyView(tokenAddress);\n    }\n\n    function _checkSenderBalance(\n        address sender,\n        address tokenAddress,\n        uint256 amount\n    ) private view returns (bool) {\n        if (_isUToken(sender, tokenAddress)) {\n            // For all the lending markets, which have no deposits, return the tokens from the pool\n            return getLoanableAmount(tokenAddress) >= amount;\n        } else {\n            return balances[sender][tokenAddress] >= amount;\n        }\n    }\n\n    function _isUToken(address sender, address token) private view returns (bool) {\n        (address uTokenAddress, ) = IMarketRegistry(marketRegistry).tokens(token);\n        return uTokenAddress == sender;\n    }\n\n    function _isUserManager(address sender, address token) private view returns (bool) {\n        (, address userManagerAddress) = IMarketRegistry(marketRegistry).tokens(token);\n        return userManagerAddress == sender;\n    }\n}\n"
    },
    "contracts/asset/PureTokenAdapter.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\npragma abicoder v1;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../interfaces/IMoneyMarketAdapter.sol\";\nimport \"../Controller.sol\";\n\ncontract PureTokenAdapter is Controller, IMoneyMarketAdapter {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    address public assetManager;\n    mapping(address => uint256) public override floorMap;\n    mapping(address => uint256) public override ceilingMap;\n\n    modifier checkTokenSupported(address tokenAddress) {\n        require(_supportsToken(tokenAddress), \"PureTokenAdapter: token not supported\");\n        _;\n    }\n\n    modifier onlyAssetManager() {\n        require(msg.sender == assetManager, \"PureTokenAdapter: only asset manager can call\");\n        _;\n    }\n\n    function __PureTokenAdapter_init(address _assetManager) public initializer {\n        Controller.__Controller_init(msg.sender);\n        assetManager = _assetManager;\n    }\n\n    function setAssetManager(address _assetManager) external onlyAdmin {\n        assetManager = _assetManager;\n    }\n\n    function setFloor(address tokenAddress, uint256 floor) external onlyAdmin {\n        floorMap[tokenAddress] = floor;\n    }\n\n    function setCeiling(address tokenAddress, uint256 ceiling) external onlyAdmin {\n        ceilingMap[tokenAddress] = ceiling;\n    }\n\n    function getRate(address) external pure override returns (uint256) {\n        return 0;\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    function deposit(address tokenAddress) external view override checkTokenSupported(tokenAddress) {\n        // Don't have to do anything because AssetManager already transfered tokens here\n    }\n\n    function withdraw(\n        address tokenAddress,\n        address recipient,\n        uint256 tokenAmount\n    ) external override onlyAssetManager checkTokenSupported(tokenAddress) {\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\n        token.safeTransfer(recipient, tokenAmount);\n    }\n\n    function withdrawAll(address tokenAddress, address recipient)\n        external\n        override\n        onlyAssetManager\n        checkTokenSupported(tokenAddress)\n    {\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\n        token.safeTransfer(recipient, token.balanceOf(address(this)));\n    }\n\n    function claimTokens(address tokenAddress, address recipient) external override onlyAssetManager {\n        _claimTokens(tokenAddress, recipient);\n    }\n\n    function getSupply(address tokenAddress) external view override returns (uint256) {\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\n        return token.balanceOf(address(this));\n    }\n\n    function getSupplyView(address tokenAddress) external view override returns (uint256) {\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\n        return token.balanceOf(address(this));\n    }\n\n    function supportsToken(address tokenAddress) external view override returns (bool) {\n        return _supportsToken(tokenAddress);\n    }\n\n    function _supportsToken(address tokenAddress) internal view returns (bool) {\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\n        return tokenAddress != address(0) && token.balanceOf(address(this)) >= 0; // simple check if the token is ERC20 compatible\n    }\n\n    function _claimTokens(address tokenAddress, address recipient) private {\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\n        uint256 balance = token.balanceOf(address(this));\n        token.safeTransfer(recipient, balance);\n    }\n}\n"
    },
    "contracts/asset/CompoundAdapter.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\npragma abicoder v1;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../interfaces/IMoneyMarketAdapter.sol\";\nimport \"../Controller.sol\";\n\nabstract contract CToken is IERC20Upgradeable {\n    function supplyRatePerBlock() external view virtual returns (uint256);\n\n    function mint(uint256 mintAmount) external virtual returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external virtual returns (uint256);\n\n    function balanceOfUnderlying(address owner) external virtual returns (uint256);\n\n    function exchangeRateStored() external view virtual returns (uint256);\n}\n\n/**\n * @title CompoundAdapter\n *  @dev The implementation of Compound.Finance MoneyMarket that integrates with AssetManager.\n */\ncontract CompoundAdapter is Controller, IMoneyMarketAdapter {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    mapping(address => address) public tokenToCToken;\n\n    address public assetManager;\n    mapping(address => uint256) public override floorMap;\n    mapping(address => uint256) public override ceilingMap;\n\n    modifier checkTokenSupported(address tokenAddress) {\n        require(_supportsToken(tokenAddress), \"Token not supported\");\n        _;\n    }\n\n    modifier onlyAssetManager() {\n        require(msg.sender == assetManager, \"Only asset manager can call\");\n        _;\n    }\n\n    function __CompoundAdapter_init(address _assetManager) public initializer {\n        Controller.__Controller_init(msg.sender);\n        assetManager = _assetManager;\n    }\n\n    function setAssetManager(address _assetManager) external onlyAdmin {\n        assetManager = _assetManager;\n    }\n\n    function setFloor(address tokenAddress, uint256 floor) external onlyAdmin {\n        floorMap[tokenAddress] = floor;\n    }\n\n    function setCeiling(address tokenAddress, uint256 ceiling) external onlyAdmin {\n        ceilingMap[tokenAddress] = ceiling;\n    }\n\n    function mapTokenToCToken(address tokenAddress, address cTokenAddress) external onlyAdmin {\n        tokenToCToken[tokenAddress] = cTokenAddress;\n    }\n\n    function getRate(address tokenAddress) external view override returns (uint256) {\n        address cTokenAddress = tokenToCToken[tokenAddress];\n        CToken cToken = CToken(cTokenAddress);\n\n        return cToken.supplyRatePerBlock();\n    }\n\n    function deposit(address tokenAddress) external override checkTokenSupported(tokenAddress) {\n        // get cToken\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\n        address cTokenAddress = tokenToCToken[tokenAddress];\n        CToken cToken = CToken(cTokenAddress);\n        uint256 amount = token.balanceOf(address(this));\n        // mint cTokens\n        token.safeApprove(cTokenAddress, 0);\n        token.safeApprove(cTokenAddress, amount);\n        uint256 result = cToken.mint(amount);\n        require(result == 0, \"Error minting the cToken\");\n    }\n\n    function withdraw(\n        address tokenAddress,\n        address recipient,\n        uint256 tokenAmount\n    ) external override onlyAssetManager checkTokenSupported(tokenAddress) {\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\n        address cTokenAddress = tokenToCToken[tokenAddress];\n        CToken cToken = CToken(cTokenAddress);\n\n        uint256 result = cToken.redeemUnderlying(tokenAmount);\n        require(result == 0, \"Error redeeming the cToken\");\n        token.safeTransfer(recipient, tokenAmount);\n    }\n\n    function withdrawAll(address tokenAddress, address recipient)\n        external\n        override\n        onlyAssetManager\n        checkTokenSupported(tokenAddress)\n    {\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\n        address cTokenAddress = tokenToCToken[tokenAddress];\n        CToken cToken = CToken(cTokenAddress);\n\n        uint256 result = cToken.redeemUnderlying(cToken.balanceOfUnderlying(address(this)));\n        require(result == 0, \"Error redeeming the cToken\");\n        token.safeTransfer(recipient, token.balanceOf(address(this)));\n    }\n\n    function claimTokens(address tokenAddress, address recipient) external override onlyAssetManager {\n        _claimTokens(tokenAddress, recipient);\n    }\n\n    function getSupply(address tokenAddress) external override returns (uint256) {\n        address cTokenAddress = tokenToCToken[tokenAddress];\n        CToken cToken = CToken(cTokenAddress);\n\n        // hack for preventing a rounding issue in `redeemUnderlying`\n        if (cToken.balanceOf(address(this)) <= 10) {\n            return 0;\n        }\n\n        return cToken.balanceOfUnderlying(address(this));\n    }\n\n    function getSupplyView(address tokenAddress) external view override returns (uint256) {\n        address cTokenAddress = tokenToCToken[tokenAddress];\n        CToken cToken = CToken(cTokenAddress);\n\n        // hack for preventing a rounding issue in `redeemUnderlying`\n        if (cToken.balanceOf(address(this)) <= 10) {\n            return 0;\n        }\n\n        uint256 exchangeRate = cToken.exchangeRateStored();\n        uint256 balance = cToken.balanceOf(address(this));\n        return (balance * exchangeRate) / 10**18;\n    }\n\n    function supportsToken(address tokenAddress) external view override returns (bool) {\n        return _supportsToken(tokenAddress);\n    }\n\n    function _supportsToken(address tokenAddress) internal view returns (bool) {\n        address cTokenAddress = tokenToCToken[tokenAddress];\n\n        return cTokenAddress != address(0);\n    }\n\n    function _claimTokens(address tokenAddress, address recipient) private {\n        require(recipient != address(0), \"Recipient can not be zero\");\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\n        uint256 balance = token.balanceOf(address(this));\n        token.safeTransfer(recipient, balance);\n    }\n}\n"
    },
    "contracts/tests/AaveMock.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface IErc20 is IERC20Upgradeable {\n    function mint(address account, uint256 amount) external;\n\n    function burn(address account, uint256 amount) external;\n}\n\ncontract AaveMock is Initializable {\n    uint128 public rate;\n    address public aToken;\n\n    function __AaveMock_init(uint128 _rate, address _aToken) public initializer {\n        rate = _rate;\n        aToken = _aToken;\n    }\n\n    function getReserveData(address)\n        external\n        view\n        returns (\n            uint256,\n            uint128,\n            uint128,\n            uint128,\n            uint128,\n            uint128,\n            uint40,\n            address,\n            address,\n            address,\n            address,\n            uint8\n        )\n    {\n        return (0, 0, 0, rate, 0, 0, 0, aToken, address(0), address(0), address(0), 0);\n    }\n\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16\n    ) external {\n        IErc20(asset).transferFrom(onBehalfOf, address(this), amount);\n        IErc20(aToken).mint(msg.sender, amount);\n    }\n\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external {\n        uint256 userBalance = IErc20(aToken).balanceOf(msg.sender);\n        uint256 amountToWithdraw = amount;\n        if (amount == type(uint256).max) {\n            amountToWithdraw = userBalance;\n        }\n        IErc20(aToken).burn(msg.sender, amountToWithdraw);\n        IErc20(asset).transfer(to, amountToWithdraw);\n    }\n}\n"
    },
    "contracts/tests/ControllerMock.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"../Controller.sol\";\n\ncontract ControllerMock is Controller {}\n"
    },
    "contracts/market/MarketRegistry.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"../Controller.sol\";\n\n/**\n * @title MarketRegistry Contract\n * @dev Registering and managing all the lending markets.\n */\ncontract MarketRegistry is Controller {\n    struct Market {\n        address uToken;\n        address userManager;\n    }\n\n    address[] public uTokenList;\n    address[] public userManagerList;\n    mapping(address => Market) public tokens;\n\n    event LogAddUToken(address indexed tokenAddress, address contractAddress);\n\n    event LogAddUserManager(address indexed tokenAddress, address contractAddress);\n\n    modifier newToken(address token) {\n        require(tokens[token].uToken == address(0), \"MarketRegistry: has already exist this uToken\");\n        _;\n    }\n\n    modifier newUserManager(address token) {\n        require(tokens[token].userManager == address(0), \"MarketRegistry: has already exist this userManager\");\n        _;\n    }\n\n    /**\n     *  @dev Initialization function\n     */\n    function __MarketRegistry_init() public initializer {\n        Controller.__Controller_init(msg.sender);\n    }\n\n    /**\n     *  @dev Retrieves the value of the state variable `uTokenList`\n     *  @return Stored uToken address\n     */\n    function getUTokens() public view returns (address[] memory) {\n        return uTokenList;\n    }\n\n    function getUserManagers() public view returns (address[] memory) {\n        return userManagerList;\n    }\n\n    function addUToken(address token, address uToken) public newToken(token) onlyAdmin {\n        uTokenList.push(uToken);\n        tokens[token].uToken = uToken;\n        emit LogAddUToken(token, uToken);\n    }\n\n    function addUserManager(address token, address userManager) public newUserManager(token) onlyAdmin {\n        userManagerList.push(userManager);\n        tokens[token].userManager = userManager;\n        emit LogAddUserManager(token, userManager);\n    }\n\n    function deleteMarket(address token) public onlyAdmin {\n        address oldUToken = tokens[token].uToken;\n        bool uTokenExist = false;\n        uint256 uTokenIndex = 0;\n\n        for (uint256 i = 0; i < uTokenList.length; i++) {\n            if (oldUToken == uTokenList[i]) {\n                uTokenExist = true;\n                uTokenIndex = i;\n            }\n        }\n\n        if (uTokenExist) {\n            uTokenList[uTokenIndex] = uTokenList[uTokenList.length - 1];\n            uTokenList.pop();\n        }\n\n        delete tokens[token].uToken;\n\n        address oldUserManager = tokens[token].userManager;\n        bool userManagerExist = false;\n        uint256 userManagerIndex = 0;\n\n        for (uint256 i = 0; i < userManagerList.length; i++) {\n            if (oldUserManager == userManagerList[i]) {\n                userManagerExist = true;\n                userManagerIndex = i;\n            }\n        }\n\n        if (userManagerExist) {\n            userManagerList[userManagerIndex] = userManagerList[userManagerList.length - 1];\n            userManagerList.pop();\n        }\n\n        delete tokens[token].userManager;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}