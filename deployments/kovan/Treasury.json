{
  "address": "0x14bF0cb2dEb280e8FE68242F06206F970c2ef425",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dripStart_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dripRate_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "addSchedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "drip",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dripStart_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dripRate_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "editSchedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "grantToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenSchedules",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dripStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dripRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dripped",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd209dbd0e7c37686f42927ee6195e71d669955aaf746bc5acf5465df2b235900",
  "receipt": {
    "to": null,
    "from": "0x7a0C61EdD8b5c0c5C1437AEb571d7DDbF8022Be4",
    "contractAddress": "0x14bF0cb2dEb280e8FE68242F06206F970c2ef425",
    "transactionIndex": 5,
    "gasUsed": "781125",
    "logsBloom": "0x
    "blockHash": "0x75294826d826a26783f9eb8e0d72487fb24a3551a92abbdb143620b6e631f60e",
    "transactionHash": "0xd209dbd0e7c37686f42927ee6195e71d669955aaf746bc5acf5465df2b235900",
    "logs": [],
    "blockNumber": 27174943,
    "cumulativeGasUsed": "1077481",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x598C0657385A1a631dD71818485bD704CFa552aE"
  ],
  "solcInputHash": "815da1a7bd393b91c2edbc66164c6945",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dripStart_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dripRate_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"addSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"drip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dripStart_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dripRate_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"editSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"grantToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dripStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dripRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dripped\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"drip(address)\":{\"details\":\"Note: this will only drip up to the amount of tokens available.\",\"returns\":{\"_0\":\"The amount of tokens dripped in this call\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"drip(address)\":{\"notice\":\"Drips the maximum amount of tokens to match the drip rate since inception\"},\"token()\":{\"notice\":\"Reference to token to drip (immutable)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/treasury/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/treasury/Treasury.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract Treasury {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Reference to token to drip (immutable)\\n    IERC20 public immutable token;\\n    address public admin;\\n\\n    struct Schedule {\\n        uint256 dripStart; //The block number when the Treasury started (immutable)\\n        uint256 amount; //Total amount to drip (immutable)\\n        uint256 dripRate; //Tokens per block that to drip to target (immutable)\\n        address target; //Target to receive dripped tokens (immutable)\\n        uint256 dripped; //Amount that has already been dripped\\n    }\\n\\n    mapping(address => Schedule) public tokenSchedules; //0: target address, 1: Schedule\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Treasury: not admin\\\");\\n        _;\\n    }\\n\\n    constructor(IERC20 token_) {\\n        admin = msg.sender;\\n        token = token_;\\n    }\\n\\n    function setAdmin(address admin_) public onlyAdmin {\\n        admin = admin_;\\n    }\\n\\n    /**\\n     * @notice Drips the maximum amount of tokens to match the drip rate since inception\\n     * @dev Note: this will only drip up to the amount of tokens available.\\n     * @return The amount of tokens dripped in this call\\n     */\\n    function drip(address target) public returns (uint256) {\\n        require(tokenSchedules[target].target != address(0), \\\"Target schedule doesn't exist\\\");\\n        // First, read storage into memory\\n        IERC20 token_ = token;\\n        uint256 dripRate_ = tokenSchedules[target].dripRate;\\n        uint256 dripStart_ = tokenSchedules[target].dripStart;\\n        uint256 dripped_ = tokenSchedules[target].dripped;\\n        address target_ = tokenSchedules[target].target;\\n        uint256 totalAmount_ = tokenSchedules[target].amount;\\n        uint256 blockNumber_ = block.number;\\n\\n        require(blockNumber_ >= dripStart_, \\\"not yet started\\\");\\n        uint256 treasuryBalance_ = token_.balanceOf(address(this)); // TODO: Verify this is a static call\\n\\n        // Next, calculate intermediate values\\n        uint256 dripTotal_ = _min((blockNumber_ - dripStart_) * dripRate_, totalAmount_);\\n        uint256 deltaDrip_;\\n        if (dripTotal_ > dripped_) {\\n            deltaDrip_ = dripTotal_ - dripped_;\\n        } else {\\n            deltaDrip_ = 0;\\n        }\\n        uint256 toDrip_ = _min(treasuryBalance_, deltaDrip_);\\n        uint256 drippedNext_ = dripped_ + toDrip_;\\n\\n        // Finally, write new `dripped` value and transfer tokens to target\\n        tokenSchedules[target_].dripped = drippedNext_;\\n        token_.safeTransfer(target_, toDrip_);\\n\\n        return toDrip_;\\n    }\\n\\n    function addSchedule(\\n        uint256 dripStart_,\\n        uint256 dripRate_,\\n        address target_,\\n        uint256 amount_\\n    ) public onlyAdmin {\\n        require(tokenSchedules[target_].target == address(0), \\\"Target schedule already exists\\\");\\n        Schedule memory schedule;\\n        schedule.dripStart = dripStart_;\\n        schedule.dripRate = dripRate_;\\n        schedule.target = target_;\\n        schedule.amount = amount_;\\n        schedule.dripped = 0;\\n        tokenSchedules[target_] = schedule;\\n    }\\n\\n    function editSchedule(\\n        uint256 dripStart_,\\n        uint256 dripRate_,\\n        address target_,\\n        uint256 amount_\\n    ) public onlyAdmin {\\n        require(tokenSchedules[target_].target != address(0), \\\"Target schedule doesn't exist\\\");\\n        tokenSchedules[target_].dripStart = dripStart_;\\n        tokenSchedules[target_].dripRate = dripRate_;\\n        tokenSchedules[target_].amount = amount_;\\n    }\\n\\n    function grantToken(address account, uint256 amount) public onlyAdmin {\\n        IERC20 token_ = token;\\n        uint256 treasuryBalance_ = token_.balanceOf(address(this));\\n        require(amount <= treasuryBalance_, \\\"amount larger than balance\\\");\\n        token_.safeTransfer(account, amount);\\n    }\\n\\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a <= b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdca75f80bf405de127b3f1e18d5feeb459baf31b12ce691157353a01931287b9\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610d46380380610d468339818101604052602081101561003357600080fd5b5051600080546001600160a01b031916331790556001600160601b031960609190911b1660805260805160601c610cc0610086600039600081816102440152818161047b01526107da0152610cc06000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063d663e0221161005b578063d663e0221461015d578063f851a440146101e4578063f8fb886f14610213578063fc0c546a1461023f57600080fd5b806317c4db721461008d57806367a5cd06146100c75780636ff9af4c146100ff578063704b6c0214610137575b600080fd5b6100c5600480360360808110156100a357600080fd5b508035906020810135906001600160a01b036040820135169060600135610266565b005b6100ed600480360360208110156100dd57600080fd5b50356001600160a01b03166103d6565b60408051918252519081900360200190f35b6100c56004803603608081101561011557600080fd5b508035906020810135906001600160a01b036040820135169060600135610606565b6100c56004803603602081101561014d57600080fd5b50356001600160a01b03166106f6565b6101b06004803603602081101561017357600080fd5b506001602081905290356001600160a01b039081166000908152604090208054928101546002820154600383015460049093015491939092169085565b604080519586526020860194909452848401929092526001600160a01b031660608401526080830152519081900360a00190f35b6000546101f7906001600160a01b031681565b604080516001600160a01b039092168252519081900360200190f35b6100c56004803603604081101561022957600080fd5b506001600160a01b03813516906020013561076d565b6101f77f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031633146102bb576040805162461bcd60e51b81526020600482015260136024820152722a3932b0b9bab93c9d103737ba1030b236b4b760691b604482015290519081900360640190fd5b6001600160a01b03828116600090815260016020526040902060030154161561032b576040805162461bcd60e51b815260206004820152601e60248201527f546172676574207363686564756c6520616c7265616479206578697374730000604482015290519081900360640190fd5b6103666040518060a0016040528060008152602001600081526020016000815260200160006001600160a01b03168152602001600081525090565b93845260408085019384526001600160a01b03928316606086018181526020808801948552600060808901818152938152600191829052939093209651875592519186019190915592516002850155516003840180546001600160a01b0319169190921617905551600490910155565b6001600160a01b03818116600090815260016020526040812060030154909116610447576040805162461bcd60e51b815260206004820152601d60248201527f546172676574207363686564756c6520646f65736e2774206578697374000000604482015290519081900360640190fd5b6001600160a01b038083166000908152600160208190526040909120600281015481546004830154600384015493909401547f000000000000000000000000000000000000000000000000000000000000000095929491939192919091169043848110156104ee576040805162461bcd60e51b815260206004820152600f60248201526e1b9bdd081e595d081cdd185c9d1959608a1b604482015290519081900360640190fd5b6000876001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561053d57600080fd5b505afa158015610551573d6000803e3d6000fd5b505050506040513d602081101561056757600080fd5b50519050600061058b8861057b8986610c31565b6105859190610c12565b856108ca565b90506000868211156105a8576105a18783610c31565b90506105ac565b5060005b60006105b884836108ca565b905060006105c6828a610bfa565b6001600160a01b03808a1660009081526001602052604090206004018290559091506105f5908d1689846108e3565b509c9b505050505050505050505050565b6000546001600160a01b0316331461065b576040805162461bcd60e51b81526020600482015260136024820152722a3932b0b9bab93c9d103737ba1030b236b4b760691b604482015290519081900360640190fd5b6001600160a01b03828116600090815260016020526040902060030154166106ca576040805162461bcd60e51b815260206004820152601d60248201527f546172676574207363686564756c6520646f65736e2774206578697374000000604482015290519081900360640190fd5b6001600160a01b0390911660009081526001602081905260409091209384556002840192909255910155565b6000546001600160a01b0316331461074b576040805162461bcd60e51b81526020600482015260136024820152722a3932b0b9bab93c9d103737ba1030b236b4b760691b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146107c2576040805162461bcd60e51b81526020600482015260136024820152722a3932b0b9bab93c9d103737ba1030b236b4b760691b604482015290519081900360640190fd5b604080516370a0823160e01b815230600482015290517f0000000000000000000000000000000000000000000000000000000000000000916000916001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561082d57600080fd5b505afa158015610841573d6000803e3d6000fd5b505050506040513d602081101561085757600080fd5b50519050808311156108b0576040805162461bcd60e51b815260206004820152601a60248201527f616d6f756e74206c6172676572207468616e2062616c616e6365000000000000604482015290519081900360640190fd5b6108c46001600160a01b03831685856108e3565b50505050565b60008183116108da5750816108dd565b50805b92915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261093590849061093a565b505050565b600061098f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610a119092919063ffffffff16565b80519091501561093557808060200190518101906109ad9190610b8b565b6109355760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b6060610a208484600085610a2a565b90505b9392505050565b606082471015610a8b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610a08565b843b610ad95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a08565b600080866001600160a01b03168587604051610af59190610bab565b60006040518083038185875af1925050503d8060008114610b32576040519150601f19603f3d011682016040523d82523d6000602084013e610b37565b606091505b5091509150610b47828286610b52565b979650505050505050565b60608315610b61575081610a23565b825115610b715782518084602001fd5b8160405162461bcd60e51b8152600401610a089190610bc7565b600060208284031215610b9c578081fd5b81518015158114610a23578182fd5b60008251610bbd818460208701610c48565b9190910192915050565b6020815260008251806020840152610be6816040850160208701610c48565b601f01601f19169190910160400192915050565b60008219821115610c0d57610c0d610c74565b500190565b6000816000190483118215151615610c2c57610c2c610c74565b500290565b600082821015610c4357610c43610c74565b500390565b60005b83811015610c63578181015183820152602001610c4b565b838111156108c45750506000910152565b634e487b7160e01b600052601160045260246000fdfea264697066735822122015f03f825b1c0c27194d5def9cbfb80d775b2b7279a5814cf7777722fc95d61c64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063d663e0221161005b578063d663e0221461015d578063f851a440146101e4578063f8fb886f14610213578063fc0c546a1461023f57600080fd5b806317c4db721461008d57806367a5cd06146100c75780636ff9af4c146100ff578063704b6c0214610137575b600080fd5b6100c5600480360360808110156100a357600080fd5b508035906020810135906001600160a01b036040820135169060600135610266565b005b6100ed600480360360208110156100dd57600080fd5b50356001600160a01b03166103d6565b60408051918252519081900360200190f35b6100c56004803603608081101561011557600080fd5b508035906020810135906001600160a01b036040820135169060600135610606565b6100c56004803603602081101561014d57600080fd5b50356001600160a01b03166106f6565b6101b06004803603602081101561017357600080fd5b506001602081905290356001600160a01b039081166000908152604090208054928101546002820154600383015460049093015491939092169085565b604080519586526020860194909452848401929092526001600160a01b031660608401526080830152519081900360a00190f35b6000546101f7906001600160a01b031681565b604080516001600160a01b039092168252519081900360200190f35b6100c56004803603604081101561022957600080fd5b506001600160a01b03813516906020013561076d565b6101f77f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031633146102bb576040805162461bcd60e51b81526020600482015260136024820152722a3932b0b9bab93c9d103737ba1030b236b4b760691b604482015290519081900360640190fd5b6001600160a01b03828116600090815260016020526040902060030154161561032b576040805162461bcd60e51b815260206004820152601e60248201527f546172676574207363686564756c6520616c7265616479206578697374730000604482015290519081900360640190fd5b6103666040518060a0016040528060008152602001600081526020016000815260200160006001600160a01b03168152602001600081525090565b93845260408085019384526001600160a01b03928316606086018181526020808801948552600060808901818152938152600191829052939093209651875592519186019190915592516002850155516003840180546001600160a01b0319169190921617905551600490910155565b6001600160a01b03818116600090815260016020526040812060030154909116610447576040805162461bcd60e51b815260206004820152601d60248201527f546172676574207363686564756c6520646f65736e2774206578697374000000604482015290519081900360640190fd5b6001600160a01b038083166000908152600160208190526040909120600281015481546004830154600384015493909401547f000000000000000000000000000000000000000000000000000000000000000095929491939192919091169043848110156104ee576040805162461bcd60e51b815260206004820152600f60248201526e1b9bdd081e595d081cdd185c9d1959608a1b604482015290519081900360640190fd5b6000876001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561053d57600080fd5b505afa158015610551573d6000803e3d6000fd5b505050506040513d602081101561056757600080fd5b50519050600061058b8861057b8986610c31565b6105859190610c12565b856108ca565b90506000868211156105a8576105a18783610c31565b90506105ac565b5060005b60006105b884836108ca565b905060006105c6828a610bfa565b6001600160a01b03808a1660009081526001602052604090206004018290559091506105f5908d1689846108e3565b509c9b505050505050505050505050565b6000546001600160a01b0316331461065b576040805162461bcd60e51b81526020600482015260136024820152722a3932b0b9bab93c9d103737ba1030b236b4b760691b604482015290519081900360640190fd5b6001600160a01b03828116600090815260016020526040902060030154166106ca576040805162461bcd60e51b815260206004820152601d60248201527f546172676574207363686564756c6520646f65736e2774206578697374000000604482015290519081900360640190fd5b6001600160a01b0390911660009081526001602081905260409091209384556002840192909255910155565b6000546001600160a01b0316331461074b576040805162461bcd60e51b81526020600482015260136024820152722a3932b0b9bab93c9d103737ba1030b236b4b760691b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146107c2576040805162461bcd60e51b81526020600482015260136024820152722a3932b0b9bab93c9d103737ba1030b236b4b760691b604482015290519081900360640190fd5b604080516370a0823160e01b815230600482015290517f0000000000000000000000000000000000000000000000000000000000000000916000916001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561082d57600080fd5b505afa158015610841573d6000803e3d6000fd5b505050506040513d602081101561085757600080fd5b50519050808311156108b0576040805162461bcd60e51b815260206004820152601a60248201527f616d6f756e74206c6172676572207468616e2062616c616e6365000000000000604482015290519081900360640190fd5b6108c46001600160a01b03831685856108e3565b50505050565b60008183116108da5750816108dd565b50805b92915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261093590849061093a565b505050565b600061098f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610a119092919063ffffffff16565b80519091501561093557808060200190518101906109ad9190610b8b565b6109355760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b6060610a208484600085610a2a565b90505b9392505050565b606082471015610a8b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610a08565b843b610ad95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a08565b600080866001600160a01b03168587604051610af59190610bab565b60006040518083038185875af1925050503d8060008114610b32576040519150601f19603f3d011682016040523d82523d6000602084013e610b37565b606091505b5091509150610b47828286610b52565b979650505050505050565b60608315610b61575081610a23565b825115610b715782518084602001fd5b8160405162461bcd60e51b8152600401610a089190610bc7565b600060208284031215610b9c578081fd5b81518015158114610a23578182fd5b60008251610bbd818460208701610c48565b9190910192915050565b6020815260008251806020840152610be6816040850160208701610c48565b601f01601f19169190910160400192915050565b60008219821115610c0d57610c0d610c74565b500190565b6000816000190483118215151615610c2c57610c2c610c74565b500290565b600082821015610c4357610c43610c74565b500390565b60005b83811015610c63578181015183820152602001610c4b565b838111156108c45750506000910152565b634e487b7160e01b600052601160045260246000fdfea264697066735822122015f03f825b1c0c27194d5def9cbfb80d775b2b7279a5814cf7777722fc95d61c64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "drip(address)": {
        "details": "Note: this will only drip up to the amount of tokens available.",
        "returns": {
          "_0": "The amount of tokens dripped in this call"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "drip(address)": {
        "notice": "Drips the maximum amount of tokens to match the drip rate since inception"
      },
      "token()": {
        "notice": "Reference to token to drip (immutable)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21233,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 21249,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "tokenSchedules",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Schedule)21244_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Schedule)21244_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Treasury.Schedule)",
        "numberOfBytes": "32",
        "value": "t_struct(Schedule)21244_storage"
      },
      "t_struct(Schedule)21244_storage": {
        "encoding": "inplace",
        "label": "struct Treasury.Schedule",
        "members": [
          {
            "astId": 21235,
            "contract": "contracts/treasury/Treasury.sol:Treasury",
            "label": "dripStart",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 21237,
            "contract": "contracts/treasury/Treasury.sol:Treasury",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 21239,
            "contract": "contracts/treasury/Treasury.sol:Treasury",
            "label": "dripRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 21241,
            "contract": "contracts/treasury/Treasury.sol:Treasury",
            "label": "target",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 21243,
            "contract": "contracts/treasury/Treasury.sol:Treasury",
            "label": "dripped",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}