{
  "address": "0x83Fd9B96b8d225d2Bf08Ce80321D443cde78A8Eb",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogWithdrawRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INIT_INFLATION_INDEX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_ADMIN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "unionToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "marketRegistry_",
          "type": "address"
        }
      ],
      "name": "__Comptroller_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        }
      ],
      "name": "__Controller_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lockedStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRepay",
          "type": "uint256"
        }
      ],
      "name": "addFrozenCoinAge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "calculateRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "futureBlocks",
          "type": "uint256"
        }
      ],
      "name": "calculateRewardsByBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gInflationIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gLastUpdatedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getRewardsMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "halfDecayPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "effectiveTotalStake",
          "type": "uint256"
        }
      ],
      "name": "inflationPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "lookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketRegistry",
      "outputs": [
        {
          "internalType": "contract IMarketRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "memberRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonMemberRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "setGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "point",
          "type": "uint256"
        }
      ],
      "name": "setHalfDecayPoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unionToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        }
      ],
      "name": "updateTotalStaked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "frozenCoinAge",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inflationIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accrued",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdf959639cbafcec577c64cfda5ad48a653a2d831011035880ba1ce5b7c82dc89",
  "receipt": {
    "to": null,
    "from": "0x7a0C61EdD8b5c0c5C1437AEb571d7DDbF8022Be4",
    "contractAddress": "0x83Fd9B96b8d225d2Bf08Ce80321D443cde78A8Eb",
    "transactionIndex": 9,
    "gasUsed": "2602346",
    "logsBloom": "0x
    "blockHash": "0x781d6ac8c6402e023e2bd84e8c2ea2c37eaeb7b819305fc7568905397b3ec9dd",
    "transactionHash": "0xdf959639cbafcec577c64cfda5ad48a653a2d831011035880ba1ce5b7c82dc89",
    "logs": [],
    "blockNumber": 27174939,
    "cumulativeGasUsed": "4946328",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "815da1a7bd393b91c2edbc66164c6945",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INIT_INFLATION_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"unionToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketRegistry_\",\"type\":\"address\"}],\"name\":\"__Comptroller_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"__Controller_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRepay\",\"type\":\"uint256\"}],\"name\":\"addFrozenCoinAge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"}],\"name\":\"calculateRewardsByBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gInflationIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gLastUpdatedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getRewardsMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halfDecayPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"effectiveTotalStake\",\"type\":\"uint256\"}],\"name\":\"inflationPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"lookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketRegistry\",\"outputs\":[{\"internalType\":\"contract IMarketRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"memberRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonMemberRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"point\",\"type\":\"uint256\"}],\"name\":\"setHalfDecayPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unionToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"name\":\"updateTotalStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"frozenCoinAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inflationIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accrued\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"LogWithdrawRewards(address,uint256)\":{\"details\":\"Withdraw rewards event\",\"params\":{\"account\":\"The staker's address\",\"amount\":\"The amount of Union tokens to withdraw\"}}},\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"details\":\"Add a new admin account\",\"params\":{\"account\":\"Account address\"}},\"calculateRewards(address,address)\":{\"details\":\"Calculate currently unclaimed rewards\",\"params\":{\"account\":\"Account address\",\"token\":\"Staking token address\"},\"returns\":{\"_0\":\"Unclaimed rewards\"}},\"calculateRewardsByBlocks(address,address,uint256)\":{\"details\":\"Calculate unclaimed rewards based on blocks\",\"params\":{\"account\":\"User address\",\"futureBlocks\":\"Number of blocks in the future\",\"token\":\"Staking token address\"},\"returns\":{\"_0\":\"Unclaimed rewards\"}},\"getRewardsMultiplier(address,address)\":{\"details\":\"Get the reward multipier based on the account status\",\"params\":{\"account\":\"Account address\",\"token\":\"ERC20 token address\"},\"returns\":{\"_0\":\"Multiplier number (in wei)\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"inflationPerBlock(uint256)\":{\"details\":\"Calculate inflation per block\",\"params\":{\"effectiveTotalStake\":\"Effective total stake\"},\"returns\":{\"_0\":\"Inflation amount, div totalSupply is the inflation rate\"}},\"isAdmin(address)\":{\"details\":\"Check if the address provided is the admin\",\"params\":{\"account\":\"Account address\"}},\"pause()\":{\"details\":\"Called by a pauser to pause, triggers stopped state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceAdmin()\":{\"details\":\"Renouce the admin from the sender's address\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setGuardian(address)\":{\"details\":\"Set pauseGuardian account\",\"params\":{\"account\":\"Account address\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"Called by a pauser to unpause, returns to normal state.\"},\"updateTotalStaked(address,uint256)\":{\"details\":\"When total staked change update inflation index\",\"params\":{\"totalStaked\":\"totalStaked amount\"},\"returns\":{\"_0\":\"Whether succeeded\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdrawRewards(address,address)\":{\"details\":\"Withdraw rewards\",\"params\":{\"token\":\"Staking token address\"},\"returns\":{\"_0\":\"Amount of rewards\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/Comptroller.sol\":\"Comptroller\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcc3fca7831523600d2cac44ec77ee7e079f70c6910b6d7229ff774eaa5f04cdc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xce27d2053e9b7a970532947213c84eed0289ada2d9a91c92b7e1e15f3a466c54\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x57e153cdc803037ecf68a916c6d7eb38d7e4ddbc7ceb6e37c0bee45a5aef9709\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc7d7fe7d5ed5068742927e37b400591153dbe8526cd942cfcf5dbb971ba5e8e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc15eeb888d421aa4dedf46768a0502590d88911cfe5750d3ab9f644a7e5ada95\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"contracts/Controller.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @title Controller component\\n * @dev For easy access to any core components\\n */\\nabstract contract Controller is Initializable, UUPSUpgradeable, AccessControlUpgradeable {\\n    bytes32 public constant ROLE_ADMIN = keccak256(\\\"ROLE_ADMIN\\\");\\n\\n    mapping(address => address) private _admins;\\n    // slither-disable-next-line uninitialized-state\\n    bool private _paused;\\n    // slither-disable-next-line uninitialized-state\\n    address public pauseGuardian;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Controller: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Controller: not paused\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ROLE_ADMIN, msg.sender), \\\"Controller: not admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(pauseGuardian == msg.sender, \\\"Controller: caller does not have the guardian role\\\");\\n        _;\\n    }\\n\\n    //When using minimal deploy, do not call initialize directly during deploy, because msg.sender is the proxyFactory address, and you need to call it manually\\n    function __Controller_init(address admin_) public initializer {\\n        require(admin_ != address(0), \\\"Controller: address zero\\\");\\n        _paused = false;\\n        _admins[admin_] = admin_;\\n        __UUPSUpgradeable_init();\\n        _setupRole(ROLE_ADMIN, admin_);\\n        pauseGuardian = admin_;\\n    }\\n\\n    function _authorizeUpgrade(address) internal view override onlyAdmin {}\\n\\n    /**\\n     * @dev Check if the address provided is the admin\\n     * @param account Account address\\n     */\\n    function isAdmin(address account) public view returns (bool) {\\n        return hasRole(ROLE_ADMIN, account);\\n    }\\n\\n    /**\\n     * @dev Add a new admin account\\n     * @param account Account address\\n     */\\n    function addAdmin(address account) public onlyAdmin {\\n        require(account != address(0), \\\"Controller: address zero\\\");\\n        require(_admins[account] == address(0), \\\"Controller: admin already existed\\\");\\n\\n        _admins[account] = account;\\n        _setupRole(ROLE_ADMIN, account);\\n    }\\n\\n    /**\\n     * @dev Set pauseGuardian account\\n     * @param account Account address\\n     */\\n    function setGuardian(address account) public onlyAdmin {\\n        pauseGuardian = account;\\n    }\\n\\n    /**\\n     * @dev Renouce the admin from the sender's address\\n     */\\n    function renounceAdmin() public {\\n        renounceRole(ROLE_ADMIN, msg.sender);\\n        delete _admins[msg.sender];\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to pause, triggers stopped state.\\n     */\\n    function pause() public onlyGuardian whenNotPaused {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to unpause, returns to normal state.\\n     */\\n    function unpause() public onlyGuardian whenPaused {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x1ab9f8273be3451c97885ff262be84f5cd76aef639a5af185def3c271f8e15c8\",\"license\":\"UNLICENSED\"},\"contracts/WadRayMath.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title WadRayMath library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (halfWAD + a * b) / WAD;\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return (halfB + a * WAD) / b;\\n    }\\n}\\n\",\"keccak256\":\"0x71bd1ff6c89acf5ea6c4242ca0df8a23e3c8a34d03b0cc47280c480a055e6512\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IComptroller.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Comptroller Interface\\n * @dev Work with UnionToken and UserManager to calculate the Union rewards based on the staking info from UserManager, and be ready to support multiple UserManagers for various tokens when we support multiple assets.\\n */\\ninterface IComptroller {\\n    /**\\n     *  @dev Get the reward multipier based on the account status\\n     *  @param account Account address\\n     *  @return Multiplier number (in wei)\\n     */\\n    function getRewardsMultiplier(address account, address token) external view returns (uint256);\\n\\n    /**\\n     *  @dev Withdraw rewards\\n     *  @return Amount of rewards\\n     */\\n    function withdrawRewards(address sender, address token) external returns (uint256);\\n\\n    function addFrozenCoinAge(\\n        address staker,\\n        address token,\\n        uint256 lockedStake,\\n        uint256 lastRepay\\n    ) external;\\n\\n    function updateTotalStaked(address token, uint256 totalStaked) external returns (bool);\\n\\n    /**\\n     *  @dev Calculate unclaimed rewards based on blocks\\n     *  @param account User address\\n     *  @param futureBlocks Number of blocks in the future\\n     *  @return Unclaimed rewards\\n     */\\n    function calculateRewardsByBlocks(\\n        address account,\\n        address token,\\n        uint256 futureBlocks\\n    ) external view returns (uint256);\\n\\n    /**\\n     *  @dev Calculate currently unclaimed rewards\\n     *  @param account Account address\\n     *  @return Unclaimed rewards\\n     */\\n    function calculateRewards(address account, address token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5d123e105a50a0754d83ead322e03235d3c5d01eef65e88254915c7269019816\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMarketRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title MarketRegistry Interface\\n * @dev Registering and managing all the lending markets.\\n */\\ninterface IMarketRegistry {\\n    function getUTokens() external view returns (address[] memory);\\n\\n    function getUserManagers() external view returns (address[] memory);\\n\\n    /**\\n     *  @dev Returns the market address of the token\\n     *  @return The market address\\n     */\\n    function tokens(address token) external view returns (address, address);\\n\\n    function createUToken(\\n        address token,\\n        address assetManager,\\n        uint256 originationFee,\\n        uint256 globalMaxLoan,\\n        uint256 maxBorrow,\\n        uint256 minLoan,\\n        uint256 maxLateBlock,\\n        address interestRateModel\\n    ) external returns (address);\\n\\n    function createUserManager(\\n        address assetManager,\\n        address unionToken,\\n        address stakingToken,\\n        address creditLimitModel,\\n        address inflationIndexModel,\\n        address comptroller\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x879de746f6e47fe5520df55f1d78eb8cfa73f8708a9cb56201aab0146571c804\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IUserManager.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title UserManager Interface\\n * @dev Manages the Union members credit lines, and their vouchees and borrowers info.\\n */\\ninterface IUserManager {\\n    /**\\n     *  @dev Check if the account is a valid member\\n     *  @param account Member address\\n     *  @return Address whether is member\\n     */\\n    function checkIsMember(address account) external view returns (bool);\\n\\n    /**\\n     *  @dev Get member borrowerAddresses\\n     *  @param account Member address\\n     *  @return Address array\\n     */\\n    function getBorrowerAddresses(address account) external view returns (address[] memory);\\n\\n    /**\\n     *  @dev Get member stakerAddresses\\n     *  @param account Member address\\n     *  @return Address array\\n     */\\n    function getStakerAddresses(address account) external view returns (address[] memory);\\n\\n    /**\\n     *  @dev Get member backer asset\\n     *  @param account Member address\\n     *  @param borrower Borrower address\\n     *  @return Trust amount, vouch amount, and locked stake amount\\n     */\\n    function getBorrowerAsset(address account, address borrower)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /**\\n     *  @dev Get member stakers asset\\n     *  @param account Member address\\n     *  @param staker Staker address\\n     *  @return Vouch amount and lockedStake\\n     */\\n    function getStakerAsset(address account, address staker)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /**\\n     *  @dev Get the member's available credit line\\n     *  @param account Member address\\n     *  @return Limit\\n     */\\n    function getCreditLimit(address account) external view returns (int256);\\n\\n    function totalStaked() external view returns (uint256);\\n\\n    function totalFrozen() external view returns (uint256);\\n\\n    function getFrozenCoinAge(address staker, uint256 pastBlocks) external view returns (uint256);\\n\\n    /**\\n     *  @dev Add a new member\\n     *  Accept claims only from the admin\\n     *  @param account Member address\\n     */\\n    function addMember(address account) external;\\n\\n    /**\\n     *  @dev Update the trust amount for exisitng members.\\n     *  @param borrower Borrower address\\n     *  @param trustAmount Trust amount\\n     */\\n    function updateTrust(address borrower, uint256 trustAmount) external;\\n\\n    /**\\n     *  @dev Apply for membership, and burn UnionToken as application fees\\n     *  @param newMember New member address\\n     */\\n    function registerMember(address newMember) external;\\n\\n    /**\\n     *  @dev Stop vouch for other member.\\n     *  @param staker Staker address\\n     *  @param account Account address\\n     */\\n    function cancelVouch(address staker, address account) external;\\n\\n    /**\\n     *  @dev Change the credit limit model\\n     *  Accept claims only from the admin\\n     *  @param newCreditLimitModel New credit limit model address\\n     */\\n    function setCreditLimitModel(address newCreditLimitModel) external;\\n\\n    /**\\n     *  @dev Get the user's locked stake from all his backed loans\\n     *  @param staker Staker address\\n     *  @return LockedStake\\n     */\\n    function getTotalLockedStake(address staker) external view returns (uint256);\\n\\n    /**\\n     *  @dev Get staker's defaulted / frozen staked token amount\\n     *  @param staker Staker address\\n     *  @return Frozen token amount\\n     */\\n    function getTotalFrozenAmount(address staker) external view returns (uint256);\\n\\n    /**\\n     *  @dev Update userManager locked info\\n     *  @param borrower Borrower address\\n     *  @param amount Borrow or repay amount(Including previously accrued interest)\\n     *  @param isBorrow True is borrow, false is repay\\n     */\\n    function updateLockedData(\\n        address borrower,\\n        uint256 amount,\\n        bool isBorrow\\n    ) external;\\n\\n    /**\\n     *  @dev Get the user's deposited stake amount\\n     *  @param account Member address\\n     *  @return Deposited stake amount\\n     */\\n    function getStakerBalance(address account) external view returns (uint256);\\n\\n    /**\\n     *  @dev Stake\\n     *  @param amount Amount\\n     */\\n    function stake(uint256 amount) external;\\n\\n    /**\\n     *  @dev Unstake\\n     *  @param amount Amount\\n     */\\n    function unstake(uint256 amount) external;\\n\\n    /**\\n     *  @dev Update total frozen\\n     *  @param account borrower address\\n     *  @param isOverdue account is overdue\\n     */\\n    function updateTotalFrozen(address account, bool isOverdue) external;\\n\\n    /**\\n     *  @dev Repay user's loan overdue, called only from the lending market\\n     *  @param account User address\\n     *  @param lastRepay Last repay block number\\n     */\\n    function repayLoanOverdue(\\n        address account,\\n        address token,\\n        uint256 lastRepay\\n    ) external;\\n}\\n\",\"keccak256\":\"0x108ccfc9c6f135a9e13833cec324017ddbc2188a964e3d16ee7a09a50622d3fb\",\"license\":\"UNLICENSED\"},\"contracts/token/Comptroller.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"../Controller.sol\\\";\\nimport \\\"../WadRayMath.sol\\\";\\nimport \\\"../interfaces/IComptroller.sol\\\";\\nimport \\\"../interfaces/IMarketRegistry.sol\\\";\\nimport \\\"../interfaces/IUserManager.sol\\\";\\n\\n//For the time being, only the reward calculation of a single token is supported, and the contract needs to be revised after determining the reward calculation scheme of multiple tokens\\ncontract Comptroller is Controller, IComptroller {\\n    using WadRayMath for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    struct Info {\\n        uint256 frozenCoinAge;\\n        uint256 updatedBlock; //last withdraw rewards block\\n        uint256 inflationIndex; //last withdraw rewards inflationIndex\\n        uint256 accrued; //the unionToken accrued but not yet transferred to each user\\n    }\\n\\n    struct UserManagerData {\\n        uint256 userStaked;\\n        uint256 totalFrozen;\\n        uint256 totalStaked;\\n        uint256 userFrozen;\\n        uint256 frozenCoinAge;\\n        uint256 totalLocked;\\n        bool isMember;\\n    }\\n\\n    uint256 public constant INIT_INFLATION_INDEX = 10**18;\\n    uint256 public constant nonMemberRatio = 75 * 10**16; // 75%;\\n    uint256 public constant memberRatio = 10**18; // 100%;\\n    uint256 public halfDecayPoint;\\n    uint256 public gInflationIndex; // store the latest inflation index\\n    uint256 public gLastUpdatedBlock; // block number when updating the inflation index\\n    IERC20Upgradeable public unionToken;\\n    IMarketRegistry public marketRegistry;\\n    //1 address account, 2 address token\\n    mapping(address => mapping(address => Info)) public users;\\n\\n    modifier onlyUserManager(address token) {\\n        require(msg.sender == _getUserManager(token), \\\"UnionToken: only user manager can call\\\");\\n        _;\\n    }\\n\\n    /**\\n     *  @dev Withdraw rewards event\\n     *  @param account The staker's address\\n     *  @param amount The amount of Union tokens to withdraw\\n     */\\n    event LogWithdrawRewards(address indexed account, uint256 amount);\\n\\n    function __Comptroller_init(address unionToken_, address marketRegistry_) public initializer {\\n        Controller.__Controller_init(msg.sender);\\n        unionToken = IERC20Upgradeable(unionToken_);\\n        marketRegistry = IMarketRegistry(marketRegistry_);\\n        gInflationIndex = INIT_INFLATION_INDEX;\\n        gLastUpdatedBlock = block.number;\\n        halfDecayPoint = 100000;\\n    }\\n\\n    function setHalfDecayPoint(uint256 point) public onlyAdmin {\\n        halfDecayPoint = point;\\n    }\\n\\n    /**\\n     *  @dev Get the reward multipier based on the account status\\n     *  @param account Account address\\n     *  @param token ERC20 token address\\n     *  @return Multiplier number (in wei)\\n     */\\n    function getRewardsMultiplier(address account, address token) public view override returns (uint256) {\\n        IUserManager userManagerContract = IUserManager(_getUserManager(token));\\n        uint256 stakingAmount = userManagerContract.getStakerBalance(account);\\n        uint256 lockedStake = userManagerContract.getTotalLockedStake(account);\\n        uint256 totalFrozen = userManagerContract.getTotalFrozenAmount(account);\\n        bool isMember = userManagerContract.checkIsMember(account);\\n        return _getRewardsMultiplier(stakingAmount, lockedStake, totalFrozen, isMember);\\n    }\\n\\n    /**\\n     *  @dev Withdraw rewards\\n     *  @param token Staking token address\\n     *  @return Amount of rewards\\n     */\\n    function withdrawRewards(address sender, address token)\\n        external\\n        override\\n        whenNotPaused\\n        onlyUserManager(token)\\n        returns (uint256)\\n    {\\n        uint256 amount = calculateRewardsByBlocks(sender, token, 0);\\n        IUserManager userManagerContract = IUserManager(_getUserManager(token));\\n        // update the global states\\n        uint256 totalStaked_ = userManagerContract.totalStaked() - userManagerContract.totalFrozen();\\n        gInflationIndex = _getInflationIndexNew(totalStaked_, block.number - gLastUpdatedBlock);\\n        gLastUpdatedBlock = block.number;\\n        users[sender][token].frozenCoinAge = 0;\\n        users[sender][token].updatedBlock = block.number;\\n        users[sender][token].inflationIndex = gInflationIndex;\\n        if (unionToken.balanceOf(address(this)) >= amount && amount > 0) {\\n            unionToken.safeTransfer(sender, amount);\\n            users[sender][token].accrued = 0;\\n            emit LogWithdrawRewards(sender, amount);\\n\\n            return amount;\\n        } else {\\n            users[sender][token].accrued = amount;\\n            emit LogWithdrawRewards(sender, 0);\\n\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     *  @dev Calculate unclaimed rewards based on blocks\\n     *  @param account User address\\n     *  @param token Staking token address\\n     *  @param futureBlocks Number of blocks in the future\\n     *  @return Unclaimed rewards\\n     */\\n    function calculateRewardsByBlocks(\\n        address account,\\n        address token,\\n        uint256 futureBlocks\\n    ) public view override returns (uint256) {\\n        IUserManager userManagerContract = IUserManager(_getUserManager(token));\\n        Info memory userInfo = users[account][token];\\n        UserManagerData memory userManagerData;\\n\\n        userManagerData.totalFrozen = userManagerContract.totalFrozen();\\n        userManagerData.userStaked = userManagerContract.getStakerBalance(account);\\n        userManagerData.userFrozen = userManagerContract.getTotalFrozenAmount(account);\\n        userManagerData.totalStaked = userManagerContract.totalStaked() - userManagerData.totalFrozen;\\n\\n        uint256 lastUpdatedBlock = userInfo.updatedBlock;\\n        if (block.number < lastUpdatedBlock) {\\n            lastUpdatedBlock = block.number;\\n        }\\n\\n        uint256 pastBlocks = block.number - lastUpdatedBlock + futureBlocks;\\n        userManagerData.frozenCoinAge =\\n            userManagerContract.getFrozenCoinAge(account, pastBlocks) +\\n            userInfo.frozenCoinAge;\\n\\n        userManagerData.totalLocked = userManagerContract.getTotalLockedStake(account);\\n        userManagerData.isMember = userManagerContract.checkIsMember(account);\\n\\n        uint256 inflationIndex = _getRewardsMultiplier(\\n            userManagerData.userStaked,\\n            userManagerData.totalLocked,\\n            userManagerData.userFrozen,\\n            userManagerData.isMember\\n        );\\n\\n        return\\n            userInfo.accrued +\\n            _calculateRewards(\\n                account,\\n                token,\\n                userManagerData.totalStaked,\\n                userManagerData.userStaked,\\n                userManagerData.frozenCoinAge,\\n                pastBlocks,\\n                inflationIndex\\n            );\\n    }\\n\\n    /**\\n     *  @dev Calculate currently unclaimed rewards\\n     *  @param account Account address\\n     *  @param token Staking token address\\n     *  @return Unclaimed rewards\\n     */\\n    function calculateRewards(address account, address token) public view override returns (uint256) {\\n        return calculateRewardsByBlocks(account, token, 0);\\n    }\\n\\n    /**\\n     *  @dev When total staked change update inflation index\\n     *  @param totalStaked totalStaked amount\\n     *  @return Whether succeeded\\n     */\\n    function updateTotalStaked(address token, uint256 totalStaked)\\n        external\\n        override\\n        whenNotPaused\\n        onlyUserManager(token)\\n        returns (bool)\\n    {\\n        if (totalStaked > 0) {\\n            gInflationIndex = _getInflationIndexNew(totalStaked, block.number - gLastUpdatedBlock);\\n        }\\n        gLastUpdatedBlock = block.number;\\n\\n        return true;\\n    }\\n\\n    function addFrozenCoinAge(\\n        address staker,\\n        address token,\\n        uint256 lockedStake,\\n        uint256 lastRepay\\n    ) external override onlyUserManager(token) {\\n        uint256 lastBlock = users[staker][token].updatedBlock;\\n        uint256 blocks;\\n        if (lastBlock > lastRepay) {\\n            // Frozen CoinAge here has been accounted for when the user withdraws the rewards, so here just need to calculate the delta between block.number and lastBlock\\n            blocks = block.number - lastBlock;\\n        } else {\\n            blocks = block.number - lastRepay;\\n        }\\n\\n        users[staker][token].frozenCoinAge += lockedStake * blocks;\\n    }\\n\\n    /**\\n     *  @dev Calculate new inflation index based on # of blocks\\n     *  @param totalStaked_ Number of total staked tokens in the system\\n     *  @param blockDelta Number of blocks\\n     *  @return New inflation index\\n     */\\n    function _getInflationIndexNew(uint256 totalStaked_, uint256 blockDelta) private view returns (uint256) {\\n        if (totalStaked_ == 0) {\\n            return INIT_INFLATION_INDEX;\\n        }\\n\\n        if (blockDelta == 0) {\\n            return gInflationIndex;\\n        }\\n\\n        return _getInflationIndex(totalStaked_, gInflationIndex, blockDelta);\\n    }\\n\\n    function _calculateRewards(\\n        address account,\\n        address token,\\n        uint256 totalStaked,\\n        uint256 userStaked,\\n        uint256 frozenCoinAge,\\n        uint256 pastBlocks,\\n        uint256 inflationIndex\\n    ) private view returns (uint256) {\\n        uint256 startInflationIndex = users[account][token].inflationIndex;\\n        require(userStaked * pastBlocks >= frozenCoinAge, \\\" Comptroller: frozen coin age error\\\");\\n\\n        if (userStaked == 0 || totalStaked == 0 || startInflationIndex == 0 || pastBlocks == 0) {\\n            return 0;\\n        }\\n\\n        uint256 effectiveStakeAmount = (userStaked * pastBlocks - frozenCoinAge) / pastBlocks;\\n\\n        uint256 curInflationIndex = _getInflationIndexNew(totalStaked, pastBlocks);\\n\\n        require(curInflationIndex >= startInflationIndex, \\\"Comptroller: inflationIndex error\\\");\\n\\n        return (curInflationIndex - startInflationIndex).wadMul(effectiveStakeAmount).wadMul(inflationIndex);\\n    }\\n\\n    function _getUserManager(address token) private view returns (address userManager) {\\n        (, userManager) = marketRegistry.tokens(token);\\n    }\\n\\n    /**\\n     *  @dev Calculate inflation per block\\n     *  @param effectiveTotalStake Effective total stake\\n     *  @return Inflation amount, div totalSupply is the inflation rate\\n     */\\n    function inflationPerBlock(uint256 effectiveTotalStake) public view returns (uint256) {\\n        uint256 index = effectiveTotalStake / halfDecayPoint;\\n        return lookup(index);\\n    }\\n\\n    function lookup(uint256 index) public pure returns (uint256) {\\n        if (index <= 0.00001 * 10**18) {\\n            return 1 * 10**18;\\n        } else if (index <= 0.0001 * 10**18) {\\n            return 0.9 * 10**18;\\n        } else if (index <= 0.001 * 10**18) {\\n            return 0.8 * 10**18;\\n        } else if (index <= 0.01 * 10**18) {\\n            return 0.7 * 10**18;\\n        } else if (index <= 0.1 * 10**18) {\\n            return 0.6 * 10**18;\\n        } else if (index <= 1 * 10**18) {\\n            return 0.5 * 10**18;\\n        } else if (index <= 5 * 10**18) {\\n            return 0.25 * 10**18;\\n        } else if (index <= 10 * 10**18) {\\n            return 0.1 * 10**18;\\n        } else if (index <= 100 * 10**18) {\\n            return 0.01 * 10**18;\\n        } else if (index <= 1000 * 10**18) {\\n            return 0.001 * 10**18;\\n        } else if (index <= 10000 * 10**18) {\\n            return 0.0001 * 10**18;\\n        } else if (index <= 100000 * 10**18) {\\n            return 0.00001 * 10**18;\\n        } else {\\n            return 0.000001 * 10**18;\\n        }\\n    }\\n\\n    function _getInflationIndex(\\n        uint256 effectiveAmount,\\n        uint256 inflationIndex,\\n        uint256 blockDelta\\n    ) private view returns (uint256) {\\n        return blockDelta * inflationPerBlock(effectiveAmount).wadDiv(effectiveAmount) + inflationIndex;\\n    }\\n\\n    function _getRewardsMultiplier(\\n        uint256 userStaked,\\n        uint256 lockedStake,\\n        uint256 totalFrozen_,\\n        bool isMember_\\n    ) private pure returns (uint256) {\\n        if (isMember_) {\\n            if (userStaked == 0 || totalFrozen_ >= lockedStake || totalFrozen_ >= userStaked) {\\n                return memberRatio;\\n            }\\n\\n            uint256 effectiveLockedAmount = lockedStake - totalFrozen_;\\n            uint256 effectiveStakeAmount = userStaked - totalFrozen_;\\n\\n            uint256 lendingRatio = effectiveLockedAmount.wadDiv(effectiveStakeAmount);\\n\\n            return lendingRatio + memberRatio;\\n        } else {\\n            return nonMemberRatio;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3d290e4d8ddd72c86eaa7127f28787333e50a41edb38fe2afa825f1de8fa9253\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612e20806100206000396000f3fe6080604052600436106102245760003560e01c8063677e1de711610123578063973e5ad5116100ab578063d391014b1161006f578063d391014b14610665578063d547741f14610687578063e20981ca146106a7578063ecb96fe6146106c7578063f70222e1146106e857600080fd5b8063973e5ad5146105fd578063a068b33c14610614578063a217fddf14610630578063a84afb3014610645578063cf996b601461061457600080fd5b80637f38a81a116100f25780637f38a81a146105775780638456cb59146105935780638a0dac4a146105a85780638bad0c0a146105c857806391d14854146105dd57600080fd5b8063677e1de7146104f75780636c461a7314610517578063704802751461053757806377e90d061461055757600080fd5b80632f2ff15d116101b15780634f1ef286116101755780634f1ef28614610427578063552563131461043a5780635c975abb1461045a5780635e80536a14610472578063624a169c146104e057600080fd5b80632f2ff15d1461039b57806336568abe146103bb5780633659cfe6146103db5780633f4ba83a146103fb57806340a766341461041057600080fd5b80630cc9c970116101f85780630cc9c970146102cc578063248a9ca3146102ee57806324a3d6221461031e57806324d7806c1461035b578063267042601461037b57600080fd5b8062c9d5091461022957806301ffc9a71461025c57806304a328831461028c5780630a874df6146102ac575b600080fd5b34801561023557600080fd5b50610249610244366004612837565b610709565b6040519081526020015b60405180910390f35b34801561026857600080fd5b5061027c610277366004612a68565b610720565b6040519015158152602001610253565b34801561029857600080fd5b506102496102a7366004612a2c565b610755565b3480156102b857600080fd5b506102496102c7366004612a2c565b610779565b3480156102d857600080fd5b506102ec6102e7366004612a2c565b6108e9565b005b3480156102fa57600080fd5b50610249610309366004612a2c565b600090815260c9602052604090206001015490565b34801561032a57600080fd5b5060fc546103439061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610253565b34801561036757600080fd5b5061027c61037636600461281b565b61092c565b34801561038757600080fd5b5061027c6103963660046129e1565b610946565b3480156103a757600080fd5b506102ec6103b6366004612a44565b6109da565b3480156103c757600080fd5b506102ec6103d6366004612a44565b610a05565b3480156103e757600080fd5b506102ec6103f636600461281b565b610a83565b34801561040757600080fd5b506102ec610aaa565b34801561041c57600080fd5b5061024961012f5481565b6102ec610435366004612922565b610b64565b34801561044657600080fd5b506102ec6104553660046128dd565b610b79565b34801561046657600080fd5b5060fc5460ff1661027c565b34801561047e57600080fd5b506104c061048d366004612837565b61013460209081526000928352604080842090915290825290208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610253565b3480156104ec57600080fd5b506102496101305481565b34801561050357600080fd5b506102ec610512366004612837565b610c56565b34801561052357600080fd5b506102ec61053236600461281b565b610d18565b34801561054357600080fd5b506102ec61055236600461281b565b610e48565b34801561056357600080fd5b5061024961057236600461289d565b610f80565b34801561058357600080fd5b50610249670a688906bd8b000081565b34801561059f57600080fd5b506102ec611421565b3480156105b457600080fd5b506102ec6105c336600461281b565b6114b0565b3480156105d457600080fd5b506102ec61150c565b3480156105e957600080fd5b5061027c6105f8366004612a44565b611543565b34801561060957600080fd5b506102496101315481565b34801561062057600080fd5b50610249670de0b6b3a764000081565b34801561063c57600080fd5b50610249600081565b34801561065157600080fd5b50610249610660366004612837565b61156e565b34801561067157600080fd5b50610249600080516020612da483398151915281565b34801561069357600080fd5b506102ec6106a2366004612a44565b611790565b3480156106b357600080fd5b506102496106c2366004612837565b6117b6565b3480156106d357600080fd5b5061013354610343906001600160a01b031681565b3480156106f457600080fd5b5061013254610343906001600160a01b031681565b600061071783836000610f80565b90505b92915050565b60006001600160e01b03198216637965db0b60e01b148061071a57506301ffc9a760e01b6001600160e01b031983161461071a565b60008061012f54836107679190612cc5565b905061077281610779565b9392505050565b60006509184e72a00082116107975750670de0b6b3a7640000919050565b655af3107a400082116107b35750670c7d713b49da0000919050565b66038d7ea4c6800082116107d05750670b1a2bc2ec500000919050565b662386f26fc1000082116107ed57506709b6e64a8ec60000919050565b67016345785d8a0000821161080b5750670853a0d2313c0000919050565b670de0b6b3a7640000821161082957506706f05b59d3b20000919050565b674563918244f40000821161084757506703782dace9d90000919050565b678ac7230489e800008211610865575067016345785d8a0000919050565b68056bc75e2d6310000082116108835750662386f26fc10000919050565b683635c9adc5dea0000082116108a1575066038d7ea4c68000919050565b69021e19e0c9bab240000082116108bf5750655af3107a4000919050565b69152d02c7e14af680000082116108dd57506509184e72a000919050565b5064e8d4a51000919050565b610901600080516020612da483398151915233611543565b6109265760405162461bcd60e51b815260040161091d90612b6c565b60405180910390fd5b61012f55565b600061071a600080516020612da483398151915283611543565b60fc5460009060ff161561096c5760405162461bcd60e51b815260040161091d90612c81565b8261097681611afe565b6001600160a01b0316336001600160a01b0316146109a65760405162461bcd60e51b815260040161091d90612bed565b82156109c9576109c48361013154436109bf9190612d04565b611b7c565b610130555b4361013155600191505b5092915050565b600082815260c960205260409020600101546109f68133611baf565b610a008383611c13565b505050565b6001600160a01b0381163314610a755760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161091d565b610a7f8282611c99565b5050565b610a8c81611d00565b610aa781604051806020016040528060008152506000611d34565b50565b60fc5461010090046001600160a01b03163314610ad95760405162461bcd60e51b815260040161091d90612b9b565b60fc5460ff16610b245760405162461bcd60e51b815260206004820152601660248201527510dbdb9d1c9bdb1b195c8e881b9bdd081c185d5cd95960521b604482015260640161091d565b60fc805460ff191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a1565b610b6d82611d00565b610a7f82826001611d34565b82610b8381611afe565b6001600160a01b0316336001600160a01b031614610bb35760405162461bcd60e51b815260040161091d90612bed565b6001600160a01b038086166000908152610134602090815260408083209388168352929052908120600101549083821115610bf957610bf28243612d04565b9050610c06565b610c038443612d04565b90505b610c108186612ce5565b6001600160a01b03808916600090815261013460209081526040808320938b1683529290529081208054909190610c48908490612cad565b909155505050505050505050565b600054610100900460ff1680610c6f575060005460ff16155b610c8b5760405162461bcd60e51b815260040161091d90612c33565b600054610100900460ff16158015610cad576000805461ffff19166101011790555b610cb633610d18565b61013280546001600160a01b038086166001600160a01b031992831617909255610133805492851692909116919091179055670de0b6b3a7640000610130554361013155620186a061012f558015610a00576000805461ff0019169055505050565b600054610100900460ff1680610d31575060005460ff16155b610d4d5760405162461bcd60e51b815260040161091d90612c33565b600054610100900460ff16158015610d6f576000805461ffff19166101011790555b6001600160a01b038216610dc05760405162461bcd60e51b8152602060048201526018602482015277436f6e74726f6c6c65723a2061646472657373207a65726f60401b604482015260640161091d565b60fc805460ff191690556001600160a01b038216600081815260fb6020526040902080546001600160a01b0319169091179055610dfb611ebc565b610e13600080516020612da483398151915283611f37565b60fc8054610100600160a81b0319166101006001600160a01b038516021790558015610a7f576000805461ff00191690555050565b610e60600080516020612da483398151915233611543565b610e7c5760405162461bcd60e51b815260040161091d90612b6c565b6001600160a01b038116610ecd5760405162461bcd60e51b8152602060048201526018602482015277436f6e74726f6c6c65723a2061646472657373207a65726f60401b604482015260640161091d565b6001600160a01b03818116600090815260fb60205260409020541615610f3f5760405162461bcd60e51b815260206004820152602160248201527f436f6e74726f6c6c65723a2061646d696e20616c7265616479206578697374656044820152601960fa1b606482015260840161091d565b6001600160a01b038116600081815260fb6020526040902080546001600160a01b0319169091179055610aa7600080516020612da483398151915282611f37565b600080610f8c84611afe565b6001600160a01b03808716600090815261013460209081526040808320938916835292815282822083516080808201865282548252600183015482850152600283015482870152600390920154606080830191909152855160e081018752858152938401859052948301849052938201839052810182905260a0810182905260c081019190915291925090826001600160a01b0316631e7f87bc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561105057600080fd5b505afa158015611064573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110889190612a90565b6020820152604051632640d9db60e01b81526001600160a01b038881166004830152841690632640d9db9060240160206040518083038186803b1580156110ce57600080fd5b505afa1580156110e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111069190612a90565b81526040516306e4c5a760e31b81526001600160a01b0388811660048301528416906337262d389060240160206040518083038186803b15801561114957600080fd5b505afa15801561115d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111819190612a90565b8160600181815250508060200151836001600160a01b031663817b1cd26040518163ffffffff1660e01b815260040160206040518083038186803b1580156111c857600080fd5b505afa1580156111dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112009190612a90565b61120a9190612d04565b604082015260208201514381111561121f5750435b60008661122c8343612d04565b6112369190612cad565b8451604051636eb1fbb160e11b81526001600160a01b038c8116600483015260248201849052929350909187169063dd63f7629060440160206040518083038186803b15801561128557600080fd5b505afa158015611299573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bd9190612a90565b6112c79190612cad565b6080840152604051632ba6d6dd60e11b81526001600160a01b038a8116600483015286169063574dadba9060240160206040518083038186803b15801561130d57600080fd5b505afa158015611321573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113459190612a90565b60a08401526040516321d2a57360e01b81526001600160a01b038a811660048301528616906321d2a5739060240160206040518083038186803b15801561138b57600080fd5b505afa15801561139f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c39190612a0c565b151560c08401819052835160a085015160608601516000936113e793929190611f41565b90506114048a8a8660400151876000015188608001518787611fce565b85606001516114139190612cad565b9a9950505050505050505050565b60fc5461010090046001600160a01b031633146114505760405162461bcd60e51b815260040161091d90612b9b565b60fc5460ff16156114735760405162461bcd60e51b815260040161091d90612c81565b60fc805460ff191660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001610b5a565b6114c8600080516020612da483398151915233611543565b6114e45760405162461bcd60e51b815260040161091d90612b6c565b60fc80546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b611524600080516020612da483398151915233610a05565b33600090815260fb6020526040902080546001600160a01b0319169055565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60008061157a83611afe565b604051632640d9db60e01b81526001600160a01b038681166004830152919250600091831690632640d9db9060240160206040518083038186803b1580156115c157600080fd5b505afa1580156115d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f99190612a90565b604051632ba6d6dd60e11b81526001600160a01b03878116600483015291925060009184169063574dadba9060240160206040518083038186803b15801561164057600080fd5b505afa158015611654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116789190612a90565b6040516306e4c5a760e31b81526001600160a01b0388811660048301529192506000918516906337262d389060240160206040518083038186803b1580156116bf57600080fd5b505afa1580156116d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f79190612a90565b6040516321d2a57360e01b81526001600160a01b0389811660048301529192506000918616906321d2a5739060240160206040518083038186803b15801561173e57600080fd5b505afa158015611752573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117769190612a0c565b905061178484848484611f41565b98975050505050505050565b600082815260c960205260409020600101546117ac8133611baf565b610a008383611c99565b60fc5460009060ff16156117dc5760405162461bcd60e51b815260040161091d90612c81565b816117e681611afe565b6001600160a01b0316336001600160a01b0316146118165760405162461bcd60e51b815260040161091d90612bed565b600061182485856000610f80565b9050600061183185611afe565b90506000816001600160a01b0316631e7f87bc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561186e57600080fd5b505afa158015611882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a69190612a90565b826001600160a01b031663817b1cd26040518163ffffffff1660e01b815260040160206040518083038186803b1580156118df57600080fd5b505afa1580156118f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119179190612a90565b6119219190612d04565b90506119368161013154436109bf9190612d04565b610130908155436101318190556001600160a01b038981166000908152610134602090815260408083208c85168452909152808220918255600182019390935592546002909301929092556101325490516370a0823160e01b8152306004820152859291909116906370a082319060240160206040518083038186803b1580156119bf57600080fd5b505afa1580156119d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f79190612a90565b10158015611a055750600083115b15611a925761013254611a22906001600160a01b0316888561213e565b6001600160a01b03808816600081815261013460209081526040808320948b1683529390528281206003015590517f9074ae8fe137f8dd6d158c0e5f1d0b3169b04ba4be11a18ec03b9269b8e91a1a90611a7f9086815260200190565b60405180910390a28294505050506109d3565b6001600160a01b03878116600081815261013460209081526040808320948b168352938152838220600301879055925190815290917f9074ae8fe137f8dd6d158c0e5f1d0b3169b04ba4be11a18ec03b9269b8e91a1a910160405180910390a2600094505050506109d3565b6101335460405163e486033960e01b81526001600160a01b038381166004830152600092169063e486033990602401604080518083038186803b158015611b4457600080fd5b505afa158015611b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610772919061286f565b600082611b925750670de0b6b3a764000061071a565b81611ba157506101305461071a565b610717836101305484612190565b611bb98282611543565b610a7f57611bd1816001600160a01b031660146121ba565b611bdc8360206121ba565b604051602001611bed929190612ac4565b60408051601f198184030181529082905262461bcd60e51b825261091d91600401612b39565b611c1d8282611543565b610a7f57600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611c553390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611ca38282611543565b15610a7f57600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611d18600080516020612da483398151915233611543565b610aa75760405162461bcd60e51b815260040161091d90612b6c565b6000611d677f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b9050611d728461239c565b600083511180611d7f5750815b15611d9057611d8e8484612441565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16611eb557805460ff191660011781556040516001600160a01b0383166024820152611e0f90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052612441565b50805460ff191681557f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b03838116911614611eac5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b606482015260840161091d565b611eb58561252c565b5050505050565b600054610100900460ff1680611ed5575060005460ff16155b611ef15760405162461bcd60e51b815260040161091d90612c33565b600054610100900460ff16158015611f13576000805461ffff19166101011790555b611f1b61256c565b611f2361256c565b8015610aa7576000805461ff001916905550565b610a7f8282611c13565b60008115611fbb57841580611f565750838310155b80611f615750848310155b15611f755750670de0b6b3a7640000611fc6565b6000611f818486612d04565b90506000611f8f8588612d04565b90506000611f9d83836125d6565b9050611fb1670de0b6b3a764000082612cad565b9350505050611fc6565b50670a688906bd8b00005b949350505050565b6001600160a01b03808816600090815261013460209081526040808320938a16835292905290812060020154846120058588612ce5565b101561205f5760405162461bcd60e51b815260206004820152602360248201527f20436f6d7074726f6c6c65723a2066726f7a656e20636f696e206167652065726044820152623937b960e91b606482015260840161091d565b85158061206a575086155b80612073575080155b8061207c575083155b1561208b576000915050612133565b60008486612099828a612ce5565b6120a39190612d04565b6120ad9190612cc5565b905060006120bb8987611b7c565b9050828110156121175760405162461bcd60e51b815260206004820152602160248201527f436f6d7074726f6c6c65723a20696e666c6174696f6e496e646578206572726f6044820152603960f91b606482015260840161091d565b61212d8561212784818786612d04565b9061260d565b93505050505b979650505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a00908490612649565b6000826121a6856121a087610755565b906125d6565b6121b09084612ce5565b611fc69190612cad565b606060006121c9836002612ce5565b6121d4906002612cad565b67ffffffffffffffff8111156121fa57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612224576020820181803683370190505b509050600360fc1b8160008151811061224d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061228a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006122ae846002612ce5565b6122b9906001612cad565b90505b600181111561234d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106122fb57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061231f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361234681612d4b565b90506122bc565b5083156107175760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161091d565b803b6124005760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161091d565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6124a05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161091d565b600080846001600160a01b0316846040516124bb9190612aa8565b600060405180830381855af49150503d80600081146124f6576040519150601f19603f3d011682016040523d82523d6000602084013e6124fb565b606091505b50915091506125238282604051806060016040528060278152602001612dc46027913961271b565b95945050505050565b6125358161239c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff1680612585575060005460ff16155b6125a15760405162461bcd60e51b815260040161091d90612c33565b600054610100900460ff16158015611f23576000805461ffff19166101011790558015610aa7576000805461ff001916905550565b6000806125e4600284612cc5565b9050826125f9670de0b6b3a764000086612ce5565b6126039083612cad565b611fc69190612cc5565b6000670de0b6b3a76400006126228385612ce5565b6126356002670de0b6b3a7640000612cc5565b61263f9190612cad565b6107179190612cc5565b600061269e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127549092919063ffffffff16565b805190915015610a0057808060200190518101906126bc9190612a0c565b610a005760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161091d565b6060831561272a575081610772565b82511561273a5782518084602001fd5b8160405162461bcd60e51b815260040161091d9190612b39565b6060611fc6848460008585843b6127ad5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161091d565b600080866001600160a01b031685876040516127c99190612aa8565b60006040518083038185875af1925050503d8060008114612806576040519150601f19603f3d011682016040523d82523d6000602084013e61280b565b606091505b509150915061213382828661271b565b60006020828403121561282c578081fd5b813561071781612d8e565b60008060408385031215612849578081fd5b823561285481612d8e565b9150602083013561286481612d8e565b809150509250929050565b60008060408385031215612881578182fd5b825161288c81612d8e565b602084015190925061286481612d8e565b6000806000606084860312156128b1578081fd5b83356128bc81612d8e565b925060208401356128cc81612d8e565b929592945050506040919091013590565b600080600080608085870312156128f2578081fd5b84356128fd81612d8e565b9350602085013561290d81612d8e565b93969395505050506040820135916060013590565b60008060408385031215612934578182fd5b823561293f81612d8e565b9150602083013567ffffffffffffffff8082111561295b578283fd5b818501915085601f83011261296e578283fd5b81358181111561298057612980612d78565b604051601f8201601f19908116603f011681019083821181831017156129a8576129a8612d78565b816040528281528860208487010111156129c0578586fd5b82602086016020830137856020848301015280955050505050509250929050565b600080604083850312156129f3578182fd5b82356129fe81612d8e565b946020939093013593505050565b600060208284031215612a1d578081fd5b81518015158114610717578182fd5b600060208284031215612a3d578081fd5b5035919050565b60008060408385031215612a56578182fd5b82359150602083013561286481612d8e565b600060208284031215612a79578081fd5b81356001600160e01b031981168114610717578182fd5b600060208284031215612aa1578081fd5b5051919050565b60008251612aba818460208701612d1b565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612afc816017850160208801612d1b565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612b2d816028840160208801612d1b565b01602801949350505050565b6020815260008251806020840152612b58816040850160208701612d1b565b601f01601f19169190910160400192915050565b60208082526015908201527421b7b73a3937b63632b91d103737ba1030b236b4b760591b604082015260600190565b60208082526032908201527f436f6e74726f6c6c65723a2063616c6c657220646f6573206e6f7420686176656040820152712074686520677561726469616e20726f6c6560701b606082015260800190565b60208082526026908201527f556e696f6e546f6b656e3a206f6e6c792075736572206d616e616765722063616040820152651b8818d85b1b60d21b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526012908201527110dbdb9d1c9bdb1b195c8e881c185d5cd95960721b604082015260600190565b60008219821115612cc057612cc0612d62565b500190565b600082612ce057634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612cff57612cff612d62565b500290565b600082821015612d1657612d16612d62565b500390565b60005b83811015612d36578181015183820152602001612d1e565b83811115612d45576000848401525b50505050565b600081612d5a57612d5a612d62565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610aa757600080fdfe2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca025096416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122058e2d7347bf6fe4031dd60a0fe8bd8d737cbd65100e3731b60013bd09181d45f64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106102245760003560e01c8063677e1de711610123578063973e5ad5116100ab578063d391014b1161006f578063d391014b14610665578063d547741f14610687578063e20981ca146106a7578063ecb96fe6146106c7578063f70222e1146106e857600080fd5b8063973e5ad5146105fd578063a068b33c14610614578063a217fddf14610630578063a84afb3014610645578063cf996b601461061457600080fd5b80637f38a81a116100f25780637f38a81a146105775780638456cb59146105935780638a0dac4a146105a85780638bad0c0a146105c857806391d14854146105dd57600080fd5b8063677e1de7146104f75780636c461a7314610517578063704802751461053757806377e90d061461055757600080fd5b80632f2ff15d116101b15780634f1ef286116101755780634f1ef28614610427578063552563131461043a5780635c975abb1461045a5780635e80536a14610472578063624a169c146104e057600080fd5b80632f2ff15d1461039b57806336568abe146103bb5780633659cfe6146103db5780633f4ba83a146103fb57806340a766341461041057600080fd5b80630cc9c970116101f85780630cc9c970146102cc578063248a9ca3146102ee57806324a3d6221461031e57806324d7806c1461035b578063267042601461037b57600080fd5b8062c9d5091461022957806301ffc9a71461025c57806304a328831461028c5780630a874df6146102ac575b600080fd5b34801561023557600080fd5b50610249610244366004612837565b610709565b6040519081526020015b60405180910390f35b34801561026857600080fd5b5061027c610277366004612a68565b610720565b6040519015158152602001610253565b34801561029857600080fd5b506102496102a7366004612a2c565b610755565b3480156102b857600080fd5b506102496102c7366004612a2c565b610779565b3480156102d857600080fd5b506102ec6102e7366004612a2c565b6108e9565b005b3480156102fa57600080fd5b50610249610309366004612a2c565b600090815260c9602052604090206001015490565b34801561032a57600080fd5b5060fc546103439061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610253565b34801561036757600080fd5b5061027c61037636600461281b565b61092c565b34801561038757600080fd5b5061027c6103963660046129e1565b610946565b3480156103a757600080fd5b506102ec6103b6366004612a44565b6109da565b3480156103c757600080fd5b506102ec6103d6366004612a44565b610a05565b3480156103e757600080fd5b506102ec6103f636600461281b565b610a83565b34801561040757600080fd5b506102ec610aaa565b34801561041c57600080fd5b5061024961012f5481565b6102ec610435366004612922565b610b64565b34801561044657600080fd5b506102ec6104553660046128dd565b610b79565b34801561046657600080fd5b5060fc5460ff1661027c565b34801561047e57600080fd5b506104c061048d366004612837565b61013460209081526000928352604080842090915290825290208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610253565b3480156104ec57600080fd5b506102496101305481565b34801561050357600080fd5b506102ec610512366004612837565b610c56565b34801561052357600080fd5b506102ec61053236600461281b565b610d18565b34801561054357600080fd5b506102ec61055236600461281b565b610e48565b34801561056357600080fd5b5061024961057236600461289d565b610f80565b34801561058357600080fd5b50610249670a688906bd8b000081565b34801561059f57600080fd5b506102ec611421565b3480156105b457600080fd5b506102ec6105c336600461281b565b6114b0565b3480156105d457600080fd5b506102ec61150c565b3480156105e957600080fd5b5061027c6105f8366004612a44565b611543565b34801561060957600080fd5b506102496101315481565b34801561062057600080fd5b50610249670de0b6b3a764000081565b34801561063c57600080fd5b50610249600081565b34801561065157600080fd5b50610249610660366004612837565b61156e565b34801561067157600080fd5b50610249600080516020612da483398151915281565b34801561069357600080fd5b506102ec6106a2366004612a44565b611790565b3480156106b357600080fd5b506102496106c2366004612837565b6117b6565b3480156106d357600080fd5b5061013354610343906001600160a01b031681565b3480156106f457600080fd5b5061013254610343906001600160a01b031681565b600061071783836000610f80565b90505b92915050565b60006001600160e01b03198216637965db0b60e01b148061071a57506301ffc9a760e01b6001600160e01b031983161461071a565b60008061012f54836107679190612cc5565b905061077281610779565b9392505050565b60006509184e72a00082116107975750670de0b6b3a7640000919050565b655af3107a400082116107b35750670c7d713b49da0000919050565b66038d7ea4c6800082116107d05750670b1a2bc2ec500000919050565b662386f26fc1000082116107ed57506709b6e64a8ec60000919050565b67016345785d8a0000821161080b5750670853a0d2313c0000919050565b670de0b6b3a7640000821161082957506706f05b59d3b20000919050565b674563918244f40000821161084757506703782dace9d90000919050565b678ac7230489e800008211610865575067016345785d8a0000919050565b68056bc75e2d6310000082116108835750662386f26fc10000919050565b683635c9adc5dea0000082116108a1575066038d7ea4c68000919050565b69021e19e0c9bab240000082116108bf5750655af3107a4000919050565b69152d02c7e14af680000082116108dd57506509184e72a000919050565b5064e8d4a51000919050565b610901600080516020612da483398151915233611543565b6109265760405162461bcd60e51b815260040161091d90612b6c565b60405180910390fd5b61012f55565b600061071a600080516020612da483398151915283611543565b60fc5460009060ff161561096c5760405162461bcd60e51b815260040161091d90612c81565b8261097681611afe565b6001600160a01b0316336001600160a01b0316146109a65760405162461bcd60e51b815260040161091d90612bed565b82156109c9576109c48361013154436109bf9190612d04565b611b7c565b610130555b4361013155600191505b5092915050565b600082815260c960205260409020600101546109f68133611baf565b610a008383611c13565b505050565b6001600160a01b0381163314610a755760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161091d565b610a7f8282611c99565b5050565b610a8c81611d00565b610aa781604051806020016040528060008152506000611d34565b50565b60fc5461010090046001600160a01b03163314610ad95760405162461bcd60e51b815260040161091d90612b9b565b60fc5460ff16610b245760405162461bcd60e51b815260206004820152601660248201527510dbdb9d1c9bdb1b195c8e881b9bdd081c185d5cd95960521b604482015260640161091d565b60fc805460ff191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a1565b610b6d82611d00565b610a7f82826001611d34565b82610b8381611afe565b6001600160a01b0316336001600160a01b031614610bb35760405162461bcd60e51b815260040161091d90612bed565b6001600160a01b038086166000908152610134602090815260408083209388168352929052908120600101549083821115610bf957610bf28243612d04565b9050610c06565b610c038443612d04565b90505b610c108186612ce5565b6001600160a01b03808916600090815261013460209081526040808320938b1683529290529081208054909190610c48908490612cad565b909155505050505050505050565b600054610100900460ff1680610c6f575060005460ff16155b610c8b5760405162461bcd60e51b815260040161091d90612c33565b600054610100900460ff16158015610cad576000805461ffff19166101011790555b610cb633610d18565b61013280546001600160a01b038086166001600160a01b031992831617909255610133805492851692909116919091179055670de0b6b3a7640000610130554361013155620186a061012f558015610a00576000805461ff0019169055505050565b600054610100900460ff1680610d31575060005460ff16155b610d4d5760405162461bcd60e51b815260040161091d90612c33565b600054610100900460ff16158015610d6f576000805461ffff19166101011790555b6001600160a01b038216610dc05760405162461bcd60e51b8152602060048201526018602482015277436f6e74726f6c6c65723a2061646472657373207a65726f60401b604482015260640161091d565b60fc805460ff191690556001600160a01b038216600081815260fb6020526040902080546001600160a01b0319169091179055610dfb611ebc565b610e13600080516020612da483398151915283611f37565b60fc8054610100600160a81b0319166101006001600160a01b038516021790558015610a7f576000805461ff00191690555050565b610e60600080516020612da483398151915233611543565b610e7c5760405162461bcd60e51b815260040161091d90612b6c565b6001600160a01b038116610ecd5760405162461bcd60e51b8152602060048201526018602482015277436f6e74726f6c6c65723a2061646472657373207a65726f60401b604482015260640161091d565b6001600160a01b03818116600090815260fb60205260409020541615610f3f5760405162461bcd60e51b815260206004820152602160248201527f436f6e74726f6c6c65723a2061646d696e20616c7265616479206578697374656044820152601960fa1b606482015260840161091d565b6001600160a01b038116600081815260fb6020526040902080546001600160a01b0319169091179055610aa7600080516020612da483398151915282611f37565b600080610f8c84611afe565b6001600160a01b03808716600090815261013460209081526040808320938916835292815282822083516080808201865282548252600183015482850152600283015482870152600390920154606080830191909152855160e081018752858152938401859052948301849052938201839052810182905260a0810182905260c081019190915291925090826001600160a01b0316631e7f87bc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561105057600080fd5b505afa158015611064573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110889190612a90565b6020820152604051632640d9db60e01b81526001600160a01b038881166004830152841690632640d9db9060240160206040518083038186803b1580156110ce57600080fd5b505afa1580156110e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111069190612a90565b81526040516306e4c5a760e31b81526001600160a01b0388811660048301528416906337262d389060240160206040518083038186803b15801561114957600080fd5b505afa15801561115d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111819190612a90565b8160600181815250508060200151836001600160a01b031663817b1cd26040518163ffffffff1660e01b815260040160206040518083038186803b1580156111c857600080fd5b505afa1580156111dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112009190612a90565b61120a9190612d04565b604082015260208201514381111561121f5750435b60008661122c8343612d04565b6112369190612cad565b8451604051636eb1fbb160e11b81526001600160a01b038c8116600483015260248201849052929350909187169063dd63f7629060440160206040518083038186803b15801561128557600080fd5b505afa158015611299573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bd9190612a90565b6112c79190612cad565b6080840152604051632ba6d6dd60e11b81526001600160a01b038a8116600483015286169063574dadba9060240160206040518083038186803b15801561130d57600080fd5b505afa158015611321573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113459190612a90565b60a08401526040516321d2a57360e01b81526001600160a01b038a811660048301528616906321d2a5739060240160206040518083038186803b15801561138b57600080fd5b505afa15801561139f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c39190612a0c565b151560c08401819052835160a085015160608601516000936113e793929190611f41565b90506114048a8a8660400151876000015188608001518787611fce565b85606001516114139190612cad565b9a9950505050505050505050565b60fc5461010090046001600160a01b031633146114505760405162461bcd60e51b815260040161091d90612b9b565b60fc5460ff16156114735760405162461bcd60e51b815260040161091d90612c81565b60fc805460ff191660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001610b5a565b6114c8600080516020612da483398151915233611543565b6114e45760405162461bcd60e51b815260040161091d90612b6c565b60fc80546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b611524600080516020612da483398151915233610a05565b33600090815260fb6020526040902080546001600160a01b0319169055565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60008061157a83611afe565b604051632640d9db60e01b81526001600160a01b038681166004830152919250600091831690632640d9db9060240160206040518083038186803b1580156115c157600080fd5b505afa1580156115d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f99190612a90565b604051632ba6d6dd60e11b81526001600160a01b03878116600483015291925060009184169063574dadba9060240160206040518083038186803b15801561164057600080fd5b505afa158015611654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116789190612a90565b6040516306e4c5a760e31b81526001600160a01b0388811660048301529192506000918516906337262d389060240160206040518083038186803b1580156116bf57600080fd5b505afa1580156116d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f79190612a90565b6040516321d2a57360e01b81526001600160a01b0389811660048301529192506000918616906321d2a5739060240160206040518083038186803b15801561173e57600080fd5b505afa158015611752573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117769190612a0c565b905061178484848484611f41565b98975050505050505050565b600082815260c960205260409020600101546117ac8133611baf565b610a008383611c99565b60fc5460009060ff16156117dc5760405162461bcd60e51b815260040161091d90612c81565b816117e681611afe565b6001600160a01b0316336001600160a01b0316146118165760405162461bcd60e51b815260040161091d90612bed565b600061182485856000610f80565b9050600061183185611afe565b90506000816001600160a01b0316631e7f87bc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561186e57600080fd5b505afa158015611882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a69190612a90565b826001600160a01b031663817b1cd26040518163ffffffff1660e01b815260040160206040518083038186803b1580156118df57600080fd5b505afa1580156118f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119179190612a90565b6119219190612d04565b90506119368161013154436109bf9190612d04565b610130908155436101318190556001600160a01b038981166000908152610134602090815260408083208c85168452909152808220918255600182019390935592546002909301929092556101325490516370a0823160e01b8152306004820152859291909116906370a082319060240160206040518083038186803b1580156119bf57600080fd5b505afa1580156119d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f79190612a90565b10158015611a055750600083115b15611a925761013254611a22906001600160a01b0316888561213e565b6001600160a01b03808816600081815261013460209081526040808320948b1683529390528281206003015590517f9074ae8fe137f8dd6d158c0e5f1d0b3169b04ba4be11a18ec03b9269b8e91a1a90611a7f9086815260200190565b60405180910390a28294505050506109d3565b6001600160a01b03878116600081815261013460209081526040808320948b168352938152838220600301879055925190815290917f9074ae8fe137f8dd6d158c0e5f1d0b3169b04ba4be11a18ec03b9269b8e91a1a910160405180910390a2600094505050506109d3565b6101335460405163e486033960e01b81526001600160a01b038381166004830152600092169063e486033990602401604080518083038186803b158015611b4457600080fd5b505afa158015611b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610772919061286f565b600082611b925750670de0b6b3a764000061071a565b81611ba157506101305461071a565b610717836101305484612190565b611bb98282611543565b610a7f57611bd1816001600160a01b031660146121ba565b611bdc8360206121ba565b604051602001611bed929190612ac4565b60408051601f198184030181529082905262461bcd60e51b825261091d91600401612b39565b611c1d8282611543565b610a7f57600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611c553390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611ca38282611543565b15610a7f57600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611d18600080516020612da483398151915233611543565b610aa75760405162461bcd60e51b815260040161091d90612b6c565b6000611d677f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b9050611d728461239c565b600083511180611d7f5750815b15611d9057611d8e8484612441565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16611eb557805460ff191660011781556040516001600160a01b0383166024820152611e0f90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052612441565b50805460ff191681557f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b03838116911614611eac5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b606482015260840161091d565b611eb58561252c565b5050505050565b600054610100900460ff1680611ed5575060005460ff16155b611ef15760405162461bcd60e51b815260040161091d90612c33565b600054610100900460ff16158015611f13576000805461ffff19166101011790555b611f1b61256c565b611f2361256c565b8015610aa7576000805461ff001916905550565b610a7f8282611c13565b60008115611fbb57841580611f565750838310155b80611f615750848310155b15611f755750670de0b6b3a7640000611fc6565b6000611f818486612d04565b90506000611f8f8588612d04565b90506000611f9d83836125d6565b9050611fb1670de0b6b3a764000082612cad565b9350505050611fc6565b50670a688906bd8b00005b949350505050565b6001600160a01b03808816600090815261013460209081526040808320938a16835292905290812060020154846120058588612ce5565b101561205f5760405162461bcd60e51b815260206004820152602360248201527f20436f6d7074726f6c6c65723a2066726f7a656e20636f696e206167652065726044820152623937b960e91b606482015260840161091d565b85158061206a575086155b80612073575080155b8061207c575083155b1561208b576000915050612133565b60008486612099828a612ce5565b6120a39190612d04565b6120ad9190612cc5565b905060006120bb8987611b7c565b9050828110156121175760405162461bcd60e51b815260206004820152602160248201527f436f6d7074726f6c6c65723a20696e666c6174696f6e496e646578206572726f6044820152603960f91b606482015260840161091d565b61212d8561212784818786612d04565b9061260d565b93505050505b979650505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a00908490612649565b6000826121a6856121a087610755565b906125d6565b6121b09084612ce5565b611fc69190612cad565b606060006121c9836002612ce5565b6121d4906002612cad565b67ffffffffffffffff8111156121fa57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612224576020820181803683370190505b509050600360fc1b8160008151811061224d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061228a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006122ae846002612ce5565b6122b9906001612cad565b90505b600181111561234d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106122fb57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061231f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361234681612d4b565b90506122bc565b5083156107175760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161091d565b803b6124005760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161091d565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6124a05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161091d565b600080846001600160a01b0316846040516124bb9190612aa8565b600060405180830381855af49150503d80600081146124f6576040519150601f19603f3d011682016040523d82523d6000602084013e6124fb565b606091505b50915091506125238282604051806060016040528060278152602001612dc46027913961271b565b95945050505050565b6125358161239c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff1680612585575060005460ff16155b6125a15760405162461bcd60e51b815260040161091d90612c33565b600054610100900460ff16158015611f23576000805461ffff19166101011790558015610aa7576000805461ff001916905550565b6000806125e4600284612cc5565b9050826125f9670de0b6b3a764000086612ce5565b6126039083612cad565b611fc69190612cc5565b6000670de0b6b3a76400006126228385612ce5565b6126356002670de0b6b3a7640000612cc5565b61263f9190612cad565b6107179190612cc5565b600061269e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127549092919063ffffffff16565b805190915015610a0057808060200190518101906126bc9190612a0c565b610a005760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161091d565b6060831561272a575081610772565b82511561273a5782518084602001fd5b8160405162461bcd60e51b815260040161091d9190612b39565b6060611fc6848460008585843b6127ad5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161091d565b600080866001600160a01b031685876040516127c99190612aa8565b60006040518083038185875af1925050503d8060008114612806576040519150601f19603f3d011682016040523d82523d6000602084013e61280b565b606091505b509150915061213382828661271b565b60006020828403121561282c578081fd5b813561071781612d8e565b60008060408385031215612849578081fd5b823561285481612d8e565b9150602083013561286481612d8e565b809150509250929050565b60008060408385031215612881578182fd5b825161288c81612d8e565b602084015190925061286481612d8e565b6000806000606084860312156128b1578081fd5b83356128bc81612d8e565b925060208401356128cc81612d8e565b929592945050506040919091013590565b600080600080608085870312156128f2578081fd5b84356128fd81612d8e565b9350602085013561290d81612d8e565b93969395505050506040820135916060013590565b60008060408385031215612934578182fd5b823561293f81612d8e565b9150602083013567ffffffffffffffff8082111561295b578283fd5b818501915085601f83011261296e578283fd5b81358181111561298057612980612d78565b604051601f8201601f19908116603f011681019083821181831017156129a8576129a8612d78565b816040528281528860208487010111156129c0578586fd5b82602086016020830137856020848301015280955050505050509250929050565b600080604083850312156129f3578182fd5b82356129fe81612d8e565b946020939093013593505050565b600060208284031215612a1d578081fd5b81518015158114610717578182fd5b600060208284031215612a3d578081fd5b5035919050565b60008060408385031215612a56578182fd5b82359150602083013561286481612d8e565b600060208284031215612a79578081fd5b81356001600160e01b031981168114610717578182fd5b600060208284031215612aa1578081fd5b5051919050565b60008251612aba818460208701612d1b565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612afc816017850160208801612d1b565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612b2d816028840160208801612d1b565b01602801949350505050565b6020815260008251806020840152612b58816040850160208701612d1b565b601f01601f19169190910160400192915050565b60208082526015908201527421b7b73a3937b63632b91d103737ba1030b236b4b760591b604082015260600190565b60208082526032908201527f436f6e74726f6c6c65723a2063616c6c657220646f6573206e6f7420686176656040820152712074686520677561726469616e20726f6c6560701b606082015260800190565b60208082526026908201527f556e696f6e546f6b656e3a206f6e6c792075736572206d616e616765722063616040820152651b8818d85b1b60d21b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526012908201527110dbdb9d1c9bdb1b195c8e881c185d5cd95960721b604082015260600190565b60008219821115612cc057612cc0612d62565b500190565b600082612ce057634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612cff57612cff612d62565b500290565b600082821015612d1657612d16612d62565b500390565b60005b83811015612d36578181015183820152602001612d1e565b83811115612d45576000848401525b50505050565b600081612d5a57612d5a612d62565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610aa757600080fdfe2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca025096416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122058e2d7347bf6fe4031dd60a0fe8bd8d737cbd65100e3731b60013bd09181d45f64736f6c63430008040033",
  "devdoc": {
    "events": {
      "LogWithdrawRewards(address,uint256)": {
        "details": "Withdraw rewards event",
        "params": {
          "account": "The staker's address",
          "amount": "The amount of Union tokens to withdraw"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addAdmin(address)": {
        "details": "Add a new admin account",
        "params": {
          "account": "Account address"
        }
      },
      "calculateRewards(address,address)": {
        "details": "Calculate currently unclaimed rewards",
        "params": {
          "account": "Account address",
          "token": "Staking token address"
        },
        "returns": {
          "_0": "Unclaimed rewards"
        }
      },
      "calculateRewardsByBlocks(address,address,uint256)": {
        "details": "Calculate unclaimed rewards based on blocks",
        "params": {
          "account": "User address",
          "futureBlocks": "Number of blocks in the future",
          "token": "Staking token address"
        },
        "returns": {
          "_0": "Unclaimed rewards"
        }
      },
      "getRewardsMultiplier(address,address)": {
        "details": "Get the reward multipier based on the account status",
        "params": {
          "account": "Account address",
          "token": "ERC20 token address"
        },
        "returns": {
          "_0": "Multiplier number (in wei)"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "inflationPerBlock(uint256)": {
        "details": "Calculate inflation per block",
        "params": {
          "effectiveTotalStake": "Effective total stake"
        },
        "returns": {
          "_0": "Inflation amount, div totalSupply is the inflation rate"
        }
      },
      "isAdmin(address)": {
        "details": "Check if the address provided is the admin",
        "params": {
          "account": "Account address"
        }
      },
      "pause()": {
        "details": "Called by a pauser to pause, triggers stopped state."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceAdmin()": {
        "details": "Renouce the admin from the sender's address"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setGuardian(address)": {
        "details": "Set pauseGuardian account",
        "params": {
          "account": "Account address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "Called by a pauser to unpause, returns to normal state."
      },
      "updateTotalStaked(address,uint256)": {
        "details": "When total staked change update inflation index",
        "params": {
          "totalStaked": "totalStaked amount"
        },
        "returns": {
          "_0": "Whether succeeded"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdrawRewards(address,address)": {
        "details": "Withdraw rewards",
        "params": {
          "token": "Staking token address"
        },
        "returns": {
          "_0": "Amount of rewards"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 821,
        "contract": "contracts/token/Comptroller.sol:Comptroller",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 824,
        "contract": "contracts/token/Comptroller.sol:Comptroller",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 804,
        "contract": "contracts/token/Comptroller.sol:Comptroller",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 937,
        "contract": "contracts/token/Comptroller.sol:Comptroller",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2184,
        "contract": "contracts/token/Comptroller.sol:Comptroller",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2493,
        "contract": "contracts/token/Comptroller.sol:Comptroller",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/token/Comptroller.sol:Comptroller",
        "label": "_roles",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 333,
        "contract": "contracts/token/Comptroller.sol:Comptroller",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10453,
        "contract": "contracts/token/Comptroller.sol:Comptroller",
        "label": "_admins",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 10455,
        "contract": "contracts/token/Comptroller.sol:Comptroller",
        "label": "_paused",
        "offset": 0,
        "slot": "252",
        "type": "t_bool"
      },
      {
        "astId": 10457,
        "contract": "contracts/token/Comptroller.sol:Comptroller",
        "label": "pauseGuardian",
        "offset": 1,
        "slot": "252",
        "type": "t_address"
      },
      {
        "astId": 10697,
        "contract": "contracts/token/Comptroller.sol:Comptroller",
        "label": "______gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 19856,
        "contract": "contracts/token/Comptroller.sol:Comptroller",
        "label": "halfDecayPoint",
        "offset": 0,
        "slot": "303",
        "type": "t_uint256"
      },
      {
        "astId": 19858,
        "contract": "contracts/token/Comptroller.sol:Comptroller",
        "label": "gInflationIndex",
        "offset": 0,
        "slot": "304",
        "type": "t_uint256"
      },
      {
        "astId": 19860,
        "contract": "contracts/token/Comptroller.sol:Comptroller",
        "label": "gLastUpdatedBlock",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 19863,
        "contract": "contracts/token/Comptroller.sol:Comptroller",
        "label": "unionToken",
        "offset": 0,
        "slot": "306",
        "type": "t_contract(IERC20Upgradeable)1647"
      },
      {
        "astId": 19866,
        "contract": "contracts/token/Comptroller.sol:Comptroller",
        "label": "marketRegistry",
        "offset": 0,
        "slot": "307",
        "type": "t_contract(IMarketRegistry)14494"
      },
      {
        "astId": 19873,
        "contract": "contracts/token/Comptroller.sol:Comptroller",
        "label": "users",
        "offset": 0,
        "slot": "308",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Info)19822_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Upgradeable)1647": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IMarketRegistry)14494": {
        "encoding": "inplace",
        "label": "contract IMarketRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(Info)19822_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct Comptroller.Info))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Info)19822_storage)"
      },
      "t_mapping(t_address,t_struct(Info)19822_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Comptroller.Info)",
        "numberOfBytes": "32",
        "value": "t_struct(Info)19822_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_struct(Info)19822_storage": {
        "encoding": "inplace",
        "label": "struct Comptroller.Info",
        "members": [
          {
            "astId": 19815,
            "contract": "contracts/token/Comptroller.sol:Comptroller",
            "label": "frozenCoinAge",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19817,
            "contract": "contracts/token/Comptroller.sol:Comptroller",
            "label": "updatedBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19819,
            "contract": "contracts/token/Comptroller.sol:Comptroller",
            "label": "inflationIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19821,
            "contract": "contracts/token/Comptroller.sol:Comptroller",
            "label": "accrued",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/token/Comptroller.sol:Comptroller",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/token/Comptroller.sol:Comptroller",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}